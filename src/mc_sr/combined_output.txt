

==================== START OF FILE: cli.py ====================

import argparse
import numpy as np

def calc_mse(x, y):
    a, b, c = 1.0, 1.0, 1.7
    y_pred = a * x ** 2 + b * np.sin(c * x)
    return np.mean((y - y_pred) ** 2)

def run_mwe(seed=123):
    np.random.seed(seed)
    x = np.linspace(-2, 2, 512)
    y = np.sin(1.7 * x) + x ** 2 + np.random.normal(0, 0.02, x.shape)
    mse = calc_mse(x, y)
    print(f"MWE: Toy equation MSE = {mse:.6f}")

def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest="command")
    mwe_parser = subparsers.add_parser("mwe", help="Run minimal working example")
    args = parser.parse_args()

    if args.command == "mwe":
        run_mwe()
    else:
        parser.print_help()

if __name__ == "__main__":
    main()

==================== START OF FILE: equation.py ====================

""" Class for symbolic equations with tunable constants and tree structure."""

# import numpy for vectorized operations
import numpy as np
from scipy.optimize import least_squares
import random
import copy

PENALTY_VALUE = 1e6

operators = ['+', '-', '*', '/', 'sin', 'cos', 'pow']
binary_ops = ['+', '-', '*', '/', 'pow']
unary_ops = ['sin', 'cos']

class EquationNode:
    """
    A node in the expression tree.
    Each node can be an operator (like '+', '*', 'sin') or a terminal (like 'x' or a constant).
    """
    def __init__(self, value, const_idx=None, children=None):
        self.value = value  # operator, variable, or constant
        self.const_idx = const_idx
        self.children = children or []  # list of child nodes
        if self.value in binary_ops:
            assert len(self.children) == 2, f"Binary operator {self.value} must have 2 children."
        elif self.value in unary_ops:
            assert len(self.children) == 1, f"Unary operator {self.value} must have 1 child."

class Equation:
    """
    Represents a symbolic equation as an expression tree with tunable constants.
    """
    def __init__(self, root, n_variables = 1, constants=None):
        """
        root: EquationNode, the root of the tree.
        constants: dict mapping names or indices to values (could be a list, array, or dict).
        """
        self.root = root
        self.n_variables = n_variables # number of input variables
        self.constants = constants if constants is not None else {}

    @staticmethod
    def random_init(n_vars, max_depth=3,
                    operators=None,
                    p_const=0.5,
                    n_constants_range=(1, 4)):
        """
        Randomly initialize an equation (tree structure and constants).
        
        Parameters:
            max_depth: int, maximum tree depth.
            operators: list of operators to choose from.
            p_const: float, probability to generate a constant node.
            n_constants_range: tuple, min/max constants in the expression.
        Returns:
            Equation instance.
        """
        operators = operators or ['+', '-', '*', '/', 'sin', 'cos', 'pow']
        constants = {}
        const_indices = []
        var_nodes = [f'x{i}' for i in range(n_vars)]
        # print("Variable nodes:", var_nodes)

        def build_node(depth):
            if depth >= max_depth or (depth>0 and random.random()<0.3):
                # Terminal node
                if random.random() < p_const:
                    idx = len(const_indices)
                    const_indices.append(idx)
                    return EquationNode('const', const_idx=idx)
                else:
                    var = random.choice(var_nodes)
                    return EquationNode(var)
            else:
                op = random.choice(operators)
                if op in ['sin', 'cos']:
                    child = build_node(depth+1)
                    return EquationNode(op, children = [child])
                elif op == 'pow':
                    left = build_node(depth+1)
                    right = build_node(depth+1)
                    return EquationNode(op, children = [left, right])
                else:
                    # binary
                    left = build_node(depth+1)
                    right = build_node(depth+1)
                    return EquationNode(op, children = [left, right])

        root = build_node(0)
        # Initialize constants randomly, e.g. uniform [-2,2]
        for idx in const_indices:
            constants[idx] = np.random.uniform(-2,2)
        eq = Equation(root, n_variables=n_vars, constants=constants)
        # print(eq)
        assert eq.n_variables == n_vars
        assert eq is not None
        return eq

    def evaluate(self, x):
        """ToDo: add support for multiple variables"""
        """
        Evaluate the equation for given x values.
        x: float or np.ndarray
        Returns: float or np.ndarray
        """
        # print("Data shape:", x.shape)
        # print("Data:", x)
        assert x.ndim == 2 and x.shape[1] == self.n_variables , f"Input x must have shape (n_samples, {self.n_variables}), but received shape {x.shape}"
        n_samples = x.shape[0]
        def _eval(node): #, const_counter=[0]):
            v = node.value
            #print("Evaluating node:", v)
            if v == 'const':
                # Constants numbered by order of appearance during tree construction
                # the value is stored in the node
                idx = node.const_idx
                # const_counter[0] += 1
                #print("Using constant index:", idx, "value:", self.constants[idx])
                assert self.constants[idx] is not None, f"Constant {idx} not set."
                return np.full(n_samples, self.constants[idx])
            elif v.startswith('x'):
                vi = int(v[1:])
                res = x[:, vi]
                assert res.shape == (n_samples,), f"Variable x{vi} output shape {res.shape}"
                return x[:, vi]
            elif v in {'+', '-', '*', '/', 'pow'}:
                left = _eval(node.children[0])#, const_counter)
                right = _eval(node.children[1])#, const_counter)
                #print(f"Operator: {v}, Left: {left}, Right: {right}")
                assert left.shape == (n_samples,), f"left output shape {left.shape} for op '{v}'"
                assert right.shape == (n_samples,), f"right output shape {right.shape} for op '{v}'"
                if v == '+': return left + right
                if v == '-': return left - right
                if v == '*': return left * right
                if v == '/':
                    # Avoid division by zero
                    # Add small epsilon to denominator if needed
                    # Robust division with per-element epsilon
                    right_safe = np.where(np.abs(right) < 1e-6, np.sign(right)*1e-6, right)
                    out = left / right_safe
                    out = np.where(np.isfinite(out), out, PENALTY_VALUE)
                   
                    return out
                if v == 'pow':
                    # Avoid complex results for negative bases and non-integer exponents
                    # with np.errstate(invalid="ignore"):
                    #     result = np.power(left, right)
                    #     # fallback: replace nan/inf with large value
                    #     result = np.where(np.isfinite(result), result, 1e6)
                    # return result
                    with np.errstate(invalid="ignore", over="ignore", divide="ignore"):
                        # Limit exponents to avoid overflow (clip at reasonable large number)
                        left_clip = np.clip(left, -1e2, 1e2)
                        right_clip = np.clip(right, -10, 10)
                        result = np.power(left_clip, right_clip)
                        result = np.where(np.isfinite(result), result, PENALTY_VALUE)
                    return result
            if v == 'sin': 
                child = _eval(node.children[0])
                assert child.shape == (n_samples,), f"child output shape {child.shape} for op '{v}'"
           
                out = np.sin(child)
                out = np.where(np.isfinite(out), out, PENALTY_VALUE)
                return out
            if v == 'cos': 
                child = _eval(node.children[0])
                assert child.shape == (n_samples,), f"child output shape {child.shape} for op '{v}'"
            
                out = np.cos(child)
                out = np.where(np.isfinite(out), out, PENALTY_VALUE)
                return out
            # elif v in {'sin', 'cos'}:
            #     child = _eval(node.children[0])#, const_counter)
            #     assert child.shape == (n_samples,), f"child output shape {child.shape} for op '{v}'"
            #     #print(f"Applying {v} to {child}")
            #     if v == 'sin': return np.sin(child)
            #     if v == 'cos': return np.cos(child)
            else:
                raise ValueError(f"Unknown node value: {v}")

        # Always reset per call
       
        return _eval(self.root)#, [0])
    
    def calculate_mse(self, x_data, y_data):
        """Calculate MSE with current constants (no fitting)."""
        y_pred = self.evaluate(x_data)
        residuals = y_pred - y_data
        residuals = np.where(np.isfinite(residuals), residuals, 0)  # Replace inf/nan with 0 or some sentinel
        mse = np.mean(residuals ** 2)
        # mse = np.mean((y_pred - y_data)**2)
        return mse
    
    def collect_used_const_indices(self):
        used = set()
        def walk(node):
            if node.value == 'const':
                used.add(node.const_idx)
            for child in node.children:
                walk(child)
        walk(self.root)
        return used

    def fit_constants(self, x, y, method="lsq"):
        """
        Fit or optimize the constants of the equation so that self.evaluate(x_data) matches y_data (min MSE).
        Returns MSE after fitting.
        """
        def residual(c):
            # Predict y using candidate constants
            used_indices = self.collect_used_const_indices()
            self.constants = {idx: c[i] for i, idx in enumerate(used_indices)}
            y_pred = self.evaluate(x) #, constants=c)
            
            y_pred = np.asarray(y_pred).flatten()
            y1 = np.asarray(y).flatten()
            if y_pred.shape != y1.shape:
                raise ValueError(f"Shape mismatch: y_pred {y_pred.shape}, y {y.shape}")
            
            res = (y_pred - y1).flatten()
            # Mask nans/infs for optimizer
            res = np.where(np.isfinite(res), res, 1e6)
            return res
        
        def count_param_nodes(node):
            count = 1  # Each node has a constant
            for child in node.children:
                count += count_param_nodes(child)
            return count
        
        # Initial guess: use current constants or 1s
        initial_c = np.array(
            [self.constants.get(i, 1.0) for i in range(len(self.constants))]
            ) if isinstance(self.constants, dict) else np.array(self.constants)
        if initial_c.size == 0:  # fallback if not set
            # number of constants = number of nodes in the tree
            num_consts = count_param_nodes(self.root)
            initial_c = np.ones(num_consts)
        
        # Run non-linear least squares fit
        result = least_squares(residual, initial_c)
        # Update self.constants to best found
        self.constants = self.constants = {k:v for k, v in enumerate(result.x)}
        # Compute and return MSE
        mse = np.mean(residual(result.x)**2)
        return mse
    
    def random_terminal(self):
        if random.random() < 0.5:
            # Find new unique const_idx
            used = set()
            def collect(node):
                if node.value == 'const':
                    used.add(node.const_idx)
                for child in node.children:
                    collect(child)
            collect(self.root)
            max_idx = max(used) if used else -1
            new_idx = max_idx + 1
            self.constants[new_idx] = np.random.uniform(-2,2)
            return EquationNode('const', const_idx=new_idx)
        else:
            var_idx = random.randint(0, self.n_variables - 1)
            return EquationNode(f'x{var_idx}')
    
    def remove_unused_constants(self):
        used = set()
        def collect(node):
            if node.value == 'const':
                used.add(node.const_idx)
            for child in node.children:
                collect(child)
        collect(self.root)
        # Keep only the constants in use
        self.constants = {k: v for k, v in self.constants.items() if k in used}
       

    def mutate(self, action=None, node=None, value=None):
        """
        Randomly mutate tree structure, operator, terminals or constants.
        Actions:
        - Insert: Add a new random operator or sub-expression at a node.
        - Delete: Remove a sub-tree or node.
        - Substitute: Replace an operator, a terminal, or a constant.
        - Perturb constants: Slightly change a numeric constant.
        """
        import random
        actions = ['insert', 'delete', 'substitute', 'perturb']
        if action is None:
            action = random.choice(actions)

        terminals = ['const'] + [f'x{i}' for i in range(self.n_variables)]

        mutant = copy.deepcopy(self)

        def get_all_nodes(node, parent=None, nodes=None):
            if nodes is None:
                nodes = []
            nodes.append((node, parent))
            for child in node.children:
                get_all_nodes(child, node, nodes)
            return nodes

        nodes = get_all_nodes(mutant.root)

        if action == 'insert':
            # Insert a random operator/subtree at a random node
            if value is None:
                op_choices = ['+', '-', '*', '/', 'sin', 'cos', 'pow']
                op = random.choice(op_choices)
            else:
                op = value
            # Choose a random target node to insert at
            if node is None:
                target, _ = random.choice(nodes)
            else:
                target = node
            # For binary ops, add two children; for unary, one
            if op in ['sin', 'cos']:
                new_child = mutant.random_terminal()
                new_node = EquationNode(op, children = [new_child])
            # binary 
            else:
                left = mutant.random_terminal()
                right = mutant.random_terminal()
                new_node = EquationNode(op, children = [left, right])
                assert len(new_node.children) == 2
            # Insert as a new child (or replace one child if possible)
            target.children.append(new_node)

        elif action == 'delete':
            # Remove a random node (not root)
            
            non_root_nodes = [(n, p) for n, p in nodes if p is not None]
            candidates = []
            for n, p in non_root_nodes:
                if p.value in binary_ops:
                    # Deleting a child would leave <2 children: illegal, skip
                    if len(p.children) <= 2:
                        continue
                if p.value in unary_ops:
                    # Deleting a child would leave <1 child: illegal, skip
                    if len(p.children) <= 1:
                        continue
                candidates.append((n, p))
            if candidates:
                if node is None:
                    node_to_delete, parent = random.choice(candidates)
                else:
                    node_to_delete = node
                    parent = next((p for n, p in candidates if n == node), None)
                parent.children = [c for c in parent.children if c != node_to_delete]
            mutant.remove_unused_constants()

        elif action == 'substitute':
            # Replace a random node's value
            if node is None:
                node_to_sub, _ = random.choice(nodes)
            # Change operator, variable, or constant
            if node_to_sub.value in unary_ops:
                node_to_sub.value = random.choice(unary_ops)
            elif node_to_sub.value in binary_ops:
                node_to_sub.value = random.choice(binary_ops)
            # elif node_to_sub.value == 'x':
            #     node_to_sub.value = 'const'
            # elif node_to_sub.value == 'const':
            #     node_to_sub.value = 'x'
            elif node_to_sub.value.startswith('x') or node_to_sub.value == 'const':
                terminal_nodes = [(n, p) for n, p in nodes if not n.children]
                if terminal_nodes:
                    node_to_sub, _ = random.choice(terminal_nodes)
                    old_val = node_to_sub.value
                    new_val = random.choice(terminals)
                    while new_val == old_val:
                        new_val = random.choice(terminals)
                    # CASE 1: Substituting FROM variable TO const
                    if old_val.startswith('x') and new_val == 'const':
                        # Find unused const_idx
                        used_const = set()
                        def collect(node):
                            if node.value == 'const' and node.const_idx is not None:
                                used_const.add(node.const_idx)
                            for child in node.children:
                                collect(child)
                        collect(mutant.root)
                        max_idx = max(used_const) if used_const else -1
                        new_idx = max_idx + 1
                        node_to_sub.value = 'const'
                        node_to_sub.const_idx = new_idx
                        mutant.constants[new_idx] = np.random.uniform(-2,2)
                    # CASE 2: Substituting FROM const TO variable
                    elif old_val == 'const' and new_val.startswith('x'):
                        # Remove const_idx reference
                        if node_to_sub.const_idx is not None:
                            # (The constant will be cleaned up in remove_unused_constants())
                            node_to_sub.const_idx = None
                        node_to_sub.value = new_val
                    # CASE 3: Variable-to-variable or const-to-const
                    else:
                        node_to_sub.value = new_val
                        # If it's a new 'const', assign index as above
                        if new_val == 'const':
                            if node_to_sub.const_idx is None:
                                used_const = set()
                                def collect(node):
                                    if node.value == 'const' and node.const_idx is not None:
                                        used_const.add(node.const_idx)
                                    for child in node.children:
                                        collect(child)
                                collect(mutant.root)
                                max_idx = max(used_const) if used_const else -1
                                new_idx = max_idx + 1
                                node_to_sub.const_idx = new_idx
                                mutant.constants[new_idx] = np.random.uniform(-2,2)
                        # If it's a variable, drop old const_idx
                        elif new_val.startswith("x"):
                            node_to_sub.const_idx = None
                # After substitution, remove any no-longer-used constants
                mutant.remove_unused_constants()


                # # Substitute terminal: either a const or another variable
                # new_val = random.choice(terminals)
                # while new_val == node_to_sub.value:
                #     new_val = random.choice(terminals)
                # if new_val == 'const' and node_to_sub.const_idx is None:
                #     # Assign a new const_idx
                #     used = set()
                #     def collect(node):
                #         if node.value == 'const':
                #             used.add(node.const_idx)
                #         for child in node.children:
                #             collect(child)
                #     collect(mutant.root)
                #     max_idx = max(used) if used else -1
                #     new_idx = max_idx + 1
                #     node_to_sub.const_idx = new_idx
                #     mutant.constants[new_idx] = np.random.uniform(-2,2)
                # node_to_sub.value = new_val
                # mutant.constants[node_to_sub.const_idx] = np.random.uniform(-2,2)
                # mutant.remove_unused_constants()
            # else:
            #     # Fallback (just replace node with same arity, defaulting to const)
            #     new_node = EquationNode('const')

        elif action == 'perturb':
            # Slightly change a random constant
            if isinstance(mutant.constants, dict) and mutant.constants:
                k = random.choice(list(mutant.constants.keys()))
                mutant.constants[k] += np.random.normal(scale=0.1)
            elif isinstance(mutant.constants, (list, np.ndarray)) and len(mutant.constants) > 0:
                idx = random.randint(0, len(mutant.constants)-1)
                mutant.constants[idx] += np.random.normal(scale=0.1)
        
        assert mutant is not None
        assert mutant.n_variables == self.n_variables
        # self.remove_unused_constants()
        mutant.remove_unused_constants()
        return mutant
    
    def to_prefix(self):
        """
        Return list of tokens (prefix notation) for the tree, useful for speciation/clustering.
        """
        # Placeholder: implement tree traversal here
        raise NotImplementedError("Prefix conversion not implemented")
    
    def _to_infix(self, node):
        """
        Recursively convert tree to infix notation string.
        Supports unary and binary operators.
        """
        # Terminal node: variable or constant
        if not node.children:
            if node.value == "const":
                # Assume constants are indexed by order
                idx = node.const_idx
                return str(self.constants[idx])
            return str(node.value)
        
        # Unary operators (e.g., sin, cos)
        if len(node.children) == 1:
            return f"{node.value}({self._to_infix(node.children[0])})"
        
        # Binary operators (e.g., +, -, *, /, pow)
        if len(node.children) == 2:
            left = self._to_infix(node.children[0])
            right = self._to_infix(node.children[1])
            # For 'pow', print as **
            if node.value == "pow":
                return f"({left})**({right})"
            return f"({left} {node.value} {right})"
        
        # Unknown arity
        return f"{node.value}({', '.join(self._to_infix(child) for child in node.children)})"
    
    def __str__(self):
        """
        Pretty-print the equation in infix notation.
        """
        return f"Equation constants: {self.constants}\nTree:  {self._to_infix(self.root)}"

    # def __str__(self):
    #     """
    #     String representation of the equation (for debugging and logging).
    #     """
    #     # Could print as infix or prefix notation, include constants
    #     return f"Equation constants: {self.constants}\nTree: {self.to_prefix()}"

    # -- additional methods you might need --
    def depth(self):
        """ Return the max depth of the tree. """
        # Placeholder
        raise NotImplementedError("Tree depth not implemented")
    
    def size(self):
        """ Return the number of nodes in the tree. """
        # Placeholder
        def count_nodes(node):
            total = 1  # Count this node
            for child in node.children:
                total += count_nodes(child)
            return total
        return count_nodes(self.root)

==================== START OF FILE: evolution.py ====================

""" evolutionary step for calling mutation example:

def evolutionary_step(equation, llm, use_llm=False):
    # Use LLM if triggered, otherwise classical mutate
    if use_llm:
        return llm_mutate(equation, llm)
    else:
        return equation.mutate()  # classical random mutation
"""
from equation import Equation
from generator import Generator
from mcc import EquationMC, GeneratorMC
from logger import MetricLogger
import random, numpy
from llm_integration import LLMMutator

                # Initialize LLM Mutator
                

class EvolutionEngine:
    def __init__(self, equation_queue, generator_queue, anchor_x, anchor_y, 
                 tau, tau_prime, L_max,
                 n_generations=100, batch_size=10, logger=None, llm_enabled=False):
        for eq in equation_queue:
            if eq is None:
                raise RuntimeError("Equation queue returned None!")
        self.equation_queue = equation_queue
        self.generator_queue = generator_queue
        self.anchor_x = anchor_x
        self.anchor_y = anchor_y
        self.tau = tau
        self.tau_prime = tau_prime
        self.L_max = L_max
        self.n_generations = n_generations
        self.batch_size = batch_size
        self.logger = logger
        self.mc_pass_history = []              # Counts of MC passes each gen
        self.coverage_grid_history = []        # Cells filled per gen (optional)
        self.stagnation_window = 30            # How many generations to look back
        self.stagnation_min_passes = 0         # Min passes to avoid stagnation
        self.llm_enabled = llm_enabled         # Toggle for LLM mutation
        if self.llm_enabled:
            self.llm = LLMMutator()             # Initialize LLM mutator
            print("LLM integration enabled.")
        else:
            self.llm = None
        # add any other state you want to track (species, metrics, etc.)

    # def log_generation_metrics(self, passed_eqs, passed_gens):
    #     mc_passes = len(passed_eqs) + len(passed_gens)
    #     self.mc_pass_history.append(mc_passes)

    def select_parents(self, queue):
        """Uniform random parent selection from a single viable queue."""
        # If queue is smaller than batch_size, sample with replacement for infinite reproduction
        if len(queue) == 0:
            raise ValueError("Cannot select parents: queue is empty.")
        return random.choices(queue, k=self.batch_size)
    
    def trim_queue(self, queue):
        """Trim queue to max size by removing oldest entries."""
        while len(queue) > self.L_max:
            queue.pop(0)  # remove oldest

    def update_thresholds(self):
        # ToDo: Update MC thresholds - do we need it?
        pass 

    def check_stagnation(self):
        """
        Returns True if no new individuals have passed MC in the last N generations.
        """
        history = self.mc_pass_history
        window = self.stagnation_window
        min_passes = self.stagnation_min_passes
        # Only check if we've run enough generations
        if len(history) < window:
            return False
        recent = history[-window:]
        return sum(recent) <= min_passes
    
    def run(self):
        """
        Main evolution loop. Handles population management, mutation, evaluation,
        logging, and adaptive MC gating.
        """
        eq_mc = EquationMC(self.tau, self.tau_prime, self.L_max)
        gen_mc = GeneratorMC(self.tau_prime)
        for generation in range(self.n_generations):
            mse = []
            # ===== 1. SELECT PARENTS =====
            eq_parents = self.select_parents(self.equation_queue)
            gen_parents = self.select_parents(self.generator_queue)

        
            # ===== 2. GENERATE CHILDREN =====
            eq_children = [e.mutate() for e in eq_parents]
            gen_children = [g.mutate() for g in gen_parents]

           

            # ===== 3. EVALUATE EQUATIONS =====
            passed_eqs = []
            for eq in eq_children:
                # Refit constants (if structure mutated)
                # print(self.anchor_x.shape)  # --> (n_samples, n_variables)
                # print(self.anchor_y.shape)
                assert self.anchor_x.shape[0] == self.anchor_y.shape[0]
                eq.fit_constants(self.anchor_x, self.anchor_y)
                mse.append(eq.calculate_mse(self.anchor_x, self.anchor_y))
                # MC gate: must pass on anchor AND at least one generator
                if eq_mc.is_viable(eq, [self.anchor_x, self.anchor_y], self.generator_queue):
                    self.equation_queue.append(eq)
                    passed_eqs.append(eq)
                    self.trim_queue(self.equation_queue)
        
            # ===== 4. EVALUATE GENERATORS =====
            passed_gens = []
            for gen in gen_children:
                if gen_mc.is_viable(gen, self.equation_queue):
                    self.generator_queue.append(gen)
                    passed_gens.append(gen)
                    self.trim_queue(self.generator_queue)

            # # ===== 5. ADAPT THRESHOLDS =====
            # # Example: update tau to 25th percentile of anchor MSEs from last k successful equations
            # self.tau = self.update_thresholds(self.recent_eq_anchor_mse, 0.25)
            # self.tau_prime = self.update_thresholds(self.recent_eq_generator_mse, 0.25)

            # self.log_generation_metrics(passed_eqs, passed_gens)
            # ===== 7. LOG METRICS AND PASS-FAIL STATS =====
            
            # print(f"Gen {generation}: {len(passed_eqs)} equations and {len(passed_gens)} generators passed MC.")
            # print(f"  Queue sizes - Equations: {len(self.equation_queue)}, Generators: {len(self.generator_queue)}")
            # print(f"Equations: {[str(eq) for eq in self.equation_queue]}")
            # print(f"Generators: {[str(gen) for gen in self.generator_queue]}")
            # ===== 8. OPTIONAL: LLM TRIGGERS, COVERAGE GRID =====
            if self.llm_enabled and self.check_stagnation():
                print("Stagnation detected. Triggering LLM mutation...")
                eq_to_mutate = random.choice(eq_children)
                # Export your equation as string (or other format)
                eq_str = str(eq_to_mutate)

                # Get LLM-suggested mutation
                with open(self.logger.log_file, "r") as f:
                    data = f.read()

                mutation = self.llm.propose_eq_mutation(eq_str, context=data)
                if mutation:
                    # Apply mutation to create new equation
                    new_eq = self.llm.apply_eq_mutation(eq_to_mutate, mutation)
                    if new_eq:
                        self.equation_queue.append(new_eq)
                        self.trim_queue(self.equation_queue)
                        # print(f"LLM mutation applied: {mutation}")
                else:
                    print("LLM did not propose a valid mutation.")
            
            self.logger.log_generation(
                generation=generation,
                tau=self.tau,
                tau_prime=self.tau_prime,
                eq_passed=len(passed_eqs),
                gen_passed=len(passed_gens),
                eq_queue_size=len(self.equation_queue),
                gen_queue_size=len(self.generator_queue),
                equation_population = self.equation_queue,
                mse = mse,
                generators_population = self.generator_queue
            )

            self.logger.log_generation_csv(file="generation_log.csv",
                    gen_num=generation,
                    tau=self.tau,
                    tau_prime=self.tau_prime,
                    eq_mses_anchor=[eq.calculate_mse(self.anchor_x, self.anchor_y) for eq in eq_children],
                    # eq_mses_gen=[min([eq.calculate_mse(*gen.sample()) for gen in self.generator_queue]) for eq in eq_children],
                    eq_tree_sizes=[eq.size() for eq in eq_children],
                    num_eq_passed=len(passed_eqs),
                    num_gen_passed=len(passed_gens),
                    eq_queue_size=len(self.equation_queue),
                    gen_queue_size=len(self.generator_queue)
            )
            
                # gen_to_mutate = random.choice(gen_children)
                # gen_to_mutate = gen_to_mutate.mutate()
                # self.generator_queue.append(gen_to_mutate)
        
            # if self.use_map_elites:
            #     self.update_coverage_grid(passed_eqs, passed_gens)

            # ===== 9. END Generation =====

        # ===== 10. FINALIZE =====
        print("Evolution complete.")
        min_index = min(range(len(mse)), key=lambda i: mse[i])
        min_mse = mse[min_index]
        best_equation = eq_children[min_index]
        best_mse = best_equation.calculate_mse(self.anchor_x, self.anchor_y)
       
        assert abs(best_mse - min_mse) < 1e-5, f"Best equation MSE f{best_mse} does not match recorded min MSE f{min_mse}!"

        # Usage:
        print("Best MSE:", min_mse)
        print("Best Equation:", str(best_equation))
        return self.equation_queue, self.generator_queue #, self.logger.metrics

==================== START OF FILE: extract.py ====================

import os

def aggregate_files_to_single_txt(directory='.'):
    """
    Copies the content of all files in the given directory (excluding the 
    output file itself) into a single text file.
    
    Args:
        directory (str): The path to the directory to process. Defaults to 
                         the current directory ('.').
    """
    # Define the name of the output file
    output_filename = "combined_output.txt"
    
    # Resolve the full path for the output file
    output_path = os.path.join(directory, output_filename)
    
    print(f"Starting aggregation process in directory: {os.path.abspath(directory)}")
    
    # Use a 'with open' block for the output file to ensure it's closed properly
    with open(output_path, 'w', encoding='utf-8') as outfile:
        
        # Iterate over all items in the specified directory
        for item_name in os.listdir(directory):
            
            item_path = os.path.join(directory, item_name)
            
            # 1. Skip the output file to prevent an infinite loop/error
            if item_name == output_filename:
                continue
                
            # 2. Only process files (not subdirectories)
            if os.path.isfile(item_path):
                
                # Create a clear separator header
                separator = f"\n\n==================== START OF FILE: {item_name} ====================\n\n"
                outfile.write(separator)
                
                try:
                    # Read the content of the current file
                    with open(item_path, 'r', encoding='utf-8') as infile:
                        content = infile.read()
                        outfile.write(content)
                        
                    print(f"  - Successfully added content from: {item_name}")

                except UnicodeDecodeError:
                    # Handle files that are not simple text (e.g., binary files)
                    error_msg = f"\n[!] WARNING: Could not read {item_name} (Possible binary file). Skipping content.\n"
                    outfile.write(error_msg)
                    print(f"  - Skipped (Unicode Error): {item_name}")
                except Exception as e:
                    # Handle other potential errors
                    error_msg = f"\n[!] ERROR reading {item_name}: {e}\n"
                    outfile.write(error_msg)
                    print(f"  - Skipped (Error): {item_name}")

    print(f"\nAggregation complete! All contents saved to: {output_filename}")

# --- Execution ---

# Note: This script will run in the directory where you save and execute it.
# If you want to specify a different directory, change the argument below:
# For example: aggregate_files_to_single_txt('/path/to/my/folder')
aggregate_files_to_single_txt()

==================== START OF FILE: generation_log.csv ====================

generation,tau,tau_prime,eq_mse_min,eq_mse_mean,eq_mse_median,eq_mse_max,eq_tree_size_min,eq_tree_size_mean,eq_tree_size_max,num_eq_passed,num_gen_passed,eq_queue_size,gen_queue_size
0,0.3,0.35,0.25,4.685646547809034e+18,0.9121600044443845,6.441623570626234e+19,3,8.4,12,7,6,32,31
1,0.3,0.35,0.2499506820013274,71742045485.55226,0.5002004268080513,999999000000.5,3,8.28,15,7,10,39,40
2,0.3,0.35,0.24995068199866227,2.1090060077213394e+18,0.5002004268091458,5.2725149397802254e+19,3,9.12,16,8,19,40,40
3,0.3,0.35,0.2497715815166508,2.1089970478293192e+18,0.2500000000001208,5.272492619535181e+19,3,8.92,17,14,24,40,40
4,0.3,0.35,0.24995388353278278,28789310.936009984,0.2500000000000002,399207914.2261449,3,9.12,18,19,25,40,40
5,0.3,0.35,0.2497374694914312,6.3282591096549145e+37,0.25,1.5820647774137287e+39,3,9.36,17,23,25,40,40
6,0.3,0.35,0.2497715815166393,44323960.426443055,0.25,402759506.571476,3,9.16,20,22,25,40,40
7,0.3,0.35,0.2497374694914312,3.863476714110861e+37,0.25,9.658691785277152e+38,3,9.24,19,20,25,40,40
8,0.3,0.35,0.24865712131815368,2.426846937904666e+38,0.25000000000000017,6.067117344761665e+39,3,9.32,22,20,25,40,40
9,0.3,0.35,0.24865711858427578,40012804711.23155,0.25,999999000000.5,3,10.08,19,23,25,40,40
10,0.3,0.35,0.24973746949209039,1718705741.8791058,0.2500000000000004,42569336572.21036,3,11.16,25,23,25,40,40
11,0.3,0.35,0.24865711852803404,0.2630148651800476,0.25,0.49992236710100013,3,11.08,25,23,25,40,40
12,0.3,0.35,0.24865711849289718,1732808589.9689226,0.25,43320214742.66723,4,12.28,25,23,25,40,40
13,0.3,0.35,0.2486571184939764,0.27912029581107556,0.25,0.7299044115115105,5,11.6,25,23,25,40,40
14,0.3,0.35,0.2486571184908262,1685968250.688333,0.25,41817094331.8702,3,10.44,19,22,25,40,40
15,0.3,0.35,0.24973746949205639,3044783623.5594482,0.25000000000000006,75700642673.09859,3,10.2,22,20,25,40,40
16,0.3,0.35,0.24865711884012515,12506309.440183666,0.25,312657729.29910845,3,9.6,22,22,25,40,40
17,0.3,0.35,0.2499868905616808,217133239.39444444,0.2500000000000007,4125407591.2559133,5,9.88,22,18,24,40,40
18,0.3,0.35,0.2498246418875418,0.29076866782774746,0.25,0.7706165453849364,3,9.72,25,22,25,40,40
19,0.3,0.35,0.24865784307397795,17966599268.90618,0.2500000000000004,444385795084.56036,3,11.16,24,19,25,40,40
20,0.3,0.35,0.2498246418875418,0.3174295744896818,0.25,1.6845700978469762,3,11.48,25,23,25,40,40
21,0.3,0.35,0.24982464191908418,0.27857790091348666,0.25,0.7706165454678712,3,11.24,27,23,25,40,40
22,0.3,0.35,0.24865784307397795,12624815.39324326,0.25,315620378.5939016,3,13.6,28,23,25,40,40
23,0.3,0.35,0.24872811132743514,1745410361.5191505,0.25,43320216584.92834,3,10.92,25,20,25,40,40
24,0.3,0.35,0.24872811127948088,0.25003111252597715,0.25,0.25222505938554163,6,14.08,27,25,25,40,40
25,0.3,0.35,0.2487281112646227,12665448.245100837,0.25,316636200.1300647,6,14.88,28,24,25,40,40
26,0.3,0.35,0.25,4435819694.792194,0.25000000000000006,110560840394.46274,5,15.32,29,23,25,40,40
27,0.3,0.35,0.2499165364191913,3000441166.690365,0.25,75011029161.25699,5,14.96,31,24,25,40,40
28,0.3,0.35,0.24934771791928156,2.426846937904666e+38,0.25,6.067117344761665e+39,4,14.92,31,22,25,40,40
29,0.3,0.35,0.24934771608489137,0.2691667465557952,0.25,0.7299044114997227,3,17.12,31,24,25,40,40
30,0.3,0.35,0.2499506819974937,0.24999832145464862,0.25,0.2500073540741421,6,14.68,28,25,25,40,40
31,0.3,0.35,0.24960913022979014,4191410990.377165,0.25,104785274753.42952,3,14.4,31,24,25,40,40
32,0.3,0.35,0.24951386596613373,13782992.904230637,0.25,321818713.7701798,3,12.8,31,23,25,40,40
33,0.3,0.35,0.249513865811172,12984857.685316432,0.25,324621435.6127804,3,12.56,25,23,25,40,40
34,0.3,0.35,0.2495138655344206,0.24996591262982115,0.25,0.25000000012514484,3,13.16,28,25,25,40,40
35,0.3,0.35,0.24951854936687592,13148523.395384932,0.25,328713078.6355189,3,13.0,31,23,25,40,40
36,0.3,0.35,0.24951820801678362,40025399119.272514,0.25,999999000000.5,3,10.28,25,20,25,40,40
37,0.3,0.35,0.24970679623318442,0.28606934376040366,0.25,0.7368613586869623,3,12.96,31,22,25,40,40
38,0.3,0.35,0.2495182071048909,4785469012.963675,0.25,119636725317.88,3,12.96,28,23,25,40,40
39,0.3,0.35,0.24951820705016112,0.24996145656403165,0.25,0.25000000000046946,3,12.88,19,25,25,40,40
40,0.3,0.35,0.2496571339108612,0.24998628535715917,0.25,0.25000000001402656,3,14.04,22,25,25,40,40
41,0.3,0.35,0.24951820704674074,0.2916107801953776,0.25,0.7706165453849364,4,12.92,22,23,25,40,40
42,0.3,0.35,0.24949976322019232,26089207.525594458,0.25,334608433.2183182,3,14.28,24,22,25,40,40
43,0.3,0.35,0.24951820704657884,4633158137.543798,0.25,115511331684.14772,3,14.0,22,22,25,40,40
44,0.3,0.35,0.24949976318183273,0.259940063342744,0.25,0.5,3,14.64,22,24,25,40,40
45,0.3,0.35,0.24949976441150845,0.24996111244987693,0.25,0.2500000000208112,8,16.04,25,25,25,40,40
46,0.3,0.35,0.24949876349900332,0.28997483316966494,0.25,0.7706165453959004,6,14.4,25,23,25,40,40
47,0.3,0.35,0.24985134547772628,0.270818715636291,0.25,0.7706165453849365,6,17.08,28,24,25,40,40
48,0.3,0.35,0.2498333452638,0.3137142740942829,0.25,0.80179041603394,4,15.56,24,22,25,40,40
49,0.3,0.35,0.25,10000840858.571812,0.25,249697971865.2923,10,19.44,31,23,25,40,40


==================== START OF FILE: generator.py ====================

"""Class for generating sample datasets from the given big dataset."""


import numpy as np
import random
import copy

class Generator:
    def __init__(self, anchor_data, n_variables, input_range=(-2, 2), px='uniform', n_g=512, sigma_y=0.02, unit_scale=1.0, transform_flags=None, mode="benchmark", f_star=None):
        """
        Parameters
        ----------
        input_range   : tuple, range for x
        px            : str, distribution name ('uniform' or 'normal')
        n_g           : int, number of samples
        sigma_y       : float, output noise standard deviation
        unit_scale    : float, scaling factor for units
        transform_flags: dict or None, augmentation flags/settings
        anchor_data   : tuple (X_anchor, y_anchor) for real-data mode
        mode          : 'benchmark' or 'real'
        f_star        : function(x), true law (for benchmarks mode)
        """
        self.input_range = input_range
        self.px = px
        self.n_g = n_g
        self.sigma_y = sigma_y
        self.unit_scale = unit_scale
        self.transform_flags = transform_flags or {}
        self.anchor_data = anchor_data
        self.n_variables = n_variables
        if anchor_data is not None:
            self.n_variables = anchor_data[0].shape[1]
        self.mode = mode
        self.f_star = f_star


    @staticmethod
    def random_init(mode='benchmark',
                    input_range_choices=[(-2, 2), (-5, 5), (0, 1), (-1, 3)],
                    px_choices=['uniform', 'normal'],
                    n_g_range=(256, 1024),
                    sigma_y_range=(0.005, 0.05),
                    unit_scale_range=(0.5, 2.0),
                    transform_flag_pool=('aug', 'flip', 'scale'),
                    anchor_data=None,
                    f_star=None):
        """
        Returns a randomly initialized Generator instance.
        
        Parameters
        ----------
            mode: 'benchmark' or 'real'
            input_range_choices: list of tuples for possible input ranges
            px_choices: list of possible distribution names
            n_g_range: tuple (min, max) for sample size
            sigma_y_range: tuple (min, max) for output noise
            unit_scale_range: tuple (min, max) for scaling
            transform_flag_pool: tuple/list of possible transform flags
            anchor_data: if mode=='real'
            f_star: if mode=='benchmark'
        """
        
        input_range = random.choice(input_range_choices)
        px = random.choice(px_choices)
        n_g = random.randint(n_g_range[0], n_g_range[1])
        sigma_y = np.random.uniform(*sigma_y_range)
        unit_scale = np.random.uniform(*unit_scale_range)
        
        # Random transform flags: each with random True/False
        transform_flags = {k: bool(random.getrandbits(1)) for k in transform_flag_pool}
        
        # If benchmark, need a function f_star
        # if mode == 'benchmark' and f_star is None:
        #     # Example: f(x) = sin(x) + x^2
        #     f_star = lambda x: np.sin(x) + x**2
        
        # If real, need anchor_data (or leave as None)
        # anchor_data should be provided externally if wanted

        gen = Generator(
            input_range=input_range,
            px=px,
            n_g=n_g,
            sigma_y=sigma_y,
            unit_scale=unit_scale,
            transform_flags=transform_flags,
            anchor_data=anchor_data,
            n_variables=anchor_data[0].shape[1] if anchor_data is not None else 1,
            mode=mode,
            f_star=f_star
        )
        return gen

    def sample(self):
        """
        Materialize a dataset variant D_g = {(x_i, y_i)} of length n_g.

        Returns
        -------
        x : numpy array
        y : numpy array
        """
        if self.mode == "benchmark" and self.f_star is not None:
            # 1. Sample x_i according to px (within input_range)
            low, high = self.input_range
            if self.px == 'uniform':
                x = np.random.uniform(low, high, self.n_g)
            elif self.px == 'normal':
                x = np.random.normal((low+high)/2, (high-low)/4, self.n_g)
            else:
                raise ValueError("Unknown px type")
            # 2. Apply unit rescaling if needed
            x = self.unit_scale * x
            # 3. Generate y_i using f_star (true law) + noise
            y = self.f_star(x) + np.random.normal(0, self.sigma_y, self.n_g)
            # 4. Any additional transforms
            # (can implement more via transform_flags)
           
            return x.reshape(-1, 1), y

        elif self.mode == "real" and self.anchor_data is not None:
            X_anchor, y_anchor = self.anchor_data
            # 1. Bootstrap/subsample
            idx = np.random.choice(len(X_anchor), self.n_g, replace=True)
            x = X_anchor[idx]
            y = y_anchor[idx]
            # 2. Unit/scale transform
            x = self.unit_scale * x
            y = self.unit_scale * y
            # 3. Mild label noise
            y = y + np.random.normal(0, self.sigma_y, self.n_g)
            # 4. Any transform_flags logic here
            assert x.shape == (self.n_g, self.n_variables)
            assert y.shape == (self.n_g, )
            return x, y

        else:
            raise ValueError("Improper configuration for generator")
        
    def mutate(self):
        """
        Randomly mutate one parameter (range, noise, unit_scale, etc).
        Mutation means altering data-creation parameters:
        - Input range: Expand/narrow or shift sampling interval for x.
        - Noise level: Increase or decrease σ (sigma) for added label noise.
        - Distribution type: Switch between, e.g., uniform and normal.
        - Sample size: Adjust n_g up/down.
        - Unit/scaling: Modify scaling coefficient for x or y.
        - Transform flags: Toggle augmentation options, e.g., enable/disable a specific data transform.
        """
        import random
        mutation_types = ['input_range', 'noise', 'distribution', 'sample_size', 'unit_scale', 'transform_flag']
        mutation = random.choice(mutation_types)

        mutant = copy.deepcopy(self)

        if mutation == 'input_range':
            # Expand, narrow, or shift interval
            low, high = self.input_range
            action = random.choice(['expand', 'narrow', 'shift'])
            delta = (high - low) * 0.1
            if action == 'expand':
                mutant.input_range = (low - delta, high + delta)
            elif action == 'narrow' and (high - low) > 2 * delta:
                mutant.input_range = (low + delta, high - delta)
            elif action == 'shift':
                shift = random.uniform(-delta, delta)
                mutant.input_range = (low + shift, high + shift)

        elif mutation == 'noise':
            # Increase or decrease sigma_y
            factor = random.choice([0.8, 1.2])
            mutant.sigma_y = max(1e-6, self.sigma_y * factor)

        elif mutation == 'distribution':
            # Switch between uniform and normal
            mutant.px = 'normal' if self.px == 'uniform' else 'uniform'

        elif mutation == 'sample_size':
            # Adjust n_g up/down
            change = random.choice([-32, 32])
            mutant.n_g = max(1, self.n_g + change)

        elif mutation == 'unit_scale':
            # Modify scaling coefficient
            factor = random.choice([0.9, 1.1])
            mutant.unit_scale *= factor

        elif mutation == 'transform_flag':
            # Toggle a random transform flag
            if self.transform_flags:
                key = random.choice(list(self.transform_flags.keys()))
                mutant.transform_flags[key] = not self.transform_flags[key]
            else:
                # Add a random flag if none exist
                mutant.transform_flags['aug'] = True

        return mutant

    def to_vector(self):
        """Return generator parameters for clustering/species assignment."""
        return np.array([self.input_range[0], self.input_range[1], self.n_g, self.sigma_y, self.unit_scale])

    def __str__(self):
        return (f"Generator(mode={self.mode}, range={self.input_range}, "
                f"n_g={self.n_g}, sigma_y={self.sigma_y}, unit={self.unit_scale})")

==================== START OF FILE: llm_integration.py ====================

import openai  # or anthropic, or other LLM API

class LLMMutator:
    def __init__(self, api_key, model="gpt-4"):
        openai.api_key = api_key
        self.model = model

    def propose_mutation(self, equation_tree_str, context=None):
        """Send the equation (as string/tree) to the LLM, get mutation proposal."""
        prompt = self.build_prompt(equation_tree_str, context)
        response = self.query_llm(prompt)
        mutation = self.parse_mutation_response(response)
        return mutation
    
    def build_prompt(self, eq_str, context=None):
        # Make this descriptive for your task
        prompt = (
            "Here is an equation tree:\n" + eq_str +
            "\nSuggest a single symbolic mutation as a JSON dictionary (action, target_node, new_value):"
        )
        if context:
            prompt += f"\nContext: here is the information from the past evolution history: {context}"
        return prompt
    
    def query_llm(self, prompt):
        # Call out to the LLM (OpenAI example, modify for your backend)
        response = openai.ChatCompletion.create(
            model=self.model,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=256,
            temperature=0.8
        )
        return response["choices"][0]["message"]["content"]

    def parse_mutation_response(self, llm_output):
        # Convert the response from string/JSON to Python dict
        import json
        try:
            return json.loads(llm_output)
        except Exception as e:
            raise RuntimeError(f"Bad LLM output: {llm_output}") from e
        
    def apply_eq_mutation(self, equation, mutation):    
        """Apply the mutation to the equation tree, return new equation."""
        # This depends on your Equation class structure
        # new_eq = equation.copy()  # Assume a copy method
        action = mutation.get("action")
        target_node = mutation.get("target_node")
        new_value = mutation.get("new_value")
        
        new_eq = equation.mutate(action = action, target_node=target_node, new_value=new_value)
        print(f"\nApplied LLM mutation: {mutation} to equation {equation} -> {new_eq}\n")
        return new_eq

==================== START OF FILE: log.txt ====================

Gen 0: 7 equations and 6 generators passed MC.
  Queue sizes - Equations: 32, Generators: 31
Equations: ['Equation constants: {0: 1.0207380771372812}\nTree:  (cos(cos(x67)))**((cos(1.0207380771372812) / (x89 - x82)))', 'Equation constants: {0: 1.6309363387220572, 1: -0.03469214993248171, 2: -1.0786977449230646}\nTree:  cos(((x65 * 1.6309363387220572) - (-0.03469214993248171 + -1.0786977449230646)))', 'Equation constants: {0: -0.5594017001502736}\nTree:  (x90 / (x53 + -0.5594017001502736))', 'Equation constants: {0: 0.21355173366045577, 1: 0.5637963619694202}\nTree:  (0.21355173366045577 + (cos(0.5637963619694202))**((x11)**(x21)))', 'Equation constants: {0: -1.1212603952789957, 1: -1.8301355953842702, 2: -1.216387155770596}\nTree:  (((-1.1212603952789957 / -1.8301355953842702) + x12) - ((x75 * -1.216387155770596) / x97))', 'Equation constants: {0: 1.87588869659043}\nTree:  (x17 + (cos(1.87588869659043) / cos(x9)))', 'Equation constants: {0: 1.5376493971111733, 1: -1.6880817203149512, 2: -0.8190756060577975}\nTree:  (((1.5376493971111733 + x66))**(-1.6880817203149512))**(-0.8190756060577975)', 'Equation constants: {}\nTree:  (x85 / x30)', 'Equation constants: {0: 1.8710931141903218}\nTree:  (cos(cos(x12)) / (sin(1.8710931141903218) + sin(x94)))', 'Equation constants: {0: -0.7713502126811025, 1: -0.06621194063034563, 2: 0.8899358757259552}\nTree:  (-0.7713502126811025)**((sin(-0.06621194063034563) / 0.8899358757259552))', 'Equation constants: {0: -1.6498045886607557, 1: 1.8899452034164512}\nTree:  cos(((x30 - -1.6498045886607557) / cos(1.8899452034164512)))', 'Equation constants: {0: 1.8333543298509976, 1: 1.048347071339414}\nTree:  sin((1.8333543298509976 - 1.048347071339414))', 'Equation constants: {0: 1.6159690372467752}\nTree:  ((cos(x5) / (x65 / 1.6159690372467752)) / x75)', 'Equation constants: {0: -1.0298338321023746, 1: -1.7894843061967665}\nTree:  ((x46 / cos(x6)) * ((x59 + -1.0298338321023746) + (-1.7894843061967665)**(x97)))', 'Equation constants: {0: 1.6058759042910284}\nTree:  (sin((x29)**(x72)))**(1.6058759042910284)', 'Equation constants: {0: -1.2199882416922687, 1: 1.2790202056734499}\nTree:  (((x40)**(-1.2199882416922687))**(x29) - ((x30 - x36) - (x84 - 1.2790202056734499)))', 'Equation constants: {0: -1.7241488822967663, 1: 1.8069255941818065, 2: -1.883739405651776}\nTree:  ((-1.7241488822967663 - cos(1.8069255941818065)) + (cos(-1.883739405651776) + (x32 + x2)))', 'Equation constants: {0: 0.7662400049376896, 1: 0.863364136953614, 2: -0.3261112892718443, 3: 0.5232382151069648}\nTree:  (0.7662400049376896 / ((x35 + 0.863364136953614) + (-0.3261112892718443 / 0.5232382151069648)))', 'Equation constants: {}\nTree:  (sin(sin(x93)) / cos(sin(x44)))', 'Equation constants: {0: 1.7730665198346642}\nTree:  (1.7730665198346642 * sin((x41 * x9)))', 'Equation constants: {0: 1.729203867679407, 1: -1.6728881364615376}\nTree:  (((1.729203867679407 - x30) - (x51)**(x59)) / -1.6728881364615376)', 'Equation constants: {0: 0.9890859052840351, 1: -1.6113802437305695, 2: -0.7684283446282811, 3: -0.4661291871176658}\nTree:  (((0.9890859052840351 + x92) / x30) / (cos(-1.6113802437305695) * (-0.7684283446282811 - -0.4661291871176658)))', 'Equation constants: {0: -1.964749631005997, 1: 1.3681525081746875, 2: 1.5855994339493242}\nTree:  cos(((x93 / -1.964749631005997))**((1.3681525081746875 * 1.5855994339493242)))', 'Equation constants: {0: 1.3970383600185121, 1: 1.2582607919070634}\nTree:  (1.3970383600185121 - 1.2582607919070634)', 'Equation constants: {0: -1.5811851933348011}\nTree:  sin((cos(x19) * -1.5811851933348011))', 'Equation constants: {0: np.float64(-5.555193104125029), 1: np.float64(-6.078791877337638), 2: np.float64(0.1460974716983645)}\nTree:  sin((-5.555193104125029 - const((x8 * 0.1460974716983645))))', 'Equation constants: {0: np.float64(13.142408589740054), 1: np.float64(12.618809808778325)}\nTree:  sin((13.142408589740054 - 12.618809808778325))', 'Equation constants: {0: np.float64(1293295.3233173639), 1: np.float64(-4086.268785850409), 2: np.float64(93.0191046772796), 3: np.float64(3.599748790689091e-05)}\nTree:  (1293295.3233173639 / ((x35 + -4086.268785850409) + (93.0191046772796 / 3.599748790689091e-05)))', 'Equation constants: {0: np.float64(-0.5000000000551791), 1: np.float64(-1.259794449817429e-05), 2: np.float64(-0.6621409606266639)}\nTree:  (-0.5000000000551791 + pow(cos(-1.259794449817429e-05), (x11)**(x21), (x11 / -0.6621409606266639)))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - -2.898409929325675)', 'Equation constants: {0: np.float64(1293295.3233173639), 1: np.float64(-4086.268785850409), 2: np.float64(93.0191046772796), 3: np.float64(3.599748790689091e-05)}\nTree:  (1293295.3233173639 / ((x35 + -4086.268785850409) + (93.0191046772796 / 3.599748790689091e-05)))', 'Equation constants: {0: np.float64(124.99823652613352), 1: np.float64(-8.918902693719385), 2: np.float64(0.016875942412614486)}\nTree:  (((124.99823652613352 + x66))**(-8.918902693719385))**(0.016875942412614486)']
MSE: [np.float64(5.272492619535245e+19), np.float64(490070.155754536), np.float64(0.4993277069344904), np.float64(616.6979610243881), np.float64(0.25), np.float64(0.2500000000000044), np.float64(0.25456224010295725), np.float64(0.2500000000086586), np.float64(0.39590305351984373), np.float64(309076773.96192455), np.float64(0.25), np.float64(202096.22454847657), np.float64(1.2826532577837453), np.float64(0.9121600114199957), np.float64(202096.22454847657), np.float64(0.25456224010295725), np.float64(999999000000.5), np.float64(0.44075242090472827), np.float64(1.3430832142612192), np.float64(0.49925078991961763), np.float64(0.25000000001290545), np.float64(399258431.4224417), np.float64(6.441623613973224e+19), np.float64(0.44075242090472827), np.float64(792903481848.6683)]
Generators: ['Generator(mode=real, range=(-2, 2), n_g=718, sigma_y=0.03819146622251083, unit=1.4505468470449572)', 'Generator(mode=real, range=(-5, 5), n_g=395, sigma_y=0.006793147731448665, unit=1.7842587220223194)', 'Generator(mode=real, range=(-2, 2), n_g=673, sigma_y=0.034253618357403814, unit=1.5090845476704557)', 'Generator(mode=real, range=(-2, 2), n_g=419, sigma_y=0.024671710303850833, unit=1.8325013716326315)', 'Generator(mode=real, range=(0, 1), n_g=421, sigma_y=0.024399502759033537, unit=1.2636917853442933)', 'Generator(mode=real, range=(-5, 5), n_g=599, sigma_y=0.04373386061941746, unit=1.443033761169604)', 'Generator(mode=real, range=(0, 1), n_g=826, sigma_y=0.007523598528475319, unit=1.9462438820039816)', 'Generator(mode=real, range=(0, 1), n_g=870, sigma_y=0.012147574088856458, unit=1.5491178751217416)', 'Generator(mode=real, range=(-2, 2), n_g=614, sigma_y=0.012479669493995154, unit=0.6307382434342839)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.020096599007208192, unit=1.0121994893723651)', 'Generator(mode=real, range=(-2, 2), n_g=607, sigma_y=0.0057004661533567, unit=1.5056506004794816)', 'Generator(mode=real, range=(-1, 3), n_g=820, sigma_y=0.03260353460286479, unit=0.5133588129978507)', 'Generator(mode=real, range=(-1, 3), n_g=906, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(0, 1), n_g=425, sigma_y=0.025107343475347627, unit=1.92300003794556)', 'Generator(mode=real, range=(-2, 2), n_g=705, sigma_y=0.020803266874335005, unit=0.519378907545945)', 'Generator(mode=real, range=(-2, 2), n_g=694, sigma_y=0.033480077718161166, unit=1.9473295963185953)', 'Generator(mode=real, range=(-1, 3), n_g=428, sigma_y=0.03531435713979853, unit=0.6511133738017374)', 'Generator(mode=real, range=(0, 1), n_g=514, sigma_y=0.005380014453346976, unit=1.643668512742618)', 'Generator(mode=real, range=(-5, 5), n_g=358, sigma_y=0.04705556543917902, unit=1.4227281560648142)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02608178993127705, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(0, 1), n_g=325, sigma_y=0.04425099264172556, unit=1.2426031273188594)', 'Generator(mode=real, range=(-2, 2), n_g=1022, sigma_y=0.04866784704049404, unit=1.7505202212818363)', 'Generator(mode=real, range=(0, 1), n_g=919, sigma_y=0.016241303456519175, unit=1.414928654478163)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02086543194502164, unit=0.8409121047808698)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-2, 2), n_g=705, sigma_y=0.020803266874335005, unit=0.519378907545945)']
Gen 1: 7 equations and 10 generators passed MC.
  Queue sizes - Equations: 39, Generators: 40
Equations: ['Equation constants: {0: 1.0207380771372812}\nTree:  (cos(cos(x67)))**((cos(1.0207380771372812) / (x89 - x82)))', 'Equation constants: {0: 1.6309363387220572, 1: -0.03469214993248171, 2: -1.0786977449230646}\nTree:  cos(((x65 * 1.6309363387220572) - (-0.03469214993248171 + -1.0786977449230646)))', 'Equation constants: {0: -0.5594017001502736}\nTree:  (x90 / (x53 + -0.5594017001502736))', 'Equation constants: {0: 0.21355173366045577, 1: 0.5637963619694202}\nTree:  (0.21355173366045577 + (cos(0.5637963619694202))**((x11)**(x21)))', 'Equation constants: {0: -1.1212603952789957, 1: -1.8301355953842702, 2: -1.216387155770596}\nTree:  (((-1.1212603952789957 / -1.8301355953842702) + x12) - ((x75 * -1.216387155770596) / x97))', 'Equation constants: {0: 1.87588869659043}\nTree:  (x17 + (cos(1.87588869659043) / cos(x9)))', 'Equation constants: {0: 1.5376493971111733, 1: -1.6880817203149512, 2: -0.8190756060577975}\nTree:  (((1.5376493971111733 + x66))**(-1.6880817203149512))**(-0.8190756060577975)', 'Equation constants: {}\nTree:  (x85 / x30)', 'Equation constants: {0: 1.8710931141903218}\nTree:  (cos(cos(x12)) / (sin(1.8710931141903218) + sin(x94)))', 'Equation constants: {0: -0.7713502126811025, 1: -0.06621194063034563, 2: 0.8899358757259552}\nTree:  (-0.7713502126811025)**((sin(-0.06621194063034563) / 0.8899358757259552))', 'Equation constants: {0: -1.6498045886607557, 1: 1.8899452034164512}\nTree:  cos(((x30 - -1.6498045886607557) / cos(1.8899452034164512)))', 'Equation constants: {0: 1.8333543298509976, 1: 1.048347071339414}\nTree:  sin((1.8333543298509976 - 1.048347071339414))', 'Equation constants: {0: 1.6159690372467752}\nTree:  ((cos(x5) / (x65 / 1.6159690372467752)) / x75)', 'Equation constants: {0: -1.0298338321023746, 1: -1.7894843061967665}\nTree:  ((x46 / cos(x6)) * ((x59 + -1.0298338321023746) + (-1.7894843061967665)**(x97)))', 'Equation constants: {0: 1.6058759042910284}\nTree:  (sin((x29)**(x72)))**(1.6058759042910284)', 'Equation constants: {0: -1.2199882416922687, 1: 1.2790202056734499}\nTree:  (((x40)**(-1.2199882416922687))**(x29) - ((x30 - x36) - (x84 - 1.2790202056734499)))', 'Equation constants: {0: -1.7241488822967663, 1: 1.8069255941818065, 2: -1.883739405651776}\nTree:  ((-1.7241488822967663 - cos(1.8069255941818065)) + (cos(-1.883739405651776) + (x32 + x2)))', 'Equation constants: {0: 0.7662400049376896, 1: 0.863364136953614, 2: -0.3261112892718443, 3: 0.5232382151069648}\nTree:  (0.7662400049376896 / ((x35 + 0.863364136953614) + (-0.3261112892718443 / 0.5232382151069648)))', 'Equation constants: {}\nTree:  (sin(sin(x93)) / cos(sin(x44)))', 'Equation constants: {0: 1.7730665198346642}\nTree:  (1.7730665198346642 * sin((x41 * x9)))', 'Equation constants: {0: 1.729203867679407, 1: -1.6728881364615376}\nTree:  (((1.729203867679407 - x30) - (x51)**(x59)) / -1.6728881364615376)', 'Equation constants: {0: 0.9890859052840351, 1: -1.6113802437305695, 2: -0.7684283446282811, 3: -0.4661291871176658}\nTree:  (((0.9890859052840351 + x92) / x30) / (cos(-1.6113802437305695) * (-0.7684283446282811 - -0.4661291871176658)))', 'Equation constants: {0: -1.964749631005997, 1: 1.3681525081746875, 2: 1.5855994339493242}\nTree:  cos(((x93 / -1.964749631005997))**((1.3681525081746875 * 1.5855994339493242)))', 'Equation constants: {0: 1.3970383600185121, 1: 1.2582607919070634}\nTree:  (1.3970383600185121 - 1.2582607919070634)', 'Equation constants: {0: -1.5811851933348011}\nTree:  sin((cos(x19) * -1.5811851933348011))', 'Equation constants: {0: np.float64(-5.555193104125029), 1: np.float64(-6.078791877337638), 2: np.float64(0.1460974716983645)}\nTree:  sin((-5.555193104125029 - const((x8 * 0.1460974716983645))))', 'Equation constants: {0: np.float64(13.142408589740054), 1: np.float64(12.618809808778325)}\nTree:  sin((13.142408589740054 - 12.618809808778325))', 'Equation constants: {0: np.float64(1293295.3233173639), 1: np.float64(-4086.268785850409), 2: np.float64(93.0191046772796), 3: np.float64(3.599748790689091e-05)}\nTree:  (1293295.3233173639 / ((x35 + -4086.268785850409) + (93.0191046772796 / 3.599748790689091e-05)))', 'Equation constants: {0: np.float64(-0.5000000000551791), 1: np.float64(-1.259794449817429e-05), 2: np.float64(-0.6621409606266639)}\nTree:  (-0.5000000000551791 + pow(cos(-1.259794449817429e-05), (x11)**(x21), (x11 / -0.6621409606266639)))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - -2.898409929325675)', 'Equation constants: {0: np.float64(1293295.3233173639), 1: np.float64(-4086.268785850409), 2: np.float64(93.0191046772796), 3: np.float64(3.599748790689091e-05)}\nTree:  (1293295.3233173639 / ((x35 + -4086.268785850409) + (93.0191046772796 / 3.599748790689091e-05)))', 'Equation constants: {0: np.float64(124.99823652613352), 1: np.float64(-8.918902693719385), 2: np.float64(0.016875942412614486)}\nTree:  (((124.99823652613352 + x66))**(-8.918902693719385))**(0.016875942412614486)', 'Equation constants: {0: np.float64(-2.6158518306525194), 1: np.float64(-3.1158518306525256), 2: np.float64(0.6282911929232307)}\nTree:  (-2.6158518306525194 - const(sin(0.6282911929232307)))', 'Equation constants: {0: np.float64(-0.5000000058315839), 1: np.float64(-1.6558367374980005e-05)}\nTree:  (-0.5000000058315839 + (cos(-1.6558367374980005e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - -2.898409929325675)', 'Equation constants: {0: np.float64(-9.94908346760419), 1: np.float64(-10.449083467604202)}\nTree:  (-9.94908346760419 - -10.449083467604202)', 'Equation constants: {0: np.float64(-0.500000000222519), 1: np.float64(1.4837581941705135e-06), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074)}\nTree:  (-0.500000000222519 + pow(cos(1.4837581941705135e-06), (x11)**(x21), (x11 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(0.5018158866221238), 1: np.float64(-1.613403757822294), 2: np.float64(-0.6621409606266639)}\nTree:  (0.5018158866221238 + /(cos(-1.613403757822294), (x11)**(x21), (x11 / -0.6621409606266639)))', 'Equation constants: {0: np.float64(41.49810995863576), 1: np.float64(40.97451037372861)}\nTree:  sin((41.49810995863576 - 40.97451037372861))']
MSE: [np.float64(0.5002004289402985), np.float64(0.9365492550910988), np.float64(1.3430832142612192), np.float64(0.9365492778347968), np.float64(322102251.57415044), np.float64(0.25), np.float64(0.4782798460874431), np.float64(0.5002004269885739), np.float64(0.44075242090472827), np.float64(0.5002004269028848), np.float64(0.2500000000300979), np.float64(0.25), np.float64(0.48905074531987), np.float64(999999000000.5), np.float64(326349570.9061216), np.float64(0.25), np.float64(0.2500000000004191), np.float64(0.4992507897858031), np.float64(0.9365492550910988), np.float64(0.24995068226235154), np.float64(1362.5615634619255), np.float64(202096.22454847657), np.float64(792903481848.6683), np.float64(0.25000000000620576), np.float64(0.965451807385433)]
Generators: ['Generator(mode=real, range=(-5, 5), n_g=395, sigma_y=0.006793147731448665, unit=1.7842587220223194)', 'Generator(mode=real, range=(-2, 2), n_g=673, sigma_y=0.034253618357403814, unit=1.5090845476704557)', 'Generator(mode=real, range=(-2, 2), n_g=419, sigma_y=0.024671710303850833, unit=1.8325013716326315)', 'Generator(mode=real, range=(0, 1), n_g=421, sigma_y=0.024399502759033537, unit=1.2636917853442933)', 'Generator(mode=real, range=(-5, 5), n_g=599, sigma_y=0.04373386061941746, unit=1.443033761169604)', 'Generator(mode=real, range=(0, 1), n_g=826, sigma_y=0.007523598528475319, unit=1.9462438820039816)', 'Generator(mode=real, range=(0, 1), n_g=870, sigma_y=0.012147574088856458, unit=1.5491178751217416)', 'Generator(mode=real, range=(-2, 2), n_g=614, sigma_y=0.012479669493995154, unit=0.6307382434342839)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.020096599007208192, unit=1.0121994893723651)', 'Generator(mode=real, range=(-2, 2), n_g=607, sigma_y=0.0057004661533567, unit=1.5056506004794816)', 'Generator(mode=real, range=(-1, 3), n_g=820, sigma_y=0.03260353460286479, unit=0.5133588129978507)', 'Generator(mode=real, range=(-1, 3), n_g=906, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(0, 1), n_g=425, sigma_y=0.025107343475347627, unit=1.92300003794556)', 'Generator(mode=real, range=(-2, 2), n_g=705, sigma_y=0.020803266874335005, unit=0.519378907545945)', 'Generator(mode=real, range=(-2, 2), n_g=694, sigma_y=0.033480077718161166, unit=1.9473295963185953)', 'Generator(mode=real, range=(-1, 3), n_g=428, sigma_y=0.03531435713979853, unit=0.6511133738017374)', 'Generator(mode=real, range=(0, 1), n_g=514, sigma_y=0.005380014453346976, unit=1.643668512742618)', 'Generator(mode=real, range=(-5, 5), n_g=358, sigma_y=0.04705556543917902, unit=1.4227281560648142)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02608178993127705, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(0, 1), n_g=325, sigma_y=0.04425099264172556, unit=1.2426031273188594)', 'Generator(mode=real, range=(-2, 2), n_g=1022, sigma_y=0.04866784704049404, unit=1.7505202212818363)', 'Generator(mode=real, range=(0, 1), n_g=919, sigma_y=0.016241303456519175, unit=1.414928654478163)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02086543194502164, unit=0.8409121047808698)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-2, 2), n_g=705, sigma_y=0.020803266874335005, unit=0.519378907545945)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-4.961012385957098, 5.038987614042902), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02086543194502164, unit=0.9250033152589568)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.020096599007208192, unit=1.0121994893723651)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.020096599007208192, unit=1.0121994893723651)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02608178993127705, unit=0.8409121047808698)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02608178993127705, unit=0.8409121047808698)']
Gen 2: 8 equations and 19 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {}\nTree:  (x85 / x30)', 'Equation constants: {0: 1.8710931141903218}\nTree:  (cos(cos(x12)) / (sin(1.8710931141903218) + sin(x94)))', 'Equation constants: {0: -0.7713502126811025, 1: -0.06621194063034563, 2: 0.8899358757259552}\nTree:  (-0.7713502126811025)**((sin(-0.06621194063034563) / 0.8899358757259552))', 'Equation constants: {0: -1.6498045886607557, 1: 1.8899452034164512}\nTree:  cos(((x30 - -1.6498045886607557) / cos(1.8899452034164512)))', 'Equation constants: {0: 1.8333543298509976, 1: 1.048347071339414}\nTree:  sin((1.8333543298509976 - 1.048347071339414))', 'Equation constants: {0: 1.6159690372467752}\nTree:  ((cos(x5) / (x65 / 1.6159690372467752)) / x75)', 'Equation constants: {0: -1.0298338321023746, 1: -1.7894843061967665}\nTree:  ((x46 / cos(x6)) * ((x59 + -1.0298338321023746) + (-1.7894843061967665)**(x97)))', 'Equation constants: {0: 1.6058759042910284}\nTree:  (sin((x29)**(x72)))**(1.6058759042910284)', 'Equation constants: {0: -1.2199882416922687, 1: 1.2790202056734499}\nTree:  (((x40)**(-1.2199882416922687))**(x29) - ((x30 - x36) - (x84 - 1.2790202056734499)))', 'Equation constants: {0: -1.7241488822967663, 1: 1.8069255941818065, 2: -1.883739405651776}\nTree:  ((-1.7241488822967663 - cos(1.8069255941818065)) + (cos(-1.883739405651776) + (x32 + x2)))', 'Equation constants: {0: 0.7662400049376896, 1: 0.863364136953614, 2: -0.3261112892718443, 3: 0.5232382151069648}\nTree:  (0.7662400049376896 / ((x35 + 0.863364136953614) + (-0.3261112892718443 / 0.5232382151069648)))', 'Equation constants: {}\nTree:  (sin(sin(x93)) / cos(sin(x44)))', 'Equation constants: {0: 1.7730665198346642}\nTree:  (1.7730665198346642 * sin((x41 * x9)))', 'Equation constants: {0: 1.729203867679407, 1: -1.6728881364615376}\nTree:  (((1.729203867679407 - x30) - (x51)**(x59)) / -1.6728881364615376)', 'Equation constants: {0: 0.9890859052840351, 1: -1.6113802437305695, 2: -0.7684283446282811, 3: -0.4661291871176658}\nTree:  (((0.9890859052840351 + x92) / x30) / (cos(-1.6113802437305695) * (-0.7684283446282811 - -0.4661291871176658)))', 'Equation constants: {0: -1.964749631005997, 1: 1.3681525081746875, 2: 1.5855994339493242}\nTree:  cos(((x93 / -1.964749631005997))**((1.3681525081746875 * 1.5855994339493242)))', 'Equation constants: {0: 1.3970383600185121, 1: 1.2582607919070634}\nTree:  (1.3970383600185121 - 1.2582607919070634)', 'Equation constants: {0: -1.5811851933348011}\nTree:  sin((cos(x19) * -1.5811851933348011))', 'Equation constants: {0: np.float64(-5.555193104125029), 1: np.float64(-6.078791877337638), 2: np.float64(0.1460974716983645)}\nTree:  sin((-5.555193104125029 - const((x8 * 0.1460974716983645))))', 'Equation constants: {0: np.float64(13.142408589740054), 1: np.float64(12.618809808778325)}\nTree:  sin((13.142408589740054 - 12.618809808778325))', 'Equation constants: {0: np.float64(1293295.3233173639), 1: np.float64(-4086.268785850409), 2: np.float64(93.0191046772796), 3: np.float64(3.599748790689091e-05)}\nTree:  (1293295.3233173639 / ((x35 + -4086.268785850409) + (93.0191046772796 / 3.599748790689091e-05)))', 'Equation constants: {0: np.float64(-0.5000000000551791), 1: np.float64(-1.259794449817429e-05), 2: np.float64(-0.6621409606266639)}\nTree:  (-0.5000000000551791 + pow(cos(-1.259794449817429e-05), (x11)**(x21), (x11 / -0.6621409606266639)))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - -2.898409929325675)', 'Equation constants: {0: np.float64(1293295.3233173639), 1: np.float64(-4086.268785850409), 2: np.float64(93.0191046772796), 3: np.float64(3.599748790689091e-05)}\nTree:  (1293295.3233173639 / ((x35 + -4086.268785850409) + (93.0191046772796 / 3.599748790689091e-05)))', 'Equation constants: {0: np.float64(124.99823652613352), 1: np.float64(-8.918902693719385), 2: np.float64(0.016875942412614486)}\nTree:  (((124.99823652613352 + x66))**(-8.918902693719385))**(0.016875942412614486)', 'Equation constants: {0: np.float64(-2.6158518306525194), 1: np.float64(-3.1158518306525256), 2: np.float64(0.6282911929232307)}\nTree:  (-2.6158518306525194 - const(sin(0.6282911929232307)))', 'Equation constants: {0: np.float64(-0.5000000058315839), 1: np.float64(-1.6558367374980005e-05)}\nTree:  (-0.5000000058315839 + (cos(-1.6558367374980005e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - -2.898409929325675)', 'Equation constants: {0: np.float64(-9.94908346760419), 1: np.float64(-10.449083467604202)}\nTree:  (-9.94908346760419 - -10.449083467604202)', 'Equation constants: {0: np.float64(-0.500000000222519), 1: np.float64(1.4837581941705135e-06), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074)}\nTree:  (-0.500000000222519 + pow(cos(1.4837581941705135e-06), (x11)**(x21), (x11 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(0.5018158866221238), 1: np.float64(-1.613403757822294), 2: np.float64(-0.6621409606266639)}\nTree:  (0.5018158866221238 + /(cos(-1.613403757822294), (x11)**(x21), (x11 / -0.6621409606266639)))', 'Equation constants: {0: np.float64(41.49810995863576), 1: np.float64(40.97451037372861)}\nTree:  sin((41.49810995863576 - 40.97451037372861))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - const((x69 * x39)))', 'Equation constants: {0: np.float64(-9.94908346760419), 1: np.float64(-10.449083467604202), 2: np.float64(-1.247874039997769)}\nTree:  (-9.94908346760419 - const((x19 / -1.247874039997769)))', 'Equation constants: {0: np.float64(-0.5000000027639754), 1: np.float64(1.3215888368835595e-08), 2: np.float64(-1.5119083408720289)}\nTree:  +(-0.5000000027639754, (cos(1.3215888368835595e-08))**((x11)**(x21)), (-1.5119083408720289)**(-1.5119083408720289))', 'Equation constants: {0: np.float64(0.5018150791588808), 1: np.float64(-1.6133853141236951), 2: np.float64(-0.6621409606266639)}\nTree:  (0.5018150791588808 + /(cos(-1.6133853141236951), (x11)**(x21), (x11 / -0.6621409606266639)))', 'Equation constants: {0: np.float64(-0.500000000265672), 1: np.float64(-1.2995774017677082e-06)}\nTree:  (-0.500000000265672 + (cos(-1.2995774017677082e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000150801006), 1: np.float64(-3.645740956012944e-05), 2: np.float64(0.39492720437566)}\nTree:  (-0.5000000150801006 + (cos(const((0.39492720437566)**(0.39492720437566))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000058315839), 1: np.float64(-1.6558367374980005e-05)}\nTree:  (-0.5000000058315839 + (cos(-1.6558367374980005e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(1746846.9348423246), 1: np.float64(-1448.5744860315601), 2: np.float64(-167.64464212125034), 3: np.float64(-4.805854109080656e-05)}\nTree:  (1746846.9348423246 / ((x67 + -1448.5744860315601) + (-167.64464212125034 / -4.805854109080656e-05)))']
MSE: [np.float64(201257.6137243629), np.float64(402473593.7348999), np.float64(326349570.9061216), np.float64(0.5002004271064411), np.float64(0.25), np.float64(0.25), np.float64(0.9675723824551773), np.float64(18431.782152410928), np.float64(0.3181961741254582), np.float64(0.25000000000802175), np.float64(0.24995068200958565), np.float64(0.4993277069344904), np.float64(5.272514941231039e+19), np.float64(315620378.5939016), np.float64(18431.782152410928), np.float64(1528031275.8095832), np.float64(0.2500000000005438), np.float64(0.40163909900407047), np.float64(0.9365492550910988), np.float64(0.2500000000773786), np.float64(0.2500000000300979), np.float64(0.4992507897858031), np.float64(0.2530825877251553), np.float64(792903481848.6683), np.float64(0.9121930720608754)]
Generators: ['Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(0, 1), n_g=325, sigma_y=0.04425099264172556, unit=1.2426031273188594)', 'Generator(mode=real, range=(-2, 2), n_g=1022, sigma_y=0.04866784704049404, unit=1.7505202212818363)', 'Generator(mode=real, range=(0, 1), n_g=919, sigma_y=0.016241303456519175, unit=1.414928654478163)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02086543194502164, unit=0.8409121047808698)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-2, 2), n_g=705, sigma_y=0.020803266874335005, unit=0.519378907545945)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-4.961012385957098, 5.038987614042902), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02086543194502164, unit=0.9250033152589568)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.020096599007208192, unit=1.0121994893723651)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.020096599007208192, unit=1.0121994893723651)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02608178993127705, unit=0.8409121047808698)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02608178993127705, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.020096599007208192, unit=1.0121994893723651)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=660, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-5.961012385957098, 6.038987614042902), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02608178993127705, unit=0.8409121047808698)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02086543194502164, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=428, sigma_y=0.03531435713979853, unit=0.6511133738017374)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02608178993127705, unit=0.8409121047808698)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02608178993127705, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1, 3), n_g=906, sigma_y=0.01481492360228262, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.03129814791753246, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1, 3), n_g=428, sigma_y=0.03531435713979853, unit=0.6511133738017374)', 'Generator(mode=real, range=(-5, 5), n_g=504, sigma_y=0.02086543194502164, unit=0.9250033152589568)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=906, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-5, 5), n_g=692, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1, 3), n_g=938, sigma_y=0.018518654502853275, unit=1.0284077004989516)']
Gen 3: 14 equations and 24 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: 0.9890859052840351, 1: -1.6113802437305695, 2: -0.7684283446282811, 3: -0.4661291871176658}\nTree:  (((0.9890859052840351 + x92) / x30) / (cos(-1.6113802437305695) * (-0.7684283446282811 - -0.4661291871176658)))', 'Equation constants: {0: -1.964749631005997, 1: 1.3681525081746875, 2: 1.5855994339493242}\nTree:  cos(((x93 / -1.964749631005997))**((1.3681525081746875 * 1.5855994339493242)))', 'Equation constants: {0: 1.3970383600185121, 1: 1.2582607919070634}\nTree:  (1.3970383600185121 - 1.2582607919070634)', 'Equation constants: {0: -1.5811851933348011}\nTree:  sin((cos(x19) * -1.5811851933348011))', 'Equation constants: {0: np.float64(-5.555193104125029), 1: np.float64(-6.078791877337638), 2: np.float64(0.1460974716983645)}\nTree:  sin((-5.555193104125029 - const((x8 * 0.1460974716983645))))', 'Equation constants: {0: np.float64(13.142408589740054), 1: np.float64(12.618809808778325)}\nTree:  sin((13.142408589740054 - 12.618809808778325))', 'Equation constants: {0: np.float64(1293295.3233173639), 1: np.float64(-4086.268785850409), 2: np.float64(93.0191046772796), 3: np.float64(3.599748790689091e-05)}\nTree:  (1293295.3233173639 / ((x35 + -4086.268785850409) + (93.0191046772796 / 3.599748790689091e-05)))', 'Equation constants: {0: np.float64(-0.5000000000551791), 1: np.float64(-1.259794449817429e-05), 2: np.float64(-0.6621409606266639)}\nTree:  (-0.5000000000551791 + pow(cos(-1.259794449817429e-05), (x11)**(x21), (x11 / -0.6621409606266639)))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - -2.898409929325675)', 'Equation constants: {0: np.float64(1293295.3233173639), 1: np.float64(-4086.268785850409), 2: np.float64(93.0191046772796), 3: np.float64(3.599748790689091e-05)}\nTree:  (1293295.3233173639 / ((x35 + -4086.268785850409) + (93.0191046772796 / 3.599748790689091e-05)))', 'Equation constants: {0: np.float64(124.99823652613352), 1: np.float64(-8.918902693719385), 2: np.float64(0.016875942412614486)}\nTree:  (((124.99823652613352 + x66))**(-8.918902693719385))**(0.016875942412614486)', 'Equation constants: {0: np.float64(-2.6158518306525194), 1: np.float64(-3.1158518306525256), 2: np.float64(0.6282911929232307)}\nTree:  (-2.6158518306525194 - const(sin(0.6282911929232307)))', 'Equation constants: {0: np.float64(-0.5000000058315839), 1: np.float64(-1.6558367374980005e-05)}\nTree:  (-0.5000000058315839 + (cos(-1.6558367374980005e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - -2.898409929325675)', 'Equation constants: {0: np.float64(-9.94908346760419), 1: np.float64(-10.449083467604202)}\nTree:  (-9.94908346760419 - -10.449083467604202)', 'Equation constants: {0: np.float64(-0.500000000222519), 1: np.float64(1.4837581941705135e-06), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074)}\nTree:  (-0.500000000222519 + pow(cos(1.4837581941705135e-06), (x11)**(x21), (x11 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(0.5018158866221238), 1: np.float64(-1.613403757822294), 2: np.float64(-0.6621409606266639)}\nTree:  (0.5018158866221238 + /(cos(-1.613403757822294), (x11)**(x21), (x11 / -0.6621409606266639)))', 'Equation constants: {0: np.float64(41.49810995863576), 1: np.float64(40.97451037372861)}\nTree:  sin((41.49810995863576 - 40.97451037372861))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - const((x69 * x39)))', 'Equation constants: {0: np.float64(-9.94908346760419), 1: np.float64(-10.449083467604202), 2: np.float64(-1.247874039997769)}\nTree:  (-9.94908346760419 - const((x19 / -1.247874039997769)))', 'Equation constants: {0: np.float64(-0.5000000027639754), 1: np.float64(1.3215888368835595e-08), 2: np.float64(-1.5119083408720289)}\nTree:  +(-0.5000000027639754, (cos(1.3215888368835595e-08))**((x11)**(x21)), (-1.5119083408720289)**(-1.5119083408720289))', 'Equation constants: {0: np.float64(0.5018150791588808), 1: np.float64(-1.6133853141236951), 2: np.float64(-0.6621409606266639)}\nTree:  (0.5018150791588808 + /(cos(-1.6133853141236951), (x11)**(x21), (x11 / -0.6621409606266639)))', 'Equation constants: {0: np.float64(-0.500000000265672), 1: np.float64(-1.2995774017677082e-06)}\nTree:  (-0.500000000265672 + (cos(-1.2995774017677082e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000150801006), 1: np.float64(-3.645740956012944e-05), 2: np.float64(0.39492720437566)}\nTree:  (-0.5000000150801006 + (cos(const((0.39492720437566)**(0.39492720437566))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000058315839), 1: np.float64(-1.6558367374980005e-05)}\nTree:  (-0.5000000058315839 + (cos(-1.6558367374980005e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(1746846.9348423246), 1: np.float64(-1448.5744860315601), 2: np.float64(-167.64464212125034), 3: np.float64(-4.805854109080656e-05)}\nTree:  (1746846.9348423246 / ((x67 + -1448.5744860315601) + (-167.64464212125034 / -4.805854109080656e-05)))', 'Equation constants: {0: np.float64(-0.5000000000000868), 1: np.float64(1.8365476237532085e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(1.8365476237532085e-08), (x11)**(x21), (x11 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-20.173576453565207), 1: np.float64(-20.673576453565232)}\nTree:  (-20.173576453565207 - -20.673576453565232)', 'Equation constants: {0: np.float64(0.5018152830598184), 1: np.float64(-1.6133899716312596), 2: np.float64(-0.6454213022886909)}\nTree:  (0.5018152830598184 + /(cos(-1.6133899716312596), (x11)**(x21), (x11 / -0.6454213022886909)))', 'Equation constants: {0: np.float64(40.41716599406957), 1: np.float64(39.89356720479135), 2: np.float64(-1.8676765222321952)}\nTree:  sin(-(40.41716599406957, 39.89356720479135, (-1.8676765222321952)**(-1.8676765222321952)))', 'Equation constants: {0: np.float64(501087.3323197192), 1: np.float64(-74.72122252959332), 2: np.float64(11.105133948116828), 3: np.float64(1.1148528034269777e-05)}\nTree:  (501087.3323197192 / ((x35 + -74.72122252959332) + (11.105133948116828 / 1.1148528034269777e-05)))', 'Equation constants: {0: np.float64(-0.5000000001243895), 1: np.float64(9.472946425465904e-10), 2: np.float64(0.39492720437566)}\nTree:  (-0.5000000001243895 + (cos(const((x31)**(0.39492720437566))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-4.9046824478779225), 1: np.float64(-5.404682447874347)}\nTree:  (-4.9046824478779225 - -5.404682447874347)', 'Equation constants: {0: np.float64(0.5067809652820578), 1: np.float64(-1.6049581962232675), 2: np.float64(2.266266523429616)}\nTree:  (0.5067809652820578 + (cos(-1.6049581962232675) / (x11 / 2.266266523429616)))', 'Equation constants: {0: np.float64(-0.5000000061995936), 1: np.float64(2.982756436448319e-06)}\nTree:  (-0.5000000061995936 + (cos(2.982756436448319e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000014295), 1: np.float64(9.994191894772791e-09), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.9158992910092483)}\nTree:  (-0.5000000000014295 + pow((9.994191894772791e-09 cos cos(-0.9158992910092483)), (x11)**(x21), (x11 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - -2.898409929325675)', 'Equation constants: {0: np.float64(0.506780965168332), 1: np.float64(-1.6760680603816536), 2: np.float64(0.7369152495285751)}\nTree:  (0.506780965168332 + (cos(-1.6760680603816536) / (x11 / 0.7369152495285751)))', 'Equation constants: {0: np.float64(-0.500000000001295), 1: np.float64(1.3093405804626634e-07)}\nTree:  (-0.500000000001295 + (cos(1.3093405804626634e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.500000000000098), 1: np.float64(1.0328721852633342e-07), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-1.7932195670151536)}\nTree:  (-0.500000000000098 + pow(cos(const((x61)**(-1.7932195670151536))), (x11)**(x21), (x11 / const((1.6487086928786074 / x31)))))']
MSE: [np.float64(381171918.4440845), np.float64(0.44075242090472827), np.float64(0.2500000000000014), np.float64(0.4992507897858031), np.float64(0.25), np.float64(5.272492619535245e+19), np.float64(0.49984703474875425), np.float64(0.24995068199816972), np.float64(0.44075242090472827), np.float64(0.25000000000003914), np.float64(0.4998470347487542), np.float64(0.26269360063589964), np.float64(0.25000000000008027), np.float64(0.9365492550910988), np.float64(0.25), np.float64(0.24977158162357022), np.float64(107.23229922447653), np.float64(0.2500000000008203), np.float64(0.25000000000000316), np.float64(0.25), np.float64(1.3430832142612192), np.float64(0.49966937384131627), np.float64(0.24977158151901524), np.float64(0.250000000000005), np.float64(0.25000000000000167)]
Generators: ['Generator(mode=real, range=(-5.961012385957098, 6.038987614042902), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02608178993127705, unit=0.8409121047808698)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02086543194502164, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=428, sigma_y=0.03531435713979853, unit=0.6511133738017374)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02608178993127705, unit=0.8409121047808698)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02608178993127705, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1, 3), n_g=906, sigma_y=0.01481492360228262, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.03129814791753246, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1, 3), n_g=428, sigma_y=0.03531435713979853, unit=0.6511133738017374)', 'Generator(mode=real, range=(-5, 5), n_g=504, sigma_y=0.02086543194502164, unit=0.9250033152589568)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=906, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-5, 5), n_g=692, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1, 3), n_g=938, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02086543194502164, unit=0.9250033152589568)', 'Generator(mode=real, range=(-5.961012385957098, 6.038987614042902), n_g=660, sigma_y=0.04413675419223752, unit=0.6031319255297213)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=472, sigma_y=0.02608178993127705, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.00828024117711458, unit=0.5961721930587102)', 'Generator(mode=real, range=(-2.4, 2.4), n_g=705, sigma_y=0.020803266874335005, unit=0.519378907545945)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.5902104711281231)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=396, sigma_y=0.03531435713979853, unit=0.6511133738017374)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=906, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.02086543194502164, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-4.445192998929288, 5.554807001070712), n_g=692, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02086543194502164, unit=0.8409121047808698)', 'Generator(mode=real, range=(-2, 2), n_g=673, sigma_y=0.020803266874335005, unit=0.519378907545945)', 'Generator(mode=real, range=(-2, 2), n_g=705, sigma_y=0.016642613499468006, unit=0.519378907545945)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.016077279205766553, unit=1.0121994893723651)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.02608178993127705, unit=0.8409121047808698)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.02608178993127705, unit=0.8409121047808698)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.03129814791753246, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)']
Gen 4: 19 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-9.94908346760419), 1: np.float64(-10.449083467604202), 2: np.float64(-1.247874039997769)}\nTree:  (-9.94908346760419 - const((x19 / -1.247874039997769)))', 'Equation constants: {0: np.float64(-0.5000000027639754), 1: np.float64(1.3215888368835595e-08), 2: np.float64(-1.5119083408720289)}\nTree:  +(-0.5000000027639754, (cos(1.3215888368835595e-08))**((x11)**(x21)), (-1.5119083408720289)**(-1.5119083408720289))', 'Equation constants: {0: np.float64(0.5018150791588808), 1: np.float64(-1.6133853141236951), 2: np.float64(-0.6621409606266639)}\nTree:  (0.5018150791588808 + /(cos(-1.6133853141236951), (x11)**(x21), (x11 / -0.6621409606266639)))', 'Equation constants: {0: np.float64(-0.500000000265672), 1: np.float64(-1.2995774017677082e-06)}\nTree:  (-0.500000000265672 + (cos(-1.2995774017677082e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000150801006), 1: np.float64(-3.645740956012944e-05), 2: np.float64(0.39492720437566)}\nTree:  (-0.5000000150801006 + (cos(const((0.39492720437566)**(0.39492720437566))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000058315839), 1: np.float64(-1.6558367374980005e-05)}\nTree:  (-0.5000000058315839 + (cos(-1.6558367374980005e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(1746846.9348423246), 1: np.float64(-1448.5744860315601), 2: np.float64(-167.64464212125034), 3: np.float64(-4.805854109080656e-05)}\nTree:  (1746846.9348423246 / ((x67 + -1448.5744860315601) + (-167.64464212125034 / -4.805854109080656e-05)))', 'Equation constants: {0: np.float64(-0.5000000000000868), 1: np.float64(1.8365476237532085e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(1.8365476237532085e-08), (x11)**(x21), (x11 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-20.173576453565207), 1: np.float64(-20.673576453565232)}\nTree:  (-20.173576453565207 - -20.673576453565232)', 'Equation constants: {0: np.float64(0.5018152830598184), 1: np.float64(-1.6133899716312596), 2: np.float64(-0.6454213022886909)}\nTree:  (0.5018152830598184 + /(cos(-1.6133899716312596), (x11)**(x21), (x11 / -0.6454213022886909)))', 'Equation constants: {0: np.float64(40.41716599406957), 1: np.float64(39.89356720479135), 2: np.float64(-1.8676765222321952)}\nTree:  sin(-(40.41716599406957, 39.89356720479135, (-1.8676765222321952)**(-1.8676765222321952)))', 'Equation constants: {0: np.float64(501087.3323197192), 1: np.float64(-74.72122252959332), 2: np.float64(11.105133948116828), 3: np.float64(1.1148528034269777e-05)}\nTree:  (501087.3323197192 / ((x35 + -74.72122252959332) + (11.105133948116828 / 1.1148528034269777e-05)))', 'Equation constants: {0: np.float64(-0.5000000001243895), 1: np.float64(9.472946425465904e-10), 2: np.float64(0.39492720437566)}\nTree:  (-0.5000000001243895 + (cos(const((x31)**(0.39492720437566))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-4.9046824478779225), 1: np.float64(-5.404682447874347)}\nTree:  (-4.9046824478779225 - -5.404682447874347)', 'Equation constants: {0: np.float64(0.5067809652820578), 1: np.float64(-1.6049581962232675), 2: np.float64(2.266266523429616)}\nTree:  (0.5067809652820578 + (cos(-1.6049581962232675) / (x11 / 2.266266523429616)))', 'Equation constants: {0: np.float64(-0.5000000061995936), 1: np.float64(2.982756436448319e-06)}\nTree:  (-0.5000000061995936 + (cos(2.982756436448319e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000014295), 1: np.float64(9.994191894772791e-09), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.9158992910092483)}\nTree:  (-0.5000000000014295 + pow((9.994191894772791e-09 cos cos(-0.9158992910092483)), (x11)**(x21), (x11 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - -2.898409929325675)', 'Equation constants: {0: np.float64(0.506780965168332), 1: np.float64(-1.6760680603816536), 2: np.float64(0.7369152495285751)}\nTree:  (0.506780965168332 + (cos(-1.6760680603816536) / (x11 / 0.7369152495285751)))', 'Equation constants: {0: np.float64(-0.500000000001295), 1: np.float64(1.3093405804626634e-07)}\nTree:  (-0.500000000001295 + (cos(1.3093405804626634e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.500000000000098), 1: np.float64(1.0328721852633342e-07), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-1.7932195670151536)}\nTree:  (-0.500000000000098 + pow(cos(const((x61)**(-1.7932195670151536))), (x11)**(x21), (x11 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - const((x69 * x39(cos(x99)))))', 'Equation constants: {0: np.float64(-0.5000000000136069), 1: np.float64(1.3085849229391058e-08), 2: np.float64(-0.6621409606266639)}\nTree:  (-0.5000000000136069 + pow(cos(1.3085849229391058e-08), (x11)**(x21), (x11 / -0.6621409606266639)))', 'Equation constants: {0: np.float64(-0.500000000001295), 1: np.float64(1.3093405804626634e-07)}\nTree:  (-0.500000000001295 + (cos(1.3093405804626634e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.500000000001295), 1: np.float64(1.3093405804626634e-07)}\nTree:  (-0.500000000001295 + (cos(1.3093405804626634e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-9.94908346760419), 1: np.float64(-10.449083467604202), 2: np.float64(-1.247874039997769)}\nTree:  (const(sin(x57)) - const((x19 / -1.247874039997769)))', 'Equation constants: {0: np.float64(-0.5000000000000614), 1: np.float64(5.358527607031912e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074)}\nTree:  (-0.5000000000000614 + pow(cos(5.358527607031912e-08), (x11)**(x21), (x11 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-0.50000000000086), 1: np.float64(-3.550940674267029e-07)}\nTree:  (-0.50000000000086 + (cos(-3.550940674267029e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(9052278.276636807), 1: np.float64(8262.329297659457), 2: np.float64(-1300.6337701404545), 3: np.float64(-7.19000849201461e-05)}\nTree:  (9052278.276636807 / ((x67 + 8262.329297659457) + (-1300.6337701404545 / -7.19000849201461e-05)))', 'Equation constants: {0: np.float64(-0.5000000000355492), 1: np.float64(5.019228718966067e-08), 2: np.float64(-0.6621409606266639)}\nTree:  (-0.5000000000355492 + pow(cos(5.019228718966067e-08), (x35)**(x21), (x11 / -0.6621409606266639)))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - const((x74 * x39)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(-1.9620094260955319)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(-2.2241227138258743e-08), (x11)**(x21(cos(-1.9620094260955319))), (x11 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-0.5000000000000614), 1: np.float64(5.358527607031912e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074)}\nTree:  (-0.5000000000000614 + pow(cos(5.358527607031912e-08), (x11)**(x21), (x11 / const((1.6487086928786074 / x53)))))', 'Equation constants: {0: np.float64(-20.06743435122445), 1: np.float64(-20.56743435122874)}\nTree:  (-20.06743435122445 - -20.56743435122874)', 'Equation constants: {0: np.float64(-20.173576453565207), 1: np.float64(-20.673576453565232)}\nTree:  (-20.173576453565207 - -20.673576453565232)', 'Equation constants: {0: np.float64(-0.5000000001379138), 1: np.float64(-1.1439001106639111e-06), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.5000000001379138 + (cos(-1.1439001106639111e-06))**((x11)**(x21(sin(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(-0.500000000265672), 1: np.float64(-1.2995774017677082e-06)}\nTree:  (-0.500000000265672 + (cos(-1.2995774017677082e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.4678541091250491), 1: np.float64(0.1391455149745987), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.9158992910092483)}\nTree:  (0.4678541091250491)**(pow((0.1391455149745987 cos cos(-0.9158992910092483)), (x11)**(x21), (x11 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(124.99823652613352), 1: np.float64(-9.530836679009226), 2: np.float64(0.015792412245961368)}\nTree:  (((124.99823652613352 + x66))**(-9.530836679009226))**(0.015792412245961368)', 'Equation constants: {0: np.float64(-0.500000000001295), 1: np.float64(1.3093405804626634e-07)}\nTree:  (const(sin(x58)) + (cos(1.3093405804626634e-07))**((x11)**(x21)))']
MSE: [np.float64(0.25), np.float64(0.25000000000000006), np.float64(0.250000000000005), np.float64(0.250000000000005), np.float64(0.25), np.float64(0.25000000000000105), np.float64(0.25000000000001565), np.float64(0.4264257276639793), np.float64(0.2500873528838935), np.float64(0.25000000000000006), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000000105), np.float64(320524852.09656703), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000002165), np.float64(0.44075242090472827), np.float64(0.4980425254291944), np.float64(0.2500000000005438), np.float64(0.2499538835332268), np.float64(0.9623372953549792), np.float64(0.25000000001311734), np.float64(0.250000000000005), np.float64(399207914.2128078)]
Generators: ['Generator(mode=real, range=(-0.92, 2.92), n_g=906, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.02086543194502164, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-4.445192998929288, 5.554807001070712), n_g=692, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.02086543194502164, unit=0.8409121047808698)', 'Generator(mode=real, range=(-2, 2), n_g=673, sigma_y=0.020803266874335005, unit=0.519378907545945)', 'Generator(mode=real, range=(-2, 2), n_g=705, sigma_y=0.016642613499468006, unit=0.519378907545945)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.016077279205766553, unit=1.0121994893723651)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.02608178993127705, unit=0.8409121047808698)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.02608178993127705, unit=0.8409121047808698)', 'Generator(mode=real, range=(-5, 5), n_g=472, sigma_y=0.03129814791753246, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.016077279205766553, unit=1.0121994893723651)', 'Generator(mode=real, range=(-2, 2), n_g=705, sigma_y=0.019971136199361608, unit=0.519378907545945)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.012861823364613244, unit=1.0121994893723651)', 'Generator(mode=real, range=(-5.961012385957098, 6.038987614042902), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1, 3), n_g=428, sigma_y=0.03531435713979853, unit=0.6511133738017374)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-5.961012385957098, 6.038987614042902), n_g=692, sigma_y=0.04413675419223752, unit=0.6031319255297213)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.02608178993127705, unit=0.9250033152589568)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=472, sigma_y=0.02086543194502164, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=874, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=472, sigma_y=0.02086543194502164, unit=0.8409121047808698)', 'Generator(mode=real, range=(-5, 5), n_g=692, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.03129814791753246, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.00828024117711458, unit=0.5961721930587102)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.02608178993127705, unit=0.9250033152589568)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.02608178993127705, unit=0.9250033152589568)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.02086543194502164, unit=0.8409121047808698)', 'Generator(mode=real, range=(-2, 2), n_g=705, sigma_y=0.016642613499468006, unit=0.519378907545945)']
Gen 5: 23 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.500000000001295), 1: np.float64(1.3093405804626634e-07)}\nTree:  (-0.500000000001295 + (cos(1.3093405804626634e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.500000000001295), 1: np.float64(1.3093405804626634e-07)}\nTree:  (-0.500000000001295 + (cos(1.3093405804626634e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-9.94908346760419), 1: np.float64(-10.449083467604202), 2: np.float64(-1.247874039997769)}\nTree:  (const(sin(x57)) - const((x19 / -1.247874039997769)))', 'Equation constants: {0: np.float64(-0.5000000000000614), 1: np.float64(5.358527607031912e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074)}\nTree:  (-0.5000000000000614 + pow(cos(5.358527607031912e-08), (x11)**(x21), (x11 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-0.50000000000086), 1: np.float64(-3.550940674267029e-07)}\nTree:  (-0.50000000000086 + (cos(-3.550940674267029e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(9052278.276636807), 1: np.float64(8262.329297659457), 2: np.float64(-1300.6337701404545), 3: np.float64(-7.19000849201461e-05)}\nTree:  (9052278.276636807 / ((x67 + 8262.329297659457) + (-1300.6337701404545 / -7.19000849201461e-05)))', 'Equation constants: {0: np.float64(-0.5000000000355492), 1: np.float64(5.019228718966067e-08), 2: np.float64(-0.6621409606266639)}\nTree:  (-0.5000000000355492 + pow(cos(5.019228718966067e-08), (x35)**(x21), (x11 / -0.6621409606266639)))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - const((x74 * x39)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(-1.9620094260955319)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(-2.2241227138258743e-08), (x11)**(x21(cos(-1.9620094260955319))), (x11 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-0.5000000000000614), 1: np.float64(5.358527607031912e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074)}\nTree:  (-0.5000000000000614 + pow(cos(5.358527607031912e-08), (x11)**(x21), (x11 / const((1.6487086928786074 / x53)))))', 'Equation constants: {0: np.float64(-20.06743435122445), 1: np.float64(-20.56743435122874)}\nTree:  (-20.06743435122445 - -20.56743435122874)', 'Equation constants: {0: np.float64(-20.173576453565207), 1: np.float64(-20.673576453565232)}\nTree:  (-20.173576453565207 - -20.673576453565232)', 'Equation constants: {0: np.float64(-0.5000000001379138), 1: np.float64(-1.1439001106639111e-06), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.5000000001379138 + (cos(-1.1439001106639111e-06))**((x11)**(x21(sin(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(-0.500000000265672), 1: np.float64(-1.2995774017677082e-06)}\nTree:  (-0.500000000265672 + (cos(-1.2995774017677082e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.4678541091250491), 1: np.float64(0.1391455149745987), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.9158992910092483)}\nTree:  (0.4678541091250491)**(pow((0.1391455149745987 cos cos(-0.9158992910092483)), (x11)**(x21), (x11 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(124.99823652613352), 1: np.float64(-9.530836679009226), 2: np.float64(0.015792412245961368)}\nTree:  (((124.99823652613352 + x66))**(-9.530836679009226))**(0.015792412245961368)', 'Equation constants: {0: np.float64(-0.500000000001295), 1: np.float64(1.3093405804626634e-07)}\nTree:  (const(sin(x58)) + (cos(1.3093405804626634e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - const((x69 * x39(sin(x99)))))', 'Equation constants: {0: np.float64(40.46622088824247), 1: np.float64(39.942622109265756), 2: np.float64(-1.8676765222321952)}\nTree:  sin(-(40.46622088824247, 39.942622109265756, pow(-1.8676765222321952, -1.8676765222321952, (x82 - x25))))', 'Equation constants: {0: np.float64(-0.5000000031575289), 1: np.float64(2.308941505620159e-05)}\nTree:  (-0.5000000031575289 + (cos(2.308941505620159e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.4678542293620303), 1: np.float64(0.13914526001852676), 4: np.float64(1.0)}\nTree:  (0.4678542293620303)**(((0.13914526001852676 cos cos(1.0)))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(-2.2241227138258743e-08), (x11)**(x21), (x11 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-20.06743435122445), 1: np.float64(-20.56743435122874), 2: np.float64(-0.22778828367312354)}\nTree:  (-20.06743435122445 - const((x12)**(-0.22778828367312354)))', 'Equation constants: {0: np.float64(-0.5000000027639754), 1: np.float64(1.3215888368835595e-08), 2: np.float64(-1.5119083408720289)}\nTree:  +(-0.5000000027639754, (cos(1.3215888368835595e-08))**((x11)**(x69)), (-1.5119083408720289)**(-1.5119083408720289))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - -2.898409929325675)', 'Equation constants: {0: np.float64(-20.173576453565207), 1: np.float64(-20.673576453565232), 2: np.float64(1.674328169587282)}\nTree:  (const((x41 / 1.674328169587282)) - -20.673576453565232)', 'Equation constants: {0: np.float64(9052762.847665584), 1: np.float64(8266.167253062975), 2: np.float64(-137.5902275354172), 3: np.float64(-7.605776788095233e-06)}\nTree:  (9052762.847665584 / ((x67 + 8266.167253062975) + (-137.5902275354172 / -7.605776788095233e-06)))', 'Equation constants: {0: np.float64(-0.500000000000003), 1: np.float64(-4.051184220753356e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-1.7932195670151536)}\nTree:  (-0.500000000000003 + pow(cos(const((x61)**(-1.7932195670151536))), (x11)**(x21), (x11 / const((1.6487086928786074 + x31)))))', 'Equation constants: {0: np.float64(0.4679351834129459), 1: np.float64(0.11832584643380346)}\nTree:  (0.4679351834129459 / (cos(0.11832584643380346))**((x11)**(x21)))', 'Equation constants: {0: np.float64(9340426.614195166), 1: np.float64(-6528.314548306312), 2: np.float64(1579.9184097956684), 3: np.float64(8.457584491578592e-05)}\nTree:  (9340426.614195166 / ((x67 + -6528.314548306312) + (1579.9184097956684 / 8.457584491578592e-05)))', 'Equation constants: {0: np.float64(-0.500000014120336), 1: np.float64(-1.9802977309673115e-05), 2: np.float64(0.39492720437566)}\nTree:  (-0.500000014120336 + (cos(const((x31)**(0.39492720437566))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000006274), 1: np.float64(-1.0719464119701854e-07), 2: np.float64(-1.2506951994740563), 3: np.float64(-0.5353296609080238)}\nTree:  (-0.5000000000006274 + ((-1.0719464119701854e-07 cos (x63 * -0.5353296609080238)))**((x11)**(x21(sin(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(0.4679370244692766), 1: np.float64(0.118322393356056), 2: np.float64(0.39492720437566)}\nTree:  (0.4679370244692766 / (cos(const((0.39492720437566)**(0.39492720437566))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.5067809653599391), 1: np.float64(-1.4073628065982364), 2: np.float64(-0.47583611483419336)}\nTree:  (0.5067809653599391 + (cos(-1.4073628065982364) / (x11 / -0.47583611483419336)))', 'Equation constants: {0: np.float64(100117115.1404699), 1: np.float64(196910777.7331198), 2: np.float64(37552273.39979343)}\nTree:  (100117115.1404699 / ((x67 + 196910777.7331198) + (37552273.39979343 / x48)))', 'Equation constants: {0: np.float64(0.5067809654333599), 1: np.float64(-1.6762665456739316), 2: np.float64(0.7355380555035412)}\nTree:  (0.5067809654333599 + (cos(-1.6762665456739316) / (x11 / 0.7355380555035412)))', 'Equation constants: {0: np.float64(-0.5000000001243895), 1: np.float64(9.472946425465904e-10), 2: np.float64(0.39492720437566)}\nTree:  (-0.5000000001243895 + (cos(const((x31)**(0.39492720437566))))**((x11 * x21)))', 'Equation constants: {0: np.float64(0.5067809653491129), 1: np.float64(-1.604199271612301), 2: np.float64(2.318595799338889)}\nTree:  (0.5067809653491129 + (cos(-1.604199271612301) / (x11 / 2.318595799338889)))', 'Equation constants: {0: np.float64(-20.173576453565207), 1: np.float64(-20.673576453565232)}\nTree:  (-20.173576453565207 - -20.673576453565232)', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(-1.247874039997769)}\nTree:  (const(sin(x57)) - const((x19 / -1.247874039997769)))']
MSE: [np.float64(0.25), np.float64(2.3381113656999476e+39), np.float64(0.2500000000000001), np.float64(0.2500000000390058), np.float64(0.24995388353278175), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25001611059975376), np.float64(0.25), np.float64(0.24995350996894888), np.float64(0.2500873618317408), np.float64(0.2500000000469601), np.float64(0.2500000000000008), np.float64(0.2499535099805499), np.float64(0.24977158157541882), np.float64(0.2497374694914312), np.float64(0.24977158151663933), np.float64(0.25), np.float64(0.24977158151676035), np.float64(0.25), np.float64(42569338654.18929), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=472, sigma_y=0.02086543194502164, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=874, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=472, sigma_y=0.02086543194502164, unit=0.8409121047808698)', 'Generator(mode=real, range=(-5, 5), n_g=692, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.03129814791753246, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.00828024117711458, unit=0.5961721930587102)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.02608178993127705, unit=0.9250033152589568)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.02608178993127705, unit=0.9250033152589568)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.02086543194502164, unit=0.8409121047808698)', 'Generator(mode=real, range=(-2, 2), n_g=705, sigma_y=0.016642613499468006, unit=0.519378907545945)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=906, sigma_y=0.02222238540342393, unit=1.0284077004989516)', 'Generator(mode=real, range=(-2, 2), n_g=705, sigma_y=0.019971136199361608, unit=0.519378907545945)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.03129814791753246, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.00828024117711458, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5.038903593152413, 4.961096406847587), n_g=692, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1, 3), n_g=271, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=472, sigma_y=0.02086543194502164, unit=0.8409121047808698)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=440, sigma_y=0.02608178993127705, unit=0.9250033152589568)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=472, sigma_y=0.03129814791753246, unit=0.8409121047808698)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=472, sigma_y=0.02086543194502164, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5365549737528391)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.012861823364613244, unit=1.0121994893723651)', 'Generator(mode=real, range=(-5.961012385957098, 6.038987614042902), n_g=660, sigma_y=0.04413675419223752, unit=0.6031319255297213)', 'Generator(mode=real, range=(-5, 5), n_g=692, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.0155495210360956, 2.9844504789639044), n_g=303, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.012861823364613244, unit=1.0121994893723651)']
Gen 6: 22 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-20.06743435122445), 1: np.float64(-20.56743435122874), 2: np.float64(-0.22778828367312354)}\nTree:  (-20.06743435122445 - const((x12)**(-0.22778828367312354)))', 'Equation constants: {0: np.float64(-0.5000000027639754), 1: np.float64(1.3215888368835595e-08), 2: np.float64(-1.5119083408720289)}\nTree:  +(-0.5000000027639754, (cos(1.3215888368835595e-08))**((x11)**(x69)), (-1.5119083408720289)**(-1.5119083408720289))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - -2.898409929325675)', 'Equation constants: {0: np.float64(-20.173576453565207), 1: np.float64(-20.673576453565232), 2: np.float64(1.674328169587282)}\nTree:  (const((x41 / 1.674328169587282)) - -20.673576453565232)', 'Equation constants: {0: np.float64(9052762.847665584), 1: np.float64(8266.167253062975), 2: np.float64(-137.5902275354172), 3: np.float64(-7.605776788095233e-06)}\nTree:  (9052762.847665584 / ((x67 + 8266.167253062975) + (-137.5902275354172 / -7.605776788095233e-06)))', 'Equation constants: {0: np.float64(-0.500000000000003), 1: np.float64(-4.051184220753356e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-1.7932195670151536)}\nTree:  (-0.500000000000003 + pow(cos(const((x61)**(-1.7932195670151536))), (x11)**(x21), (x11 / const((1.6487086928786074 + x31)))))', 'Equation constants: {0: np.float64(0.4679351834129459), 1: np.float64(0.11832584643380346)}\nTree:  (0.4679351834129459 / (cos(0.11832584643380346))**((x11)**(x21)))', 'Equation constants: {0: np.float64(9340426.614195166), 1: np.float64(-6528.314548306312), 2: np.float64(1579.9184097956684), 3: np.float64(8.457584491578592e-05)}\nTree:  (9340426.614195166 / ((x67 + -6528.314548306312) + (1579.9184097956684 / 8.457584491578592e-05)))', 'Equation constants: {0: np.float64(-0.500000014120336), 1: np.float64(-1.9802977309673115e-05), 2: np.float64(0.39492720437566)}\nTree:  (-0.500000014120336 + (cos(const((x31)**(0.39492720437566))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000006274), 1: np.float64(-1.0719464119701854e-07), 2: np.float64(-1.2506951994740563), 3: np.float64(-0.5353296609080238)}\nTree:  (-0.5000000000006274 + ((-1.0719464119701854e-07 cos (x63 * -0.5353296609080238)))**((x11)**(x21(sin(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(0.4679370244692766), 1: np.float64(0.118322393356056), 2: np.float64(0.39492720437566)}\nTree:  (0.4679370244692766 / (cos(const((0.39492720437566)**(0.39492720437566))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.5067809653599391), 1: np.float64(-1.4073628065982364), 2: np.float64(-0.47583611483419336)}\nTree:  (0.5067809653599391 + (cos(-1.4073628065982364) / (x11 / -0.47583611483419336)))', 'Equation constants: {0: np.float64(100117115.1404699), 1: np.float64(196910777.7331198), 2: np.float64(37552273.39979343)}\nTree:  (100117115.1404699 / ((x67 + 196910777.7331198) + (37552273.39979343 / x48)))', 'Equation constants: {0: np.float64(0.5067809654333599), 1: np.float64(-1.6762665456739316), 2: np.float64(0.7355380555035412)}\nTree:  (0.5067809654333599 + (cos(-1.6762665456739316) / (x11 / 0.7355380555035412)))', 'Equation constants: {0: np.float64(-0.5000000001243895), 1: np.float64(9.472946425465904e-10), 2: np.float64(0.39492720437566)}\nTree:  (-0.5000000001243895 + (cos(const((x31)**(0.39492720437566))))**((x11 * x21)))', 'Equation constants: {0: np.float64(0.5067809653491129), 1: np.float64(-1.604199271612301), 2: np.float64(2.318595799338889)}\nTree:  (0.5067809653491129 + (cos(-1.604199271612301) / (x11 / 2.318595799338889)))', 'Equation constants: {0: np.float64(-20.173576453565207), 1: np.float64(-20.673576453565232)}\nTree:  (-20.173576453565207 - -20.673576453565232)', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(-1.247874039997769)}\nTree:  (const(sin(x57)) - const((x19 / -1.247874039997769)))', 'Equation constants: {0: np.float64(0.4679353857941249), 1: np.float64(0.11832546621794407), 2: np.float64(0.39492720437566), 3: np.float64(-0.3800670582347472)}\nTree:  (0.4679353857941249 / (cos(const((0.39492720437566)**(0.39492720437566))))**((x11)**(x21((-0.3800670582347472 / x51)))))', 'Equation constants: {0: np.float64(-0.5000000272263582), 1: np.float64(-5.3348982631242086e-05), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.5000000272263582 + (cos(-5.3348982631242086e-05))**((x11)**(x21(sin(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(-0.5000000145855498), 1: np.float64(7.997824441083903e-05), 2: np.float64(-1.5119083408720289)}\nTree:  +(-0.5000000145855498, (cos(7.997824441083903e-05))**((x11)**(x69)), (-1.5119083408720289)**(-1.5119083408720289))', 'Equation constants: {0: np.float64(-0.5000000027639754), 2: np.float64(1.0)}\nTree:  (-0.5000000027639754 + (1.0)**(1.0))', 'Equation constants: {0: np.float64(-0.5000000004417926), 1: np.float64(-3.5852479808719823e-07), 2: np.float64(0.39492720437566)}\nTree:  (-0.5000000004417926 + (cos(const((x31)**(0.39492720437566))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-5.161542955448571), 1: np.float64(-5.661542955448576)}\nTree:  (-5.161542955448571 - const((x69 * x39(sin(x99)))))', 'Equation constants: {0: np.float64(0.4678542496770382), 1: np.float64(0.13914521698844148), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074)}\nTree:  (0.4678542496770382)**(pow(cos(0.13914521698844148), (x11)**(x21), (x11 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-0.5000000039240164), 1: np.float64(4.859491277747051e-06), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.5000000039240164 + (cos(4.859491277747051e-06))**((x11)**(x21(sin(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(-0.5000000000002697), 1: np.float64(-3.605232633756164e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(-1.1854189611828354)}\nTree:  (-0.5000000000002697 + pow((-3.605232633756164e-08 cos (-1.1854189611828354 * x11)), (x35)**(x21), (x11 / -0.6621409606266639)))', 'Equation constants: {0: np.float64(-0.500000000000086), 1: np.float64(2.533801230151419e-09)}\nTree:  (-0.500000000000086 + (cos(2.533801230151419e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - -2.898409929325675)', 'Equation constants: {0: np.float64(-0.500000000001295), 1: np.float64(1.3093405804626634e-07)}\nTree:  (-0.500000000001295 + (cos(1.3093405804626634e-07))**((x11)**(x21(sin(x84)))))', 'Equation constants: {0: np.float64(-40.307729079720396), 1: np.float64(-40.807729079720474)}\nTree:  (-40.307729079720396 - -40.807729079720474)', 'Equation constants: {0: np.float64(0.5067809652352823), 1: np.float64(-1.6042101003402252), 2: np.float64(2.3178480603397884), 3: np.float64(0.3237728685594665)}\nTree:  (const(cos(0.3237728685594665)) + (cos(-1.6042101003402252) / (x11 / 2.3178480603397884)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(-1.9620094260955319), 6: np.float64(1.219202391498996)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(-2.2241227138258743e-08), (x11)**(x21((-1.9620094260955319 cos sin(1.219202391498996)))), (x11 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-20.06743435122445), 1: np.float64(-20.56743435122874)}\nTree:  (-20.06743435122445 - -20.56743435122874)', 'Equation constants: {0: np.float64(-20.06743435122445), 1: np.float64(-20.56743435122874)}\nTree:  (-20.06743435122445 - -20.56743435122874)', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(-1.247874039997769)}\nTree:  (-20.108351004437395 - const((x19 / -1.247874039997769)))', 'Equation constants: {0: np.float64(-0.5000000153591927), 1: np.float64(-9.174166131225734e-06), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.5000000153591927 + (cos(-9.174166131225734e-06))**((x11)**(x21(sin(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(-2.2241227138258743e-08), (x11)**(x21), (x11 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-20.06743435122445), 1: np.float64(-20.56743435122874)}\nTree:  (-20.06743435122445 - -20.56743435122874)', 'Equation constants: {0: np.float64(9341114.848647395), 1: np.float64(-6530.335607454494), 2: np.float64(476.2655795224816), 3: np.float64(2.549366186825439e-05)}\nTree:  (9341114.848647395 / ((x67 + -6530.335607454494) + (476.2655795224816 / 2.549366186825439e-05)))']
MSE: [np.float64(0.2499535099689616), np.float64(0.25000000050701676), np.float64(402759506.57958066), np.float64(316660384.89133376), np.float64(0.2500000001861156), np.float64(0.25), np.float64(0.25000000000118994), np.float64(0.25), np.float64(0.2499538835327816), np.float64(0.25000000000137923), np.float64(0.25), np.float64(0.25000000000000017), np.float64(0.25), np.float64(0.250000000000005), np.float64(388679113.4480184), np.float64(0.25), np.float64(0.2497715815166393), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25000000001250255), np.float64(0.25), np.float64(0.25), np.float64(0.25001560692089886)]
Generators: ['Generator(mode=real, range=(-6.0, 6.0), n_g=440, sigma_y=0.02608178993127705, unit=0.9250033152589568)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=472, sigma_y=0.03129814791753246, unit=0.8409121047808698)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=472, sigma_y=0.02086543194502164, unit=0.8409121047808698)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5365549737528391)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.012861823364613244, unit=1.0121994893723651)', 'Generator(mode=real, range=(-5.961012385957098, 6.038987614042902), n_g=660, sigma_y=0.04413675419223752, unit=0.6031319255297213)', 'Generator(mode=real, range=(-5, 5), n_g=692, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.0155495210360956, 2.9844504789639044), n_g=303, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.012861823364613244, unit=1.0121994893723651)', 'Generator(mode=real, range=(-5.038903593152413, 4.961096406847587), n_g=692, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=408, sigma_y=0.02608178993127705, unit=0.9250033152589568)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.00828024117711458, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=874, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.6557894123645812)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.03129814791753246, unit=0.9250033152589568)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.02222238540342393, unit=1.0284077004989516)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=271, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=938, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.012861823364613244, unit=1.0121994893723651)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.03129814791753246, unit=0.9250033152589568)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.009936289412537496, unit=0.5961721930587102)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=472, sigma_y=0.02086543194502164, unit=0.7568208943027828)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=874, sigma_y=0.02222238540342393, unit=1.0284077004989516)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5, 5), n_g=692, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=906, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006624192941691665, unit=0.5961721930587102)']
Gen 7: 20 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.5000000145855498), 1: np.float64(7.997824441083903e-05), 2: np.float64(-1.5119083408720289)}\nTree:  +(-0.5000000145855498, (cos(7.997824441083903e-05))**((x11)**(x69)), (-1.5119083408720289)**(-1.5119083408720289))', 'Equation constants: {0: np.float64(-0.5000000027639754), 2: np.float64(1.0)}\nTree:  (-0.5000000027639754 + (1.0)**(1.0))', 'Equation constants: {0: np.float64(-0.5000000004417926), 1: np.float64(-3.5852479808719823e-07), 2: np.float64(0.39492720437566)}\nTree:  (-0.5000000004417926 + (cos(const((x31)**(0.39492720437566))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-5.161542955448571), 1: np.float64(-5.661542955448576)}\nTree:  (-5.161542955448571 - const((x69 * x39(sin(x99)))))', 'Equation constants: {0: np.float64(0.4678542496770382), 1: np.float64(0.13914521698844148), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074)}\nTree:  (0.4678542496770382)**(pow(cos(0.13914521698844148), (x11)**(x21), (x11 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-0.5000000039240164), 1: np.float64(4.859491277747051e-06), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.5000000039240164 + (cos(4.859491277747051e-06))**((x11)**(x21(sin(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(-0.5000000000002697), 1: np.float64(-3.605232633756164e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(-1.1854189611828354)}\nTree:  (-0.5000000000002697 + pow((-3.605232633756164e-08 cos (-1.1854189611828354 * x11)), (x35)**(x21), (x11 / -0.6621409606266639)))', 'Equation constants: {0: np.float64(-0.500000000000086), 1: np.float64(2.533801230151419e-09)}\nTree:  (-0.500000000000086 + (cos(2.533801230151419e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - -2.898409929325675)', 'Equation constants: {0: np.float64(-0.500000000001295), 1: np.float64(1.3093405804626634e-07)}\nTree:  (-0.500000000001295 + (cos(1.3093405804626634e-07))**((x11)**(x21(sin(x84)))))', 'Equation constants: {0: np.float64(-40.307729079720396), 1: np.float64(-40.807729079720474)}\nTree:  (-40.307729079720396 - -40.807729079720474)', 'Equation constants: {0: np.float64(0.5067809652352823), 1: np.float64(-1.6042101003402252), 2: np.float64(2.3178480603397884), 3: np.float64(0.3237728685594665)}\nTree:  (const(cos(0.3237728685594665)) + (cos(-1.6042101003402252) / (x11 / 2.3178480603397884)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(-1.9620094260955319), 6: np.float64(1.219202391498996)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(-2.2241227138258743e-08), (x11)**(x21((-1.9620094260955319 cos sin(1.219202391498996)))), (x11 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-20.06743435122445), 1: np.float64(-20.56743435122874)}\nTree:  (-20.06743435122445 - -20.56743435122874)', 'Equation constants: {0: np.float64(-20.06743435122445), 1: np.float64(-20.56743435122874)}\nTree:  (-20.06743435122445 - -20.56743435122874)', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(-1.247874039997769)}\nTree:  (-20.108351004437395 - const((x19 / -1.247874039997769)))', 'Equation constants: {0: np.float64(-0.5000000153591927), 1: np.float64(-9.174166131225734e-06), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.5000000153591927 + (cos(-9.174166131225734e-06))**((x11)**(x21(sin(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(-2.2241227138258743e-08), (x11)**(x21), (x11 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-20.06743435122445), 1: np.float64(-20.56743435122874)}\nTree:  (-20.06743435122445 - -20.56743435122874)', 'Equation constants: {0: np.float64(9341114.848647395), 1: np.float64(-6530.335607454494), 2: np.float64(476.2655795224816), 3: np.float64(2.549366186825439e-05)}\nTree:  (9341114.848647395 / ((x67 + -6530.335607454494) + (476.2655795224816 / 2.549366186825439e-05)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(-2.2241227138258743e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-5.161542955448571), 1: np.float64(-5.661542955448576)}\nTree:  (-5.161542955448571 - const((x0 * x39(sin(x99)))))', 'Equation constants: {0: np.float64(-0.5000000153126436), 1: np.float64(1.856784300832962e-05), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.5000000153126436 + (cos(1.856784300832962e-05))**((x11)**(x21(sin(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(-0.5000000027639754), 2: np.float64(1.0)}\nTree:  (-0.5000000027639754 + (1.0)**(1.0))', 'Equation constants: {0: np.float64(0.5067809652024398), 1: np.float64(-1.6977793802797978), 2: np.float64(0.6113542727798134)}\nTree:  (0.5067809652024398 + (cos(-1.6977793802797978) / (x11 / 0.6113542727798134)))', 'Equation constants: {0: np.float64(-0.5000000000002697), 1: np.float64(-3.605232633756164e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(-1.1854189611828354), 4: np.float64(1.6964733614582457)}\nTree:  (-0.5000000000002697 + pow((-3.605232633756164e-08 cos (-1.1854189611828354 * x11)), (x35)**(x21((1.6964733614582457)**(x16))), (x11 / -0.6621409606266639)))', 'Equation constants: {0: np.float64(-0.500000000000003), 1: np.float64(-4.051184220753356e-08), 4: np.float64(1.0)}\nTree:  (-0.500000000000003 + (cos(const((x61)**(1.0))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000004417926), 1: np.float64(-3.5852479808719823e-07), 2: np.float64(0.39492720437566)}\nTree:  (-0.5000000004417926 + (cos(const((x31)**(0.39492720437566))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000001107), 1: np.float64(7.807366889378549e-10), 2: np.float64(-0.21911103294979695)}\nTree:  (-0.5000000000001107 + (cos(7.807366889378549e-10))**(pow(x11, x21(sin(x84)), (-0.21911103294979695)**(-0.21911103294979695))))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 4: np.float64(1.0), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (const(cos(1.0)) + (cos(-2.2241227138258743e-08))**((x11)**(x21((1.0 cos sin(1.0))))))', 'Equation constants: {0: np.float64(-0.5000000000008198), 1: np.float64(-3.8571664970943076e-07)}\nTree:  (-0.5000000000008198 + (cos(-3.8571664970943076e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - -2.898409929325675)', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008)}\nTree:  (const(sin(x57)) - -20.60835100444008)', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008)}\nTree:  (-20.108351004437395 - -20.60835100444008)', 'Equation constants: {0: np.float64(0.4829479204699644), 1: np.float64(0.08563616622776253)}\nTree:  (0.4829479204699644 / (cos(0.08563616622776253))**((x11)**(x46)))', 'Equation constants: {0: np.float64(0.506780965418346), 1: np.float64(-1.4079252009583867), 2: np.float64(-0.4775366967257725), 3: np.float64(-1.8755588589093635)}\nTree:  (0.506780965418346 + ((-1.4079252009583867 cos sin(-1.8755588589093635)) / (x11 / -0.4775366967257725)))', 'Equation constants: {0: np.float64(-0.5000000001020181), 1: np.float64(4.014004684373235e-06), 2: np.float64(-1.2506951994740563), 3: np.float64(-0.23353711052490533)}\nTree:  (-0.5000000001020181 + (cos(4.014004684373235e-06))**((x11((x26 * -0.23353711052490533)))**(x21(sin(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(-0.5000000000025275), 1: np.float64(4.247157343650268e-08), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.5000000000025275 + (cos(4.247157343650268e-08))**((x11)**(x21(cos(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(-0.5000000000221244), 1: np.float64(3.6256275082086927e-07)}\nTree:  (-0.5000000000221244 + (cos(3.6256275082086927e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(100117115.1404699), 1: np.float64(196910777.7331198), 2: np.float64(37552273.39979343)}\nTree:  (100117115.1404699 / ((x67 + const(sin(x14))) + (37552273.39979343 / x48)))']
MSE: [np.float64(2.4855754448318576e+39), np.float64(0.25), np.float64(0.49999999999991035), np.float64(40308526440.36223), np.float64(0.25), np.float64(0.2500000000211225), np.float64(0.25), np.float64(0.24977158160235213), np.float64(999999000000.5), np.float64(0.25), np.float64(0.25), np.float64(333995159.7107711), np.float64(0.25000000000118994), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000000101), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.24998689056168263), np.float64(0.24977158151677492), np.float64(0.2500000000011559), np.float64(0.25000000000000105), np.float64(0.25000000000003236), np.float64(0.2497374694914312)]
Generators: ['Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.02222238540342393, unit=1.0284077004989516)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=271, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=938, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1, 3), n_g=303, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.012861823364613244, unit=1.0121994893723651)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.03129814791753246, unit=0.9250033152589568)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.009936289412537496, unit=0.5961721930587102)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=472, sigma_y=0.02086543194502164, unit=0.7568208943027828)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=874, sigma_y=0.02222238540342393, unit=1.0284077004989516)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5, 5), n_g=692, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=906, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006624192941691665, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=303, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.00828024117711458, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=938, sigma_y=0.018518654502853275, unit=0.9255669304490565)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=970, sigma_y=0.02222238540342393, unit=1.0284077004989516)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1, 3), n_g=271, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=842, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=408, sigma_y=0.02608178993127705, unit=1.0175036467848526)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.012861823364613244, unit=1.0121994893723651)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.5365549737528391)', 'Generator(mode=real, range=(-6.377241761181804, 5.622758238818196), n_g=440, sigma_y=0.02608178993127705, unit=0.9250033152589568)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.015434188037535893, unit=1.0121994893723651)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=440, sigma_y=0.02608178993127705, unit=0.8325029837330612)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=440, sigma_y=0.03129814791753246, unit=0.9250033152589568)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=874, sigma_y=0.02222238540342393, unit=1.1312484705488468)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.03129814791753246, unit=0.9250033152589568)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.5902104711281231)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5, 5), n_g=692, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5, 5), n_g=692, sigma_y=0.05296410503068502, unit=0.5483017504815647)']
Gen 8: 20 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(-2.2241227138258743e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-5.161542955448571), 1: np.float64(-5.661542955448576)}\nTree:  (-5.161542955448571 - const((x0 * x39(sin(x99)))))', 'Equation constants: {0: np.float64(-0.5000000153126436), 1: np.float64(1.856784300832962e-05), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.5000000153126436 + (cos(1.856784300832962e-05))**((x11)**(x21(sin(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(-0.5000000027639754), 2: np.float64(1.0)}\nTree:  (-0.5000000027639754 + (1.0)**(1.0))', 'Equation constants: {0: np.float64(0.5067809652024398), 1: np.float64(-1.6977793802797978), 2: np.float64(0.6113542727798134)}\nTree:  (0.5067809652024398 + (cos(-1.6977793802797978) / (x11 / 0.6113542727798134)))', 'Equation constants: {0: np.float64(-0.5000000000002697), 1: np.float64(-3.605232633756164e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(-1.1854189611828354), 4: np.float64(1.6964733614582457)}\nTree:  (-0.5000000000002697 + pow((-3.605232633756164e-08 cos (-1.1854189611828354 * x11)), (x35)**(x21((1.6964733614582457)**(x16))), (x11 / -0.6621409606266639)))', 'Equation constants: {0: np.float64(-0.500000000000003), 1: np.float64(-4.051184220753356e-08), 4: np.float64(1.0)}\nTree:  (-0.500000000000003 + (cos(const((x61)**(1.0))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000004417926), 1: np.float64(-3.5852479808719823e-07), 2: np.float64(0.39492720437566)}\nTree:  (-0.5000000004417926 + (cos(const((x31)**(0.39492720437566))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000001107), 1: np.float64(7.807366889378549e-10), 2: np.float64(-0.21911103294979695)}\nTree:  (-0.5000000000001107 + (cos(7.807366889378549e-10))**(pow(x11, x21(sin(x84)), (-0.21911103294979695)**(-0.21911103294979695))))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 4: np.float64(1.0), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (const(cos(1.0)) + (cos(-2.2241227138258743e-08))**((x11)**(x21((1.0 cos sin(1.0))))))', 'Equation constants: {0: np.float64(-0.5000000000008198), 1: np.float64(-3.8571664970943076e-07)}\nTree:  (-0.5000000000008198 + (cos(-3.8571664970943076e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - -2.898409929325675)', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008)}\nTree:  (const(sin(x57)) - -20.60835100444008)', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008)}\nTree:  (-20.108351004437395 - -20.60835100444008)', 'Equation constants: {0: np.float64(0.4829479204699644), 1: np.float64(0.08563616622776253)}\nTree:  (0.4829479204699644 / (cos(0.08563616622776253))**((x11)**(x46)))', 'Equation constants: {0: np.float64(0.506780965418346), 1: np.float64(-1.4079252009583867), 2: np.float64(-0.4775366967257725), 3: np.float64(-1.8755588589093635)}\nTree:  (0.506780965418346 + ((-1.4079252009583867 cos sin(-1.8755588589093635)) / (x11 / -0.4775366967257725)))', 'Equation constants: {0: np.float64(-0.5000000001020181), 1: np.float64(4.014004684373235e-06), 2: np.float64(-1.2506951994740563), 3: np.float64(-0.23353711052490533)}\nTree:  (-0.5000000001020181 + (cos(4.014004684373235e-06))**((x11((x26 * -0.23353711052490533)))**(x21(sin(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(-0.5000000000025275), 1: np.float64(4.247157343650268e-08), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.5000000000025275 + (cos(4.247157343650268e-08))**((x11)**(x21(cos(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(-0.5000000000221244), 1: np.float64(3.6256275082086927e-07)}\nTree:  (-0.5000000000221244 + (cos(3.6256275082086927e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(100117115.1404699), 1: np.float64(196910777.7331198), 2: np.float64(37552273.39979343)}\nTree:  (100117115.1404699 / ((x67 + const(sin(x14))) + (37552273.39979343 / x48)))', 'Equation constants: {0: np.float64(-0.5000001010640689), 1: np.float64(-1.391543935025906e-05), 2: np.float64(-0.21911103294979695)}\nTree:  (-0.5000001010640689 + (cos(-1.391543935025906e-05))**(pow(x11, x21(sin(x84)), (-0.21911103294979695)**(-0.21911103294979695))))', 'Equation constants: {0: np.float64(-0.5356623798678235), 1: np.float64(-0.12495481094975422), 2: np.float64(-166.78480704669613), 3: np.float64(-1.1854189611828354)}\nTree:  (-0.5356623798678235 + ((-0.12495481094975422 cos (-1.1854189611828354 * x11)))**((x11 / -166.78480704669613)))', 'Equation constants: {0: np.float64(-0.5000000000094521), 1: np.float64(1.0289310705017419e-07), 2: np.float64(-1.2506951994740563), 3: np.float64(-0.23353711052490533)}\nTree:  (-0.5000000000094521 + (cos(1.0289310705017419e-07))**((x11((x26 * -0.23353711052490533)))**(x21(sin(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(-0.011511849791785971), 1: np.float64(-43.43346512490538)}\nTree:  (-0.011511849791785971 * -43.43346512490538)', 'Equation constants: {0: np.float64(-0.500000000121955), 1: np.float64(1.1021236531781278e-06), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.500000000121955 + (cos(1.1021236531781278e-06))**((x11)**(x21(cos(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(0.3991152173026775), 1: np.float64(-1.4697096871369724)}\nTree:  (0.3991152173026775 + (cos(-1.4697096871369724) / (x11 / x13)))', 'Equation constants: {0: np.float64(0.4678542496770382), 1: np.float64(0.13914521698844148), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(1.9092424935925871)}\nTree:  (0.4678542496770382)**(pow(cos(0.13914521698844148), (x11)**(x21), (x11 / const((1.6487086928786074 / x31((x29 - 1.9092424935925871)))))))', 'Equation constants: {0: np.float64(-0.5000000708256815), 1: np.float64(-7.991498554911491e-06)}\nTree:  (-0.5000000708256815 + (cos(-7.991498554911491e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.20090830857797304)}\nTree:  (const((-0.4121323370138712 cos (0.20090830857797304 / x69))) + pow(cos(-2.2241227138258743e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675), 2: np.float64(1.1766752361567012)}\nTree:  (-2.398409929325668 - const((1.1766752361567012 / x25)))', 'Equation constants: {0: np.float64(-0.5000000103073851), 1: np.float64(1.0905358232755998e-05)}\nTree:  (-0.5000000103073851 + (cos(1.0905358232755998e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(1.2103079418644564)}\nTree:  (const((x5)**(1.2103079418644564)) - -20.60835100444008)', 'Equation constants: {0: np.float64(0.4829479214059001), 1: np.float64(0.08563616384037977)}\nTree:  (0.4829479214059001 / (cos(0.08563616384037977))**((x11)**(x46)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(-2.2241227138258743e-08), (x11 * x21), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675), 2: np.float64(0.5811840868744644)}\nTree:  (-2.398409929325668 - const((0.5811840868744644 * x66)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008)}\nTree:  (-20.108351004437395 - -20.60835100444008)', 'Equation constants: {0: np.float64(-0.5000001113271751), 1: np.float64(-1.6482233761577324e-05), 2: np.float64(0.39492720437566)}\nTree:  (-0.5000001113271751 + (cos(const((x31)**(0.39492720437566))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008)}\nTree:  -(const(sin(x57)), -20.60835100444008, sin(x54))', 'Equation constants: {0: np.float64(-0.500000000121955), 1: np.float64(1.1021236531781278e-06), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.500000000121955 + (cos(1.1021236531781278e-06))**(pow(x11, x21(sin(-1.2506951994740563)), sin(x12))))', 'Equation constants: {0: np.float64(-40.624012199387806), 1: np.float64(-41.124012199615805)}\nTree:  (const(sin(x57)) - -41.124012199615805)']
MSE: [np.float64(0.250000000296028), np.float64(323050582.50563616), np.float64(0.24865712317916458), np.float64(389557898.69743556), np.float64(0.2500000000000196), np.float64(0.3911129126550546), np.float64(321817500.15072435), np.float64(0.2500000000112237), np.float64(0.2500000000002211), np.float64(0.24994746980591212), np.float64(0.2499538835327816), np.float64(0.250000000229623), np.float64(6.067117344761665e+39), np.float64(0.25), np.float64(0.25), np.float64(0.25000000002342154), np.float64(0.25), np.float64(0.2499868905616808), np.float64(0.25000000000000006), np.float64(0.25), np.float64(0.25), np.float64(0.2500000004017029), np.float64(0.25), np.float64(0.2500000000002211), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.5365549737528391)', 'Generator(mode=real, range=(-6.377241761181804, 5.622758238818196), n_g=440, sigma_y=0.02608178993127705, unit=0.9250033152589568)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.015434188037535893, unit=1.0121994893723651)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=440, sigma_y=0.02608178993127705, unit=0.8325029837330612)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=440, sigma_y=0.03129814791753246, unit=0.9250033152589568)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=874, sigma_y=0.02222238540342393, unit=1.1312484705488468)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.03129814791753246, unit=0.9250033152589568)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.5902104711281231)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5, 5), n_g=692, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5, 5), n_g=692, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1.1512631127188662, 3.6487368872811334), n_g=335, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=938, sigma_y=0.02222238540342393, unit=0.9255669304490565)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006624192941691665, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006900200980928817, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.006624192941691665, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=938, sigma_y=0.018518654502853275, unit=0.9255669304490565)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.0258629381452775, 2.9741370618547225), n_g=303, sigma_y=0.006900200980928817, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006624192941691665, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=842, sigma_y=0.018518654502853275, unit=1.1312484705488468)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.02222238540342393, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5, 5), n_g=692, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.03129814791753246, unit=1.0175036467848526)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-0.42854571910474476, 2.7714542808952554), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=472, sigma_y=0.02086543194502164, unit=0.7568208943027828)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=504, sigma_y=0.03129814791753246, unit=0.9250033152589568)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=271, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.005520160784743054, unit=0.5365549737528391)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=874, sigma_y=0.02222238540342393, unit=1.0284077004989516)']
Gen 9: 23 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.011511849791785971), 1: np.float64(-43.43346512490538)}\nTree:  (-0.011511849791785971 * -43.43346512490538)', 'Equation constants: {0: np.float64(-0.500000000121955), 1: np.float64(1.1021236531781278e-06), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.500000000121955 + (cos(1.1021236531781278e-06))**((x11)**(x21(cos(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(0.3991152173026775), 1: np.float64(-1.4697096871369724)}\nTree:  (0.3991152173026775 + (cos(-1.4697096871369724) / (x11 / x13)))', 'Equation constants: {0: np.float64(0.4678542496770382), 1: np.float64(0.13914521698844148), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(1.9092424935925871)}\nTree:  (0.4678542496770382)**(pow(cos(0.13914521698844148), (x11)**(x21), (x11 / const((1.6487086928786074 / x31((x29 - 1.9092424935925871)))))))', 'Equation constants: {0: np.float64(-0.5000000708256815), 1: np.float64(-7.991498554911491e-06)}\nTree:  (-0.5000000708256815 + (cos(-7.991498554911491e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.20090830857797304)}\nTree:  (const((-0.4121323370138712 cos (0.20090830857797304 / x69))) + pow(cos(-2.2241227138258743e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675), 2: np.float64(1.1766752361567012)}\nTree:  (-2.398409929325668 - const((1.1766752361567012 / x25)))', 'Equation constants: {0: np.float64(-0.5000000103073851), 1: np.float64(1.0905358232755998e-05)}\nTree:  (-0.5000000103073851 + (cos(1.0905358232755998e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(1.2103079418644564)}\nTree:  (const((x5)**(1.2103079418644564)) - -20.60835100444008)', 'Equation constants: {0: np.float64(0.4829479214059001), 1: np.float64(0.08563616384037977)}\nTree:  (0.4829479214059001 / (cos(0.08563616384037977))**((x11)**(x46)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(-2.2241227138258743e-08), (x11 * x21), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675), 2: np.float64(0.5811840868744644)}\nTree:  (-2.398409929325668 - const((0.5811840868744644 * x66)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008)}\nTree:  (-20.108351004437395 - -20.60835100444008)', 'Equation constants: {0: np.float64(-0.5000001113271751), 1: np.float64(-1.6482233761577324e-05), 2: np.float64(0.39492720437566)}\nTree:  (-0.5000001113271751 + (cos(const((x31)**(0.39492720437566))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008)}\nTree:  -(const(sin(x57)), -20.60835100444008, sin(x54))', 'Equation constants: {0: np.float64(-0.500000000121955), 1: np.float64(1.1021236531781278e-06), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.500000000121955 + (cos(1.1021236531781278e-06))**(pow(x11, x21(sin(-1.2506951994740563)), sin(x12))))', 'Equation constants: {0: np.float64(-40.624012199387806), 1: np.float64(-41.124012199615805)}\nTree:  (const(sin(x57)) - -41.124012199615805)', 'Equation constants: {0: np.float64(-0.5000000000129787), 1: np.float64(1.4017059496083206e-06)}\nTree:  (-0.5000000000129787 + (cos(1.4017059496083206e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000000902), 1: np.float64(-2.8088781052447202e-08)}\nTree:  (-0.5000000000000902 + (cos(-2.8088781052447202e-08))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000003116313), 1: np.float64(2.743602826042726e-06), 2: np.float64(-0.21911103294979695)}\nTree:  (-0.5000000003116313 + (cos(2.743602826042726e-06))**(pow(x11, x21(cos(x84)), (-0.21911103294979695)**(-0.21911103294979695))))', 'Equation constants: {0: np.float64(-0.5000000000129787), 1: np.float64(1.4017059496083206e-06)}\nTree:  (-0.5000000000129787 + (cos(1.4017059496083206e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675), 2: np.float64(0.5811840868744644)}\nTree:  (-2.398409929325668 - const((0.5811840868744644 * x24)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(1.2103079418644564), 3: np.float64(-0.13834417627744733)}\nTree:  (const((x5)**(const((-0.13834417627744733)**(-0.13834417627744733)))) - -20.60835100444008)', 'Equation constants: {0: np.float64(-0.5356604104297557), 1: np.float64(-0.12495541803697523), 2: np.float64(-166.8383793747709), 3: np.float64(-1.1854189611828354)}\nTree:  (-0.5356604104297557 + ((-0.12495541803697523 cos (-1.1854189611828354 * x11)))**((x11 / -166.8383793747709)))', 'Equation constants: {0: np.float64(0.4829479214059001), 1: np.float64(0.08563616384037977)}\nTree:  (0.4829479214059001 / (cos(0.08563616384037977))**((x11(cos(x40)))**(x46)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(-1.4586563820866143)}\nTree:  -(-20.108351004437395, -20.60835100444008, (-1.4586563820866143 * x86))', 'Equation constants: {0: np.float64(-0.5000000000000886), 1: np.float64(4.934882597419292e-09)}\nTree:  (-0.5000000000000886 + (cos(4.934882597419292e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008)}\nTree:  -(-20.108351004437395, -20.60835100444008, sin(x54))', 'Equation constants: {0: np.float64(-0.5000000029942874), 1: np.float64(1.9362852052452618e-06), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.5000000029942874 + (cos(1.9362852052452618e-06))**((x11)**(x21(cos(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - -2.898409929325675)', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (const(cos(x40)) + (cos(-2.2241227138258743e-08))**((x11)**(x21((1.0 cos sin(1.0))))))', 'Equation constants: {0: np.float64(100117115.2460563), 1: np.float64(196910777.7331198), 2: np.float64(37552273.39979343)}\nTree:  (100117115.2460563 / ((x67 + const(sin(x14))) + (37552273.39979343 / x48)))', 'Equation constants: {0: np.float64(-0.5000000000000863), 1: np.float64(-6.989495441889874e-08), 2: np.float64(0.3411587607536283)}\nTree:  (-0.5000000000000863 + (cos(const((x31)**(0.3411587607536283))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000001107), 1: np.float64(7.807366889378549e-10), 2: np.float64(-0.21911103294979695)}\nTree:  (-0.5000000000001107 + (cos(7.807366889378549e-10))**((x11)**((-0.21911103294979695)**(-0.21911103294979695))))', 'Equation constants: {0: np.float64(0.4975763394403532), 1: np.float64(1.079406980330902e-08), 2: np.float64(-1.2506951994740563)}\nTree:  (0.4975763394403532 + (sin(1.079406980330902e-08))**(pow(x11, x21(sin(-1.2506951994740563)), sin(x12))))', 'Equation constants: {0: np.float64(-0.5000000000090732), 1: np.float64(1.6038786105506169e-07), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.5000000000090732 + (cos(1.6038786105506169e-07))**((x11((x26 * x24)))**(x21(sin(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(-0.5000000004070569), 1: np.float64(2.9615914088933672e-06), 2: np.float64(0.39492720437566)}\nTree:  (-0.5000000004070569 + (cos(const((x31)**(0.39492720437566))))**((x11)**(x85)))', 'Equation constants: {0: np.float64(-0.5356601142923957), 1: np.float64(-0.12495546934241902), 2: np.float64(-166.84588200947076), 3: np.float64(-1.1854189611828354)}\nTree:  (-0.5356601142923957 + ((-0.12495546934241902 cos (-1.1854189611828354 * x11)))**((x11 / -166.84588200947076)))', 'Equation constants: {0: np.float64(-0.500000083685509), 1: np.float64(1.771072559439478e-05), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(1.771072559439478e-05), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000000001107), 1: np.float64(7.807366889378549e-10)}\nTree:  (-0.5000000000001107 + (cos(7.807366889378549e-10))**((x11)**(x21(sin(x84)))))']
MSE: [np.float64(321117774.5440295), np.float64(0.2500000000002533), np.float64(0.2500000000000001), np.float64(0.2500000000004235), np.float64(0.2500000000002533), np.float64(0.25), np.float64(0.25), np.float64(0.24865711936875662), np.float64(0.2499868905616808), np.float64(0.25), np.float64(0.25000000000000017), np.float64(0.25), np.float64(0.2500000000007036), np.float64(0.25), np.float64(0.25), np.float64(0.24973746949209039), np.float64(0.2500000000000001), np.float64(0.25), np.float64(0.2500058799564991), np.float64(0.2500000000000171), np.float64(0.25000000000015193), np.float64(999999000000.5), np.float64(0.2486571203995054), np.float64(0.2500000001674563), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-0.6, 2.6), n_g=842, sigma_y=0.018518654502853275, unit=1.1312484705488468)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.02222238540342393, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5, 5), n_g=692, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.03129814791753246, unit=1.0175036467848526)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-0.42854571910474476, 2.7714542808952554), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=472, sigma_y=0.02086543194502164, unit=0.7568208943027828)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=504, sigma_y=0.03129814791753246, unit=0.9250033152589568)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=271, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.005520160784743054, unit=0.5365549737528391)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=874, sigma_y=0.02222238540342393, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=271, sigma_y=0.005520160784743054, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.009936289412537496, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=303, sigma_y=0.006900200980928817, unit=0.5365549737528391)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.004416128627794443, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.018518654502853275, unit=1.0284077004989516)', 'Generator(mode=real, range=(-5.177241761181804, 4.422758238818195), n_g=440, sigma_y=0.02608178993127705, unit=0.9250033152589568)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006624192941691665, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=271, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006624192941691665, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.02222238540342393, unit=1.0284077004989516)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.018518654502853275, unit=0.9255669304490565)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.03129814791753246, unit=1.0175036467848526)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=239, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=271, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-4.561763082737356, 5.438236917262644), n_g=692, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.6557894123645812)', 'Generator(mode=real, range=(-4.958632929644245, 5.041367070355755), n_g=692, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=440, sigma_y=0.02608178993127705, unit=0.9157532821063674)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.004416128627794443, unit=0.5365549737528391)']
Gen 10: 23 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.5356604104297557), 1: np.float64(-0.12495541803697523), 2: np.float64(-166.8383793747709), 3: np.float64(-1.1854189611828354)}\nTree:  (-0.5356604104297557 + ((-0.12495541803697523 cos (-1.1854189611828354 * x11)))**((x11 / -166.8383793747709)))', 'Equation constants: {0: np.float64(0.4829479214059001), 1: np.float64(0.08563616384037977)}\nTree:  (0.4829479214059001 / (cos(0.08563616384037977))**((x11(cos(x40)))**(x46)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(-1.4586563820866143)}\nTree:  -(-20.108351004437395, -20.60835100444008, (-1.4586563820866143 * x86))', 'Equation constants: {0: np.float64(-0.5000000000000886), 1: np.float64(4.934882597419292e-09)}\nTree:  (-0.5000000000000886 + (cos(4.934882597419292e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008)}\nTree:  -(-20.108351004437395, -20.60835100444008, sin(x54))', 'Equation constants: {0: np.float64(-0.5000000029942874), 1: np.float64(1.9362852052452618e-06), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.5000000029942874 + (cos(1.9362852052452618e-06))**((x11)**(x21(cos(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675)}\nTree:  (-2.398409929325668 - -2.898409929325675)', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (const(cos(x40)) + (cos(-2.2241227138258743e-08))**((x11)**(x21((1.0 cos sin(1.0))))))', 'Equation constants: {0: np.float64(100117115.2460563), 1: np.float64(196910777.7331198), 2: np.float64(37552273.39979343)}\nTree:  (100117115.2460563 / ((x67 + const(sin(x14))) + (37552273.39979343 / x48)))', 'Equation constants: {0: np.float64(-0.5000000000000863), 1: np.float64(-6.989495441889874e-08), 2: np.float64(0.3411587607536283)}\nTree:  (-0.5000000000000863 + (cos(const((x31)**(0.3411587607536283))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000001107), 1: np.float64(7.807366889378549e-10), 2: np.float64(-0.21911103294979695)}\nTree:  (-0.5000000000001107 + (cos(7.807366889378549e-10))**((x11)**((-0.21911103294979695)**(-0.21911103294979695))))', 'Equation constants: {0: np.float64(0.4975763394403532), 1: np.float64(1.079406980330902e-08), 2: np.float64(-1.2506951994740563)}\nTree:  (0.4975763394403532 + (sin(1.079406980330902e-08))**(pow(x11, x21(sin(-1.2506951994740563)), sin(x12))))', 'Equation constants: {0: np.float64(-0.5000000000090732), 1: np.float64(1.6038786105506169e-07), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.5000000000090732 + (cos(1.6038786105506169e-07))**((x11((x26 * x24)))**(x21(sin(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(-0.5000000004070569), 1: np.float64(2.9615914088933672e-06), 2: np.float64(0.39492720437566)}\nTree:  (-0.5000000004070569 + (cos(const((x31)**(0.39492720437566))))**((x11)**(x85)))', 'Equation constants: {0: np.float64(-0.5356601142923957), 1: np.float64(-0.12495546934241902), 2: np.float64(-166.84588200947076), 3: np.float64(-1.1854189611828354)}\nTree:  (-0.5356601142923957 + ((-0.12495546934241902 cos (-1.1854189611828354 * x11)))**((x11 / -166.84588200947076)))', 'Equation constants: {0: np.float64(-0.500000083685509), 1: np.float64(1.771072559439478e-05), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(1.771072559439478e-05), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000000001107), 1: np.float64(7.807366889378549e-10)}\nTree:  (-0.5000000000001107 + (cos(7.807366889378549e-10))**((x11)**(x21(sin(x84)))))', 'Equation constants: {0: np.float64(-0.5000000000089827), 1: np.float64(1.3686215572777206e-06)}\nTree:  (-0.5000000000089827 + (cos(1.3686215572777206e-06))**((x11)**(x86)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.20090830857797304), 8: np.float64(0.8088634713331047)}\nTree:  (const((-0.4121323370138712 cos (0.20090830857797304 / x69))) + pow(cos(-2.2241227138258743e-08), (x11)**(x21), (0.8669610034707098 / const((const(pow(x53, 0.3338681438332669, (0.8088634713331047 / 0.8088634713331047))) / x31)))))', 'Equation constants: {0: np.float64(0.4678542496770382), 1: np.float64(0.13914521698844148), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074)}\nTree:  (0.4678542496770382)**(pow(cos(0.13914521698844148), (x11)**(x21), (x11 / const((1.6487086928786074 / x31((x29 - x12)))))))', 'Equation constants: {0: np.float64(0.4829479209065794), 1: np.float64(0.0856361651451795)}\nTree:  (0.4829479209065794 / (cos(0.0856361651451795))**((x11(cos(x40)))**(x46)))', 'Equation constants: {0: np.float64(0.4975763394541329), 1: np.float64(7.65308107033412e-10), 2: np.float64(-1.2506951994740563)}\nTree:  (0.4975763394541329 + (sin(7.65308107033412e-10))**(pow(x72, x21(sin(-1.2506951994740563)), sin(x12))))', 'Equation constants: {0: np.float64(-0.5000000002671411), 1: np.float64(-1.2236263620284418e-06)}\nTree:  (-0.5000000002671411 + (cos(-1.2236263620284418e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.46787199899888554), 1: np.float64(0.13910770643242537), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(1.9092424935925871)}\nTree:  (0.46787199899888554)**(pow(cos(0.13910770643242537), (x11)**(x21), (x11 / const((1.6487086928786074 / x31((x29 - 1.9092424935925871)))))))', 'Equation constants: {0: np.float64(-0.5000000003045235), 1: np.float64(1.389399795007148e-06), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 6: np.float64(1.0)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(1.389399795007148e-06), (x11)**(x21), (1.0 / const((const((x53)**(x31)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000000005022), 1: np.float64(-3.762686598822815e-07)}\nTree:  (-0.5000000000005022 + (cos(-3.762686598822815e-07))**((x11)**(x85)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(1.968756958612405)}\nTree:  -(-20.108351004437395, -20.60835100444008, sin(x54((1.968756958612405 - 1.968756958612405))))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008)}\nTree:  -(const(cos(x85)), -20.60835100444008, sin(x54))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008)}\nTree:  -(-20.108351004437395, -20.60835100444008, sin(x54), (x56 / x54))', 'Equation constants: {0: np.float64(-0.5000000000176742), 1: np.float64(1.3686213609132412e-06)}\nTree:  (-0.5000000000176742 + (cos(1.3686213609132412e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000123661), 1: np.float64(-3.34661282855028e-07), 2: np.float64(0.39492720437566), 3: np.float64(-1.6064428133686635)}\nTree:  (-0.5000000000123661 + (cos(((x31)**(0.39492720437566) const (-1.6064428133686635 + x58))))**((x11)**(x85)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(1.2103079418644564)}\nTree:  (const((x12)**(1.2103079418644564)) - -20.60835100444008)', 'Equation constants: {0: np.float64(-5.036507610752839), 1: np.float64(-5.536507610752846)}\nTree:  (-5.036507610752839 - -5.536507610752846)', 'Equation constants: {0: np.float64(-0.5000000016589573), 1: np.float64(1.8150447058479416e-05), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.5000000016589573 + (cos(1.8150447058479416e-05))**((x11)**(x21(cos(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(15.344939134707559), 1: np.float64(0.03258400129105692)}\nTree:  *(15.344939134707559, 0.03258400129105692, sin(x54))', 'Equation constants: {0: np.float64(-0.5000000002246033), 1: np.float64(-5.836736920123666e-06)}\nTree:  (-0.5000000002246033 + (cos(-5.836736920123666e-06))**((x11)**(x21(sin(x84)))))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.793833846246979)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(-2.2241227138258743e-08), (x11 * x21), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31))), (1.793833846246979 / 1.793833846246979)))', 'Equation constants: {0: np.float64(100117115.2460563), 1: np.float64(196910777.7331198), 2: np.float64(37552273.39979343)}\nTree:  (100117115.2460563 / ((x67 + 196910777.7331198) + (37552273.39979343 / x48)))', 'Equation constants: {0: np.float64(-0.5000000376871462), 1: np.float64(8.727279129754195e-05)}\nTree:  (-0.5000000376871462 + (cos(8.727279129754195e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.507906332780905), 1: np.float64(-41.00790633278096)}\nTree:  -(const(sin(x57)), -41.00790633278096, sin(x54))']
MSE: [np.float64(0.25000000000001593), np.float64(0.25), np.float64(0.2499538835327816), np.float64(0.24998689056168094), np.float64(0.250005939208811), np.float64(0.25000000000055683), np.float64(0.24995388364892326), np.float64(0.2500000000006223), np.float64(0.2500000000000037), np.float64(0.25), np.float64(42569336652.21114), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000014566), np.float64(0.2500000000000057), np.float64(0.25), np.float64(0.25), np.float64(398306969.0176549), np.float64(0.2500000000203324), np.float64(0.2500000000455827), np.float64(0.250000000003977), np.float64(0.25000000000000006), np.float64(0.24973746949209039), np.float64(0.25000000059492195), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-5.177241761181804, 4.422758238818195), n_g=440, sigma_y=0.02608178993127705, unit=0.9250033152589568)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006624192941691665, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=271, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006624192941691665, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.02222238540342393, unit=1.0284077004989516)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.018518654502853275, unit=0.9255669304490565)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.03129814791753246, unit=1.0175036467848526)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=239, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=271, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-4.561763082737356, 5.438236917262644), n_g=692, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.6557894123645812)', 'Generator(mode=real, range=(-4.958632929644245, 5.041367070355755), n_g=692, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=440, sigma_y=0.02608178993127705, unit=0.9157532821063674)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.004416128627794443, unit=0.5365549737528391)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006624192941691665, unit=0.5961721930587102)', 'Generator(mode=real, range=(-4.561763082737356, 5.438236917262644), n_g=692, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=938, sigma_y=0.02222238540342393, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=271, sigma_y=0.005520160784743054, unit=0.6557894123645812)', 'Generator(mode=real, range=(-4.561763082737356, 5.438236917262644), n_g=692, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.03129814791753246, unit=1.0175036467848526)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.02222238540342393, unit=1.0284077004989516)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=440, sigma_y=0.03129814791753246, unit=1.0175036467848526)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.018518654502853275, unit=0.9255669304490565)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.009936289412537496, unit=0.6557894123645812)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-0.536, 2.536), n_g=271, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=303, sigma_y=0.007949031530029998, unit=0.5961721930587102)', 'Generator(mode=real, range=(-7.2, 7.2), n_g=504, sigma_y=0.03129814791753246, unit=0.9250033152589568)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.6557894123645812)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.03129814791753246, unit=1.0175036467848526)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.004416128627794443, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5.177241761181804, 4.422758238818195), n_g=440, sigma_y=0.02608178993127705, unit=1.0175036467848526)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=504, sigma_y=0.03129814791753246, unit=0.8325029837330612)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=504, sigma_y=0.03129814791753246, unit=0.9250033152589568)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.00828024117711458, unit=0.6557894123645812)']
Gen 11: 23 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(0.46787199899888554), 1: np.float64(0.13910770643242537), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(1.9092424935925871)}\nTree:  (0.46787199899888554)**(pow(cos(0.13910770643242537), (x11)**(x21), (x11 / const((1.6487086928786074 / x31((x29 - 1.9092424935925871)))))))', 'Equation constants: {0: np.float64(-0.5000000003045235), 1: np.float64(1.389399795007148e-06), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 6: np.float64(1.0)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(1.389399795007148e-06), (x11)**(x21), (1.0 / const((const((x53)**(x31)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000000005022), 1: np.float64(-3.762686598822815e-07)}\nTree:  (-0.5000000000005022 + (cos(-3.762686598822815e-07))**((x11)**(x85)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(1.968756958612405)}\nTree:  -(-20.108351004437395, -20.60835100444008, sin(x54((1.968756958612405 - 1.968756958612405))))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008)}\nTree:  -(const(cos(x85)), -20.60835100444008, sin(x54))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008)}\nTree:  -(-20.108351004437395, -20.60835100444008, sin(x54), (x56 / x54))', 'Equation constants: {0: np.float64(-0.5000000000176742), 1: np.float64(1.3686213609132412e-06)}\nTree:  (-0.5000000000176742 + (cos(1.3686213609132412e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000123661), 1: np.float64(-3.34661282855028e-07), 2: np.float64(0.39492720437566), 3: np.float64(-1.6064428133686635)}\nTree:  (-0.5000000000123661 + (cos(((x31)**(0.39492720437566) const (-1.6064428133686635 + x58))))**((x11)**(x85)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(1.2103079418644564)}\nTree:  (const((x12)**(1.2103079418644564)) - -20.60835100444008)', 'Equation constants: {0: np.float64(-5.036507610752839), 1: np.float64(-5.536507610752846)}\nTree:  (-5.036507610752839 - -5.536507610752846)', 'Equation constants: {0: np.float64(-0.5000000016589573), 1: np.float64(1.8150447058479416e-05), 2: np.float64(-1.2506951994740563)}\nTree:  (-0.5000000016589573 + (cos(1.8150447058479416e-05))**((x11)**(x21(cos(-1.2506951994740563)))))', 'Equation constants: {0: np.float64(15.344939134707559), 1: np.float64(0.03258400129105692)}\nTree:  *(15.344939134707559, 0.03258400129105692, sin(x54))', 'Equation constants: {0: np.float64(-0.5000000002246033), 1: np.float64(-5.836736920123666e-06)}\nTree:  (-0.5000000002246033 + (cos(-5.836736920123666e-06))**((x11)**(x21(sin(x84)))))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.793833846246979)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(-2.2241227138258743e-08), (x11 * x21), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31))), (1.793833846246979 / 1.793833846246979)))', 'Equation constants: {0: np.float64(100117115.2460563), 1: np.float64(196910777.7331198), 2: np.float64(37552273.39979343)}\nTree:  (100117115.2460563 / ((x67 + 196910777.7331198) + (37552273.39979343 / x48)))', 'Equation constants: {0: np.float64(-0.5000000376871462), 1: np.float64(8.727279129754195e-05)}\nTree:  (-0.5000000376871462 + (cos(8.727279129754195e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.507906332780905), 1: np.float64(-41.00790633278096)}\nTree:  -(const(sin(x57)), -41.00790633278096, sin(x54))', 'Equation constants: {0: np.float64(15.344939134707559), 1: np.float64(0.03258400129105692)}\nTree:  *(15.344939134707559, 0.03258400129105692, sin(x54))', 'Equation constants: {0: np.float64(0.49757633958311137), 1: np.float64(3.867013396910998e-09), 2: np.float64(-1.2506951994740563), 3: np.float64(-1.2834591473161896)}\nTree:  (0.49757633958311137 + (sin(3.867013396910998e-09))**(pow(x11, x21((-1.2506951994740563 sin sin(-1.2834591473161896))), sin(x12))))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008)}\nTree:  -(-20.108351004437395, -20.60835100444008, sin(x54), (x56(cos(x10)) / x54))', 'Equation constants: {0: np.float64(-4.946846357392694), 1: np.float64(-5.446846357392708)}\nTree:  (-4.946846357392694 - -5.446846357392708)', 'Equation constants: {0: np.float64(-0.5000000000000693), 1: np.float64(8.76758077027261e-08)}\nTree:  +(-0.5000000000000693, (cos(8.76758077027261e-08))**((x11)**(x21)), sin(x79))', 'Equation constants: {0: np.float64(-40.38073970615652), 1: np.float64(-40.88073970615669)}\nTree:  -(-40.38073970615652, -40.88073970615669, sin(x54), (x56 / x54))', 'Equation constants: {0: np.float64(100117115.2460563), 1: np.float64(196910777.7331198), 2: np.float64(37552273.39979343)}\nTree:  (100117115.2460563 / ((x67 + const((x14 sin (x41 * x41)))) + (37552273.39979343 / x48)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.20090830857797304), 8: np.float64(0.8547508195089999)}\nTree:  (const((-0.4121323370138712 cos (0.20090830857797304 / x69))) + pow(cos(-2.2241227138258743e-08), (x11)**(x21), (0.8669610034707098 / const((const(pow(x53, 0.3338681438332669, (0.8547508195089999 / 0.8547508195089999))) / x31)))))', 'Equation constants: {0: np.float64(0.46793518728517897), 1: np.float64(0.11832583913575086)}\nTree:  (0.46793518728517897 / (cos(0.11832583913575086))**((x11)**(x21(sin(x84)))))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.20090830857797304)}\nTree:  (const((-0.4121323370138712 cos (0.20090830857797304 / x69))) + pow(cos(-2.2241227138258743e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.5356601089858841), 1: np.float64(-0.12495551622423133), 2: np.float64(-166.84665320485854), 3: np.float64(-1.1854189611828354)}\nTree:  (-0.5356601089858841 + ((-0.12495551622423133 cos (-1.1854189611828354 * x11)))**((x11 / -166.84665320485854)))', 'Equation constants: {0: np.float64(-0.5356600903026649), 1: np.float64(-0.12495552150194163), 2: np.float64(-166.84715498400138), 3: np.float64(-1.1854189611828354)}\nTree:  (const(cos(x18)) + ((-0.12495552150194163 cos (-1.1854189611828354 * x11)))**((x11 / -166.84715498400138)))', 'Equation constants: {0: np.float64(-0.4999999972216067), 1: np.float64(-0.000110892701731228), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098)}\nTree:  (const(cos(-0.4121323370138712)) + (cos(-0.000110892701731228))**((0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.500000000001303), 1: np.float64(-6.189011397621243e-08)}\nTree:  (-0.500000000001303 + (cos(-6.189011397621243e-08))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.500000000001303), 1: np.float64(-6.189011397621243e-08)}\nTree:  (-0.500000000001303 + (cos(-6.189011397621243e-08))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.4999999785614576), 1: np.float64(7.735315068308317e-05), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (const(cos(x40)) * (cos(7.735315068308317e-05))**((x11)**(x21((1.0 cos sin(1.0))))))', 'Equation constants: {0: np.float64(0.4678542525138852), 1: np.float64(0.13914521102427305), 2: np.float64(-0.6621409606266639), 3: np.float64(1.5704779497418493)}\nTree:  (0.4678542525138852)**(pow(cos(0.13914521102427305), (x11)**(x21), (x11 / const((1.5704779497418493 / x31((x29 - x12)))))))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675), 2: np.float64(-0.9263690417457426)}\nTree:  (const(cos(-0.9263690417457426)) - -2.898409929325675)', 'Equation constants: {0: np.float64(0.4829479032856029), 1: np.float64(0.08563620961181587)}\nTree:  (0.4829479032856029 / (cos(0.08563620961181587))**((x11(cos(x40)))**(x46)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (const(cos(x40(cos(x84)))) + (cos(-2.2241227138258743e-08))**((x11)**(x21((1.0 cos sin(1.0))))))', 'Equation constants: {0: np.float64(-0.5000000000005022), 1: np.float64(-3.762686598822815e-07)}\nTree:  (-0.5000000000005022 + (cos(-3.762686598822815e-07))**((x11)**(x85)))', 'Equation constants: {0: np.float64(-40.507906332780905), 1: np.float64(-41.00790633278096)}\nTree:  -((sin(x57) const sin(x3)), -41.00790633278096, sin(x54))', 'Equation constants: {0: np.float64(-0.5000000000202078), 1: np.float64(-1.146910037709118e-07)}\nTree:  (-0.5000000000202078 + (cos(-1.146910037709118e-07))**((x11)**(x21)))']
MSE: [np.float64(0.2500000000455827), np.float64(0.2500058764266721), np.float64(0.3284973952989425), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000000056), np.float64(0.25), np.float64(0.49992236710100013), np.float64(0.24973746949209039), np.float64(0.25), np.float64(0.24995350996894897), np.float64(0.25), np.float64(0.24865711867985485), np.float64(0.24865711855615086), np.float64(0.25000000000000017), np.float64(0.25000000000000394), np.float64(0.25000000000000394), np.float64(0.25000000019517743), np.float64(0.2499538835327816), np.float64(0.25), np.float64(0.24998689056168086), np.float64(0.25), np.float64(0.2500000000000037), np.float64(0.25), np.float64(0.25000000000004363)]
Generators: ['Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-0.536, 2.536), n_g=271, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=303, sigma_y=0.007949031530029998, unit=0.5961721930587102)', 'Generator(mode=real, range=(-7.2, 7.2), n_g=504, sigma_y=0.03129814791753246, unit=0.9250033152589568)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.6557894123645812)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.03129814791753246, unit=1.0175036467848526)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=303, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.004416128627794443, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5.177241761181804, 4.422758238818195), n_g=440, sigma_y=0.02608178993127705, unit=1.0175036467848526)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=504, sigma_y=0.03129814791753246, unit=0.8325029837330612)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=504, sigma_y=0.03129814791753246, unit=0.9250033152589568)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=970, sigma_y=0.02222238540342393, unit=1.0284077004989516)', 'Generator(mode=real, range=(-0.2288, 2.2288), n_g=271, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=271, sigma_y=0.005520160784743054, unit=0.5902104711281231)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.009936289412537496, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.304, 3.304), n_g=271, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.017777908322739146, unit=1.0284077004989516)', 'Generator(mode=real, range=(-0.2799999999999999, 2.2800000000000002), n_g=938, sigma_y=0.02222238540342393, unit=1.0284077004989516)', 'Generator(mode=real, range=(-4.561763082737356, 5.438236917262644), n_g=692, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=440, sigma_y=0.03129814791753246, unit=1.0175036467848526)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.006624192941691665, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.009936289412537496, unit=0.6557894123645812)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=440, sigma_y=0.03129814791753246, unit=1.0175036467848526)', 'Generator(mode=real, range=(-0.5837527979488841, 2.616247202051116), n_g=938, sigma_y=0.02222238540342393, unit=1.0284077004989516)', 'Generator(mode=real, range=(-5.177241761181804, 4.422758238818195), n_g=440, sigma_y=0.02608178993127705, unit=0.9250033152589568)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.5365549737528391)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=440, sigma_y=0.03129814791753246, unit=0.9157532821063674)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=271, sigma_y=0.006900200980928817, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=239, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.02222238540342393, unit=0.9255669304490565)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.6557894123645812)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.04413675419223752, unit=0.49347157543340825)', 'Generator(mode=real, range=(-4.561763082737356, 5.438236917262644), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)']
Gen 12: 23 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(100117115.2460563), 1: np.float64(196910777.7331198), 2: np.float64(37552273.39979343)}\nTree:  (100117115.2460563 / ((x67 + const((x14 sin (x41 * x41)))) + (37552273.39979343 / x48)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.20090830857797304), 8: np.float64(0.8547508195089999)}\nTree:  (const((-0.4121323370138712 cos (0.20090830857797304 / x69))) + pow(cos(-2.2241227138258743e-08), (x11)**(x21), (0.8669610034707098 / const((const(pow(x53, 0.3338681438332669, (0.8547508195089999 / 0.8547508195089999))) / x31)))))', 'Equation constants: {0: np.float64(0.46793518728517897), 1: np.float64(0.11832583913575086)}\nTree:  (0.46793518728517897 / (cos(0.11832583913575086))**((x11)**(x21(sin(x84)))))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.20090830857797304)}\nTree:  (const((-0.4121323370138712 cos (0.20090830857797304 / x69))) + pow(cos(-2.2241227138258743e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.5356601089858841), 1: np.float64(-0.12495551622423133), 2: np.float64(-166.84665320485854), 3: np.float64(-1.1854189611828354)}\nTree:  (-0.5356601089858841 + ((-0.12495551622423133 cos (-1.1854189611828354 * x11)))**((x11 / -166.84665320485854)))', 'Equation constants: {0: np.float64(-0.5356600903026649), 1: np.float64(-0.12495552150194163), 2: np.float64(-166.84715498400138), 3: np.float64(-1.1854189611828354)}\nTree:  (const(cos(x18)) + ((-0.12495552150194163 cos (-1.1854189611828354 * x11)))**((x11 / -166.84715498400138)))', 'Equation constants: {0: np.float64(-0.4999999972216067), 1: np.float64(-0.000110892701731228), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098)}\nTree:  (const(cos(-0.4121323370138712)) + (cos(-0.000110892701731228))**((0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.500000000001303), 1: np.float64(-6.189011397621243e-08)}\nTree:  (-0.500000000001303 + (cos(-6.189011397621243e-08))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.500000000001303), 1: np.float64(-6.189011397621243e-08)}\nTree:  (-0.500000000001303 + (cos(-6.189011397621243e-08))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.4999999785614576), 1: np.float64(7.735315068308317e-05), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (const(cos(x40)) * (cos(7.735315068308317e-05))**((x11)**(x21((1.0 cos sin(1.0))))))', 'Equation constants: {0: np.float64(0.4678542525138852), 1: np.float64(0.13914521102427305), 2: np.float64(-0.6621409606266639), 3: np.float64(1.5704779497418493)}\nTree:  (0.4678542525138852)**(pow(cos(0.13914521102427305), (x11)**(x21), (x11 / const((1.5704779497418493 / x31((x29 - x12)))))))', 'Equation constants: {0: np.float64(-2.398409929325668), 1: np.float64(-2.898409929325675), 2: np.float64(-0.9263690417457426)}\nTree:  (const(cos(-0.9263690417457426)) - -2.898409929325675)', 'Equation constants: {0: np.float64(0.4829479032856029), 1: np.float64(0.08563620961181587)}\nTree:  (0.4829479032856029 / (cos(0.08563620961181587))**((x11(cos(x40)))**(x46)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (const(cos(x40(cos(x84)))) + (cos(-2.2241227138258743e-08))**((x11)**(x21((1.0 cos sin(1.0))))))', 'Equation constants: {0: np.float64(-0.5000000000005022), 1: np.float64(-3.762686598822815e-07)}\nTree:  (-0.5000000000005022 + (cos(-3.762686598822815e-07))**((x11)**(x85)))', 'Equation constants: {0: np.float64(-40.507906332780905), 1: np.float64(-41.00790633278096)}\nTree:  -((sin(x57) const sin(x3)), -41.00790633278096, sin(x54))', 'Equation constants: {0: np.float64(-0.5000000000202078), 1: np.float64(-1.146910037709118e-07)}\nTree:  (-0.5000000000202078 + (cos(-1.146910037709118e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-1052.9679841673956), 1: np.float64(-2105.9180396280826)}\nTree:  /(-1052.9679841673956, -2105.9180396280826, sin(x54), (x56 / x54))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 6: np.float64(1.0)}\nTree:  (const(cos(x40(cos(x84)))) + (cos(-2.2241227138258743e-08))**((x11)**(x21((x26 cos sin(1.0))))))', 'Equation constants: {0: np.float64(-0.5000000113723577), 1: np.float64(-1.644022069481402e-05), 2: np.float64(0.686912756150869)}\nTree:  (const((x56 + 0.686912756150869)) + (cos(-1.644022069481402e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.4999999999999974), 1: np.float64(4.9868594972047716e-08)}\nTree:  (-0.4999999999999974 + (cos(4.9868594972047716e-08))**((x11((x4)**(x22)))**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000001659), 1: np.float64(1.9845886684697102e-07), 3: np.float64(1.0)}\nTree:  (-0.5000000000001659 + (cos(const((1.0 + x58))))**((x11)**(x85)))', 'Equation constants: {0: np.float64(-0.5000000148806915), 1: np.float64(-7.468459287592346e-05), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (const(cos(x40(cos(x84)))) + (cos(-7.468459287592346e-05))**((x11)**(x21((1.0 cos sin(1.0))))))', 'Equation constants: {0: np.float64(-0.5356600608292407), 1: np.float64(-0.12495553012354034), 2: np.float64(-166.8479505982431), 3: np.float64(-1.1854189611828354)}\nTree:  (-0.5356600608292407 + ((-0.12495553012354034 cos (-1.1854189611828354 * x11)))**((x11 / -166.8479505982431)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(0.3338681438332669)}\nTree:  (const(cos((0.3338681438332669 / x69))) + pow(cos(-2.2241227138258743e-08), (x11)**(x21), (1.0 / const((const((x53)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000003045235), 1: np.float64(1.389399795007148e-06), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 6: np.float64(1.0)}\nTree:  (const(cos(-0.4121323370138712)) + (cos(1.389399795007148e-06))**((1.0 / const((const((x53)**(x31)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000085892534), 1: np.float64(-0.00011291222890972807), 2: np.float64(-0.6621409608085264), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8924669792228146)}\nTree:  (const(cos(-0.4121323370138712)) + (cos(-0.00011291222890972807))**((0.8924669792228146 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(0.4829479032856029), 1: np.float64(0.08563620961181587)}\nTree:  (0.4829479032856029 / (cos(0.08563620961181587))**((x11)**(x46)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.20090830857797304), 8: np.float64(0.8547508195089999)}\nTree:  (const((-0.4121323370138712 cos (0.20090830857797304 / x69))) + pow(cos(-2.2241227138258743e-08), (x11)**(x21), (0.8669610034707098 / const((const(pow(x53, 0.3338681438332669, (0.8547508195089999 / 0.8547508195089999))) / x31)))))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008)}\nTree:  -(const(cos(x40)), -20.60835100444008, sin(x54))', 'Equation constants: {0: np.float64(-0.49999999584492455), 1: np.float64(1.8843100577553145e-05), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (-0.49999999584492455 + (cos(1.8843100577553145e-05))**((1.0 / const((const((x53)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000000202078), 1: np.float64(-1.146910037709118e-07)}\nTree:  (-0.5000000000202078 + (cos(-1.146910037709118e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(1.968756958612405)}\nTree:  -(-20.108351004437395, -20.60835100444008, sin(((1.968756958612405 - 1.968756958612405) x54 cos(x89))))', 'Equation constants: {0: np.float64(-0.5356600609505652), 1: np.float64(-0.12495553033034755), 2: np.float64(-166.84795062666169), 3: np.float64(-1.1854189611828354), 4: np.float64(1.4102665458222612)}\nTree:  (const(cos(x18)) + ((-0.12495553033034755 cos (-1.1854189611828354 * x11((x97 + 1.4102665458222612)))))**((x11 / -166.84795062666169)))', 'Equation constants: {0: np.float64(-0.5000000055798486), 1: np.float64(-8.908376379926734e-06), 2: np.float64(0.1609844296845142)}\nTree:  (-0.5000000055798486 + pow(cos(-8.908376379926734e-06), (x11)**(x21), (0.1609844296845142 - x85)))', 'Equation constants: {0: np.float64(-40.456512789196026), 1: np.float64(-40.95651278919608)}\nTree:  -(-40.456512789196026, -40.95651278919608, sin(x54), (x56(cos(x10)) / x54))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(1.968756958612405), 3: np.float64(-1.5717904913924339)}\nTree:  -(-20.108351004437395, -20.60835100444008, (x54((1.968756958612405 - 1.968756958612405)) sin sin(-1.5717904913924339)))', 'Equation constants: {0: np.float64(-0.5000000000004322), 1: np.float64(-2.7142069076247316e-08), 2: np.float64(-1.3811060805118345)}\nTree:  (-0.5000000000004322 + (cos(-2.7142069076247316e-08))**((x11(sin(-1.3811060805118345)))**(x21)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(1.0)}\nTree:  (const(cos(x40(cos(x84)))) + (cos(-2.2241227138258743e-08))**((x11)**(x21((1.0 cos sin(const((1.0 / x55))))))))', 'Equation constants: {0: np.float64(-40.57939630211056), 1: np.float64(-41.07939630210774)}\nTree:  -(-40.57939630211056, -41.07939630210774, sin(x54), (x56 / x54))']
MSE: [np.float64(0.25000000007265416), np.float64(0.25), np.float64(0.2500000000170232), np.float64(0.25), np.float64(0.25), np.float64(0.2500000003750957), np.float64(0.8085346506616993), np.float64(0.2486571184999246), np.float64(0.25), np.float64(0.25), np.float64(43320214742.66723), np.float64(0.25), np.float64(0.24998689056168086), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000004363), np.float64(0.25), np.float64(0.2486571184999236), np.float64(0.25000000002278505), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.009936289412537496, unit=0.6557894123645812)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=440, sigma_y=0.03129814791753246, unit=1.0175036467848526)', 'Generator(mode=real, range=(-0.5837527979488841, 2.616247202051116), n_g=938, sigma_y=0.02222238540342393, unit=1.0284077004989516)', 'Generator(mode=real, range=(-5.177241761181804, 4.422758238818195), n_g=440, sigma_y=0.02608178993127705, unit=0.9250033152589568)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.5365549737528391)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=440, sigma_y=0.03129814791753246, unit=0.9157532821063674)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=271, sigma_y=0.006900200980928817, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=239, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=938, sigma_y=0.02222238540342393, unit=0.9255669304490565)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.6557894123645812)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.04413675419223752, unit=0.49347157543340825)', 'Generator(mode=real, range=(-4.561763082737356, 5.438236917262644), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-0.2799999999999999, 2.2800000000000002), n_g=938, sigma_y=0.02222238540342393, unit=0.9255669304490565)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.035309403353790014, unit=0.49347157543340825)', 'Generator(mode=real, range=(-2.135559531651597, 3.6244404683484026), n_g=303, sigma_y=0.007949031530029998, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=970, sigma_y=0.02222238540342393, unit=1.1312484705488468)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.6557894123645812)', 'Generator(mode=real, range=(-7.2, 7.2), n_g=504, sigma_y=0.03755777750103895, unit=0.9250033152589568)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=303, sigma_y=0.009936289412537496, unit=0.6557894123645812)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=660, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-0.5359999999999999, 2.5360000000000005), n_g=938, sigma_y=0.02222238540342393, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.006624192941691665, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.009936289412537496, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=239, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.9566152937794212, 3.043384706220579), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=303, sigma_y=0.007949031530029998, unit=0.5961721930587102)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=504, sigma_y=0.03129814791753246, unit=0.8325029837330612)', 'Generator(mode=real, range=(-0.536, 2.536), n_g=239, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05296410503068502, unit=0.6031319255297213)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.5365549737528391)', 'Generator(mode=real, range=(-0.2799999999999999, 2.2800000000000002), n_g=938, sigma_y=0.017777908322739146, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.006624192941691665, unit=0.6557894123645812)']
Gen 13: 23 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.5356600608292407), 1: np.float64(-0.12495553012354034), 2: np.float64(-166.8479505982431), 3: np.float64(-1.1854189611828354)}\nTree:  (-0.5356600608292407 + ((-0.12495553012354034 cos (-1.1854189611828354 * x11)))**((x11 / -166.8479505982431)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(0.3338681438332669)}\nTree:  (const(cos((0.3338681438332669 / x69))) + pow(cos(-2.2241227138258743e-08), (x11)**(x21), (1.0 / const((const((x53)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000003045235), 1: np.float64(1.389399795007148e-06), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 6: np.float64(1.0)}\nTree:  (const(cos(-0.4121323370138712)) + (cos(1.389399795007148e-06))**((1.0 / const((const((x53)**(x31)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000085892534), 1: np.float64(-0.00011291222890972807), 2: np.float64(-0.6621409608085264), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8924669792228146)}\nTree:  (const(cos(-0.4121323370138712)) + (cos(-0.00011291222890972807))**((0.8924669792228146 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(0.4829479032856029), 1: np.float64(0.08563620961181587)}\nTree:  (0.4829479032856029 / (cos(0.08563620961181587))**((x11)**(x46)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.20090830857797304), 8: np.float64(0.8547508195089999)}\nTree:  (const((-0.4121323370138712 cos (0.20090830857797304 / x69))) + pow(cos(-2.2241227138258743e-08), (x11)**(x21), (0.8669610034707098 / const((const(pow(x53, 0.3338681438332669, (0.8547508195089999 / 0.8547508195089999))) / x31)))))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008)}\nTree:  -(const(cos(x40)), -20.60835100444008, sin(x54))', 'Equation constants: {0: np.float64(-0.49999999584492455), 1: np.float64(1.8843100577553145e-05), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (-0.49999999584492455 + (cos(1.8843100577553145e-05))**((1.0 / const((const((x53)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000000202078), 1: np.float64(-1.146910037709118e-07)}\nTree:  (-0.5000000000202078 + (cos(-1.146910037709118e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(1.968756958612405)}\nTree:  -(-20.108351004437395, -20.60835100444008, sin(((1.968756958612405 - 1.968756958612405) x54 cos(x89))))', 'Equation constants: {0: np.float64(-0.5356600609505652), 1: np.float64(-0.12495553033034755), 2: np.float64(-166.84795062666169), 3: np.float64(-1.1854189611828354), 4: np.float64(1.4102665458222612)}\nTree:  (const(cos(x18)) + ((-0.12495553033034755 cos (-1.1854189611828354 * x11((x97 + 1.4102665458222612)))))**((x11 / -166.84795062666169)))', 'Equation constants: {0: np.float64(-0.5000000055798486), 1: np.float64(-8.908376379926734e-06), 2: np.float64(0.1609844296845142)}\nTree:  (-0.5000000055798486 + pow(cos(-8.908376379926734e-06), (x11)**(x21), (0.1609844296845142 - x85)))', 'Equation constants: {0: np.float64(-40.456512789196026), 1: np.float64(-40.95651278919608)}\nTree:  -(-40.456512789196026, -40.95651278919608, sin(x54), (x56(cos(x10)) / x54))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(1.968756958612405), 3: np.float64(-1.5717904913924339)}\nTree:  -(-20.108351004437395, -20.60835100444008, (x54((1.968756958612405 - 1.968756958612405)) sin sin(-1.5717904913924339)))', 'Equation constants: {0: np.float64(-0.5000000000004322), 1: np.float64(-2.7142069076247316e-08), 2: np.float64(-1.3811060805118345)}\nTree:  (-0.5000000000004322 + (cos(-2.7142069076247316e-08))**((x11(sin(-1.3811060805118345)))**(x21)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(1.0)}\nTree:  (const(cos(x40(cos(x84)))) + (cos(-2.2241227138258743e-08))**((x11)**(x21((1.0 cos sin(const((1.0 / x55))))))))', 'Equation constants: {0: np.float64(-40.57939630211056), 1: np.float64(-41.07939630210774)}\nTree:  -(-40.57939630211056, -41.07939630210774, sin(x54), (x56 / x54))', 'Equation constants: {0: np.float64(-0.5000000003823699), 1: np.float64(3.689877983848796e-06), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.20090830857797304)}\nTree:  (const((-0.4121323370138712 cos (0.20090830857797304 / x69))) + pow(cos(3.689877983848796e-06), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000000003676), 1: np.float64(4.518284133657351e-09)}\nTree:  (-0.5000000000003676 + (cos(4.518284133657351e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000865393082), 1: np.float64(1.1566865720173247e-07)}\nTree:  (-0.5000000865393082 + (cos(1.1566865720173247e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.4999999999999974), 1: np.float64(4.9868594972047716e-08), 2: np.float64(0.5911804474289459)}\nTree:  (-0.4999999999999974 + (cos(const(cos(0.5911804474289459))))**((x11((x4)**(x22)))**(x21)))', 'Equation constants: {0: np.float64(-0.500000007968855), 1: np.float64(-4.409636780532863e-06)}\nTree:  (-0.500000007968855 + (cos(-4.409636780532863e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000005184), 1: np.float64(-1.591690018052153e-07), 3: np.float64(1.0), 4: np.float64(1.0)}\nTree:  (-0.5000000000005184 + (cos(const((1.0 + x58((1.0 + x27))))))**((x11)**(x85)))', 'Equation constants: {0: np.float64(0.4999999999727545), 1: np.float64(-3.6811077197517552e-06), 6: np.float64(1.0)}\nTree:  (const(cos(x40)) * (cos(-3.6811077197517552e-06))**((x11)**(x21(cos(sin(1.0))))))', 'Equation constants: {0: np.float64(-5.120381610033386), 1: np.float64(-5.620381610033392), 2: np.float64(-0.9263690417457426)}\nTree:  (const(cos(-0.9263690417457426)) - -5.620381610033392)', 'Equation constants: {0: np.float64(-0.49999999584492455), 1: np.float64(1.8843100577553145e-05), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (-0.49999999584492455 + (cos(1.8843100577553145e-05))**((1.0 / const((const((x53)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(0.49999999993047756), 1: np.float64(-6.570198623007712e-06)}\nTree:  (const(cos(x40)) * (cos(-6.570198623007712e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.535660061506582), 1: np.float64(-0.12495552947609766), 2: np.float64(-166.84792618527388), 3: np.float64(-1.1854189611828354)}\nTree:  (-0.535660061506582 + ((-0.12495552947609766 cos (-1.1854189611828354)**(x11)))**((x11 / -166.84792618527388)))', 'Equation constants: {0: np.float64(0.4829479032856029), 1: np.float64(0.08563620961181587)}\nTree:  (0.4829479032856029 / (cos(0.08563620961181587))**((x11)**(x46)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(1.968756958612405), 3: np.float64(-0.6581201919166655)}\nTree:  -(-20.108351004437395, -20.60835100444008, sin(((1.968756958612405 - 1.968756958612405) x54 cos(x89((-0.6581201919166655 / -0.6581201919166655))))))', 'Equation constants: {0: np.float64(-4211.85037897602), 1: np.float64(-8423.68293739723)}\nTree:  /(-4211.85037897602, -8423.68293739723, sin(x57), (x56 / x54))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(1.968756958612405), 3: np.float64(-1.5717904913924339)}\nTree:  -(-20.108351004437395, -20.60835100444008, (x54((1.968756958612405 - 1.968756958612405)) sin sin(-1.5717904913924339)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 6: np.float64(1.0), 7: np.float64(1.0), 8: np.float64(0.8669610034707098)}\nTree:  (const((-0.4121323370138712 cos (1.0 / x69))) + pow(cos(-2.2241227138258743e-08), (x11)**(x21), (1.0 / const((const(pow(x53, x78, (0.8669610034707098 / 0.8669610034707098))) / x31)))))', 'Equation constants: {0: np.float64(100117115.2460563), 1: np.float64(196910777.7331198), 2: np.float64(37552273.39979343), 3: np.float64(-0.8524743675147644)}\nTree:  (const((x71 / -0.8524743675147644)) / ((x67 + const((x14 sin (x41 * x41)))) + (37552273.39979343 / x48)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(-1.2902391662584551)}\nTree:  -(const(cos(x40)), -20.60835100444008, sin(x54(cos(-1.2902391662584551))))', 'Equation constants: {0: np.float64(0.4829479032856029), 1: np.float64(0.08563620961181587)}\nTree:  (0.4829479032856029 / (cos(0.08563620961181587))**((x11(cos(x69)))**(x46)))', 'Equation constants: {0: np.float64(100117115.2460563), 1: np.float64(196910777.7331198), 2: np.float64(37552273.39979343)}\nTree:  (100117115.2460563 / ((x67 + const((x14 sin (x63 * x41)))) + (37552273.39979343 / x48)))', 'Equation constants: {0: np.float64(-0.5000000000003676), 1: np.float64(4.518284133657351e-09)}\nTree:  (-0.5000000000003676 + (cos(4.518284133657351e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(const(cos(x40)), -41.068455720264296, sin(x54))', 'Equation constants: {0: np.float64(-0.4999999972216067), 1: np.float64(-0.000110892701731228), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.23073554885599412)}\nTree:  (const(cos(-0.4121323370138712)) + ((-0.000110892701731228 cos (0.23073554885599412 - x0)))**((0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))']
MSE: [np.float64(0.2500000000058575), np.float64(0.7299044115846999), np.float64(0.25), np.float64(0.2500000002036725), np.float64(0.4999971451618986), np.float64(0.25), np.float64(0.25000000000935646), np.float64(0.2500000000000001), np.float64(0.25000000000056366), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000136824), np.float64(0.24865711852208416), np.float64(0.24998689056168086), np.float64(0.25), np.float64(0.2500000000045062), np.float64(0.25), np.float64(0.25), np.float64(0.24973746949209039), np.float64(0.25), np.float64(0.24998689056168086), np.float64(0.24973746949209039), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000000017)]
Generators: ['Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.006624192941691665, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.009936289412537496, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=239, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.9566152937794212, 3.043384706220579), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=303, sigma_y=0.007949031530029998, unit=0.5961721930587102)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=504, sigma_y=0.03129814791753246, unit=0.8325029837330612)', 'Generator(mode=real, range=(-0.536, 2.536), n_g=239, sigma_y=0.006900200980928817, unit=0.5961721930587102)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05296410503068502, unit=0.6031319255297213)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.5365549737528391)', 'Generator(mode=real, range=(-0.2799999999999999, 2.2800000000000002), n_g=938, sigma_y=0.017777908322739146, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.006624192941691665, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=239, sigma_y=0.00828024117711458, unit=0.5961721930587102)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=970, sigma_y=0.02222238540342393, unit=1.1312484705488468)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=271, sigma_y=0.007949031530029998, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.009936289412537496, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.5365549737528391)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=303, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.2799999999999999, 2.2800000000000002), n_g=938, sigma_y=0.02222238540342393, unit=0.9255669304490565)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-6.256064910662758, 5.743935089337242), n_g=504, sigma_y=0.03129814791753246, unit=0.8325029837330612)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.012861823364613244, unit=1.0020774944786415)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=970, sigma_y=0.02222238540342393, unit=1.1312484705488468)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.5365549737528391)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=440, sigma_y=0.03129814791753246, unit=1.0073286103170043)', 'Generator(mode=real, range=(-0.5359999999999999, 2.5360000000000005), n_g=938, sigma_y=0.02222238540342393, unit=1.0284077004989516)', 'Generator(mode=real, range=(-7.2, 7.2), n_g=504, sigma_y=0.03755777750103895, unit=1.0175036467848526)', 'Generator(mode=real, range=(-3.5617630827373556, 4.438236917262644), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=692, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.006624192941691665, unit=0.6557894123645812)', 'Generator(mode=real, range=(-5, 5), n_g=628, sigma_y=0.04413675419223752, unit=0.49347157543340825)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=239, sigma_y=0.006900200980928817, unit=0.6557894123645812)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=440, sigma_y=0.02503851833402597, unit=1.0175036467848526)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)']
Gen 14: 22 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.5000000000005184), 1: np.float64(-1.591690018052153e-07), 3: np.float64(1.0), 4: np.float64(1.0)}\nTree:  (-0.5000000000005184 + (cos(const((1.0 + x58((1.0 + x27))))))**((x11)**(x85)))', 'Equation constants: {0: np.float64(0.4999999999727545), 1: np.float64(-3.6811077197517552e-06), 6: np.float64(1.0)}\nTree:  (const(cos(x40)) * (cos(-3.6811077197517552e-06))**((x11)**(x21(cos(sin(1.0))))))', 'Equation constants: {0: np.float64(-5.120381610033386), 1: np.float64(-5.620381610033392), 2: np.float64(-0.9263690417457426)}\nTree:  (const(cos(-0.9263690417457426)) - -5.620381610033392)', 'Equation constants: {0: np.float64(-0.49999999584492455), 1: np.float64(1.8843100577553145e-05), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (-0.49999999584492455 + (cos(1.8843100577553145e-05))**((1.0 / const((const((x53)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(0.49999999993047756), 1: np.float64(-6.570198623007712e-06)}\nTree:  (const(cos(x40)) * (cos(-6.570198623007712e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.535660061506582), 1: np.float64(-0.12495552947609766), 2: np.float64(-166.84792618527388), 3: np.float64(-1.1854189611828354)}\nTree:  (-0.535660061506582 + ((-0.12495552947609766 cos (-1.1854189611828354)**(x11)))**((x11 / -166.84792618527388)))', 'Equation constants: {0: np.float64(0.4829479032856029), 1: np.float64(0.08563620961181587)}\nTree:  (0.4829479032856029 / (cos(0.08563620961181587))**((x11)**(x46)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(1.968756958612405), 3: np.float64(-0.6581201919166655)}\nTree:  -(-20.108351004437395, -20.60835100444008, sin(((1.968756958612405 - 1.968756958612405) x54 cos(x89((-0.6581201919166655 / -0.6581201919166655))))))', 'Equation constants: {0: np.float64(-4211.85037897602), 1: np.float64(-8423.68293739723)}\nTree:  /(-4211.85037897602, -8423.68293739723, sin(x57), (x56 / x54))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(1.968756958612405), 3: np.float64(-1.5717904913924339)}\nTree:  -(-20.108351004437395, -20.60835100444008, (x54((1.968756958612405 - 1.968756958612405)) sin sin(-1.5717904913924339)))', 'Equation constants: {0: np.float64(-0.500000000000007), 1: np.float64(-2.2241227138258743e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 6: np.float64(1.0), 7: np.float64(1.0), 8: np.float64(0.8669610034707098)}\nTree:  (const((-0.4121323370138712 cos (1.0 / x69))) + pow(cos(-2.2241227138258743e-08), (x11)**(x21), (1.0 / const((const(pow(x53, x78, (0.8669610034707098 / 0.8669610034707098))) / x31)))))', 'Equation constants: {0: np.float64(100117115.2460563), 1: np.float64(196910777.7331198), 2: np.float64(37552273.39979343), 3: np.float64(-0.8524743675147644)}\nTree:  (const((x71 / -0.8524743675147644)) / ((x67 + const((x14 sin (x41 * x41)))) + (37552273.39979343 / x48)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(-1.2902391662584551)}\nTree:  -(const(cos(x40)), -20.60835100444008, sin(x54(cos(-1.2902391662584551))))', 'Equation constants: {0: np.float64(0.4829479032856029), 1: np.float64(0.08563620961181587)}\nTree:  (0.4829479032856029 / (cos(0.08563620961181587))**((x11(cos(x69)))**(x46)))', 'Equation constants: {0: np.float64(100117115.2460563), 1: np.float64(196910777.7331198), 2: np.float64(37552273.39979343)}\nTree:  (100117115.2460563 / ((x67 + const((x14 sin (x63 * x41)))) + (37552273.39979343 / x48)))', 'Equation constants: {0: np.float64(-0.5000000000003676), 1: np.float64(4.518284133657351e-09)}\nTree:  (-0.5000000000003676 + (cos(4.518284133657351e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(const(cos(x40)), -41.068455720264296, sin(x54))', 'Equation constants: {0: np.float64(-0.4999999972216067), 1: np.float64(-0.000110892701731228), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.23073554885599412)}\nTree:  (const(cos(-0.4121323370138712)) + ((-0.000110892701731228 cos (0.23073554885599412 - x0)))**((0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000000003676), 1: np.float64(4.518284133657351e-09)}\nTree:  (-0.5000000000003676 + (cos(4.518284133657351e-09))**((x11 * x21)))', 'Equation constants: {0: np.float64(0.4829480003782187), 1: np.float64(-0.08563596713523694)}\nTree:  (0.4829480003782187 / (cos(-0.08563596713523694))**((x11(cos(x69)))**(x46)))', 'Equation constants: {0: np.float64(-999999.5242159348), 1: np.float64(-0.253908073621895), 2: np.float64(-166.84792618527388), 3: np.float64(-1.1854189611828354)}\nTree:  (-999999.5242159348 + ((-0.253908073621895 sin (-1.1854189611828354)**(x11)))**((x11 / -166.84792618527388)))', 'Equation constants: {0: np.float64(-40.57939630211056), 1: np.float64(-41.07939630210774)}\nTree:  -(-40.57939630211056, -41.07939630210774, sin(x54), (x88 / x54))', 'Equation constants: {0: np.float64(-40.471152178157375), 1: np.float64(-40.971152178157425), 2: np.float64(1.968756958612405), 3: np.float64(-0.6581201919166655)}\nTree:  -(-40.471152178157375, -40.971152178157425, sin(((1.968756958612405 - 1.968756958612405) x54 cos(x89((-0.6581201919166655 / -0.6581201919166655))))))', 'Equation constants: {0: np.float64(-0.5000000000042967), 1: np.float64(1.2352898936935563e-07)}\nTree:  (-0.5000000000042967 + (cos(1.2352898936935563e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000155991), 1: np.float64(-5.949432720097369e-07)}\nTree:  (-0.5000000000155991 + (cos(-5.949432720097369e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.5067809653180773), 1: np.float64(-7.845758503691156), 2: np.float64(-9.416419327642801), 3: np.float64(-1.1854189611828354), 4: np.float64(1.4102665458222612)}\nTree:  (const(cos(x18)) + ((-7.845758503691156 cos (-1.1854189611828354 * x11((x97 + 1.4102665458222612)))) / (x11 / -9.416419327642801)))', 'Equation constants: {0: np.float64(0.49999996632084726), 1: np.float64(-2.9570834828619282e-05)}\nTree:  (const(cos(x40)) * (cos(-2.9570834828619282e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.456512789196026), 1: np.float64(-40.95651278919608)}\nTree:  -(-40.456512789196026, -40.95651278919608, sin(x54), (x56 / x54))', 'Equation constants: {0: np.float64(0.5000000008530003), 1: np.float64(-3.713162457062236e-07)}\nTree:  *(const(cos(x40)), (cos(-3.713162457062236e-07))**((x11)**(x21)), (x18 * x8))', 'Equation constants: {0: np.float64(-0.5000000318805372), 1: np.float64(9.369002925642521e-05)}\nTree:  (-0.5000000318805372 + (cos(9.369002925642521e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(100117115.2460563), 1: np.float64(196910777.7331198), 2: np.float64(37552273.39979343), 3: np.float64(-0.8524743675147644)}\nTree:  (const((x71 / -0.8524743675147644)) / ((x67 + 196910777.7331198) + (37552273.39979343 / x48)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008)}\nTree:  (-20.108351004437395 - -20.60835100444008)', 'Equation constants: {0: np.float64(-0.5000000000185565), 1: np.float64(-3.2897995691258935e-07), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(-3.2897995691258935e-07), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.5356600733936366), 1: np.float64(0.12495552499135258), 2: np.float64(-166.84759527161987), 3: np.float64(-1.1854189611828354)}\nTree:  (-0.5356600733936366 + ((0.12495552499135258 cos (-1.1854189611828354)**(x11)))**((x11 / -166.84759527161987)))', 'Equation constants: {0: np.float64(-0.5356600590757461), 1: np.float64(-0.1249555308112444), 2: np.float64(-166.848000324367), 3: np.float64(-1.2005509929490294)}\nTree:  (-0.5356600590757461 + ((-0.1249555308112444 cos (-1.2005509929490294 * x11)))**((x11 / -166.848000324367)))', 'Equation constants: {0: np.float64(-0.5000000030029496), 1: np.float64(-7.925566633587278e-06), 2: np.float64(0.5911804474289459)}\nTree:  (-0.5000000030029496 + (cos(const(cos(0.5911804474289459))))**((x11((x4)**(x22)))**(x21)))', 'Equation constants: {0: np.float64(-0.4989292187097641), 1: np.float64(0.09885168709862709)}\nTree:  (-0.4989292187097641 + (cos(0.09885168709862709))**((x11 - x21)))', 'Equation constants: {0: np.float64(-0.5000000085892534), 1: np.float64(-0.00011291222890972807), 2: np.float64(-0.6621409608085264), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (-0.5000000085892534 + (cos(-0.00011291222890972807))**((1.0 / const((const((x53)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029)}\nTree:  /(-5528.044501875671, -11056.08841564029, sin(x57), (x56 - x54))', 'Equation constants: {0: np.float64(0.4999999999999423), 1: np.float64(-2.1582651912555773e-07), 6: np.float64(1.0)}\nTree:  (const(cos(x40)) * (cos(-2.1582651912555773e-07))**((x11)**(x21(cos(cos(1.0))))))']
MSE: [np.float64(0.25), np.float64(0.24998689056168114), np.float64(0.48947619962582384), np.float64(0.2488633486052491), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000000167), np.float64(0.25000000000002337), np.float64(0.24977158151806905), np.float64(0.25000000005808476), np.float64(0.25), np.float64(0.2500000000000076), np.float64(0.2500000006319373), np.float64(41817094331.8702), np.float64(0.24973746949209039), np.float64(332111929.6984402), np.float64(0.25), np.float64(0.2500000000000383), np.float64(0.2486571185686201), np.float64(0.24865711849114192), np.float64(0.2500000000053028), np.float64(0.2486578430739781), np.float64(0.2500000000000001), np.float64(0.25000000000012085), np.float64(0.2500000000000023)]
Generators: ['Generator(mode=real, range=(-0.92, 2.92), n_g=970, sigma_y=0.02222238540342393, unit=1.1312484705488468)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.5365549737528391)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=440, sigma_y=0.03129814791753246, unit=1.0073286103170043)', 'Generator(mode=real, range=(-0.5359999999999999, 2.5360000000000005), n_g=938, sigma_y=0.02222238540342393, unit=1.0284077004989516)', 'Generator(mode=real, range=(-7.2, 7.2), n_g=504, sigma_y=0.03755777750103895, unit=1.0175036467848526)', 'Generator(mode=real, range=(-3.5617630827373556, 4.438236917262644), n_g=660, sigma_y=0.04413675419223752, unit=0.5483017504815647)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=692, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=303, sigma_y=0.005520160784743054, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.006624192941691665, unit=0.6557894123645812)', 'Generator(mode=real, range=(-5, 5), n_g=628, sigma_y=0.04413675419223752, unit=0.49347157543340825)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=239, sigma_y=0.006900200980928817, unit=0.6557894123645812)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=440, sigma_y=0.02503851833402597, unit=1.0175036467848526)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-6.256064910662758, 5.743935089337242), n_g=504, sigma_y=0.03129814791753246, unit=0.9157532821063674)', 'Generator(mode=real, range=(-1, 3), n_g=700, sigma_y=0.012861823364613244, unit=0.9018697450307773)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=303, sigma_y=0.007949031530029998, unit=0.5961721930587102)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=239, sigma_y=0.00828024117711458, unit=0.5961721930587102)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.03129814791753246, unit=1.0073286103170043)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05296410503068502, unit=0.6634451180826935)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.006624192941691665, unit=0.6557894123645812)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=504, sigma_y=0.03129814791753246, unit=0.7492526853597551)', 'Generator(mode=real, range=(-1.1675750308211792, 2.6724249691788207), n_g=970, sigma_y=0.02222238540342393, unit=1.1312484705488468)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=303, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.2799999999999999, 2.2800000000000002), n_g=938, sigma_y=0.014222326658191318, unit=1.0284077004989516)', 'Generator(mode=real, range=(-7.2, 7.2), n_g=472, sigma_y=0.03755777750103895, unit=1.0175036467848526)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=303, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=692, sigma_y=0.06355692603682202, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.2799999999999999, 2.2800000000000002), n_g=938, sigma_y=0.02222238540342393, unit=0.9255669304490565)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=303, sigma_y=0.007949031530029998, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=440, sigma_y=0.02503851833402597, unit=1.0175036467848526)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.5311894240153108)']
Gen 15: 20 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-999999.5242159348), 1: np.float64(-0.253908073621895), 2: np.float64(-166.84792618527388), 3: np.float64(-1.1854189611828354)}\nTree:  (-999999.5242159348 + ((-0.253908073621895 sin (-1.1854189611828354)**(x11)))**((x11 / -166.84792618527388)))', 'Equation constants: {0: np.float64(-40.57939630211056), 1: np.float64(-41.07939630210774)}\nTree:  -(-40.57939630211056, -41.07939630210774, sin(x54), (x88 / x54))', 'Equation constants: {0: np.float64(-40.471152178157375), 1: np.float64(-40.971152178157425), 2: np.float64(1.968756958612405), 3: np.float64(-0.6581201919166655)}\nTree:  -(-40.471152178157375, -40.971152178157425, sin(((1.968756958612405 - 1.968756958612405) x54 cos(x89((-0.6581201919166655 / -0.6581201919166655))))))', 'Equation constants: {0: np.float64(-0.5000000000042967), 1: np.float64(1.2352898936935563e-07)}\nTree:  (-0.5000000000042967 + (cos(1.2352898936935563e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000155991), 1: np.float64(-5.949432720097369e-07)}\nTree:  (-0.5000000000155991 + (cos(-5.949432720097369e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.5067809653180773), 1: np.float64(-7.845758503691156), 2: np.float64(-9.416419327642801), 3: np.float64(-1.1854189611828354), 4: np.float64(1.4102665458222612)}\nTree:  (const(cos(x18)) + ((-7.845758503691156 cos (-1.1854189611828354 * x11((x97 + 1.4102665458222612)))) / (x11 / -9.416419327642801)))', 'Equation constants: {0: np.float64(0.49999996632084726), 1: np.float64(-2.9570834828619282e-05)}\nTree:  (const(cos(x40)) * (cos(-2.9570834828619282e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.456512789196026), 1: np.float64(-40.95651278919608)}\nTree:  -(-40.456512789196026, -40.95651278919608, sin(x54), (x56 / x54))', 'Equation constants: {0: np.float64(0.5000000008530003), 1: np.float64(-3.713162457062236e-07)}\nTree:  *(const(cos(x40)), (cos(-3.713162457062236e-07))**((x11)**(x21)), (x18 * x8))', 'Equation constants: {0: np.float64(-0.5000000318805372), 1: np.float64(9.369002925642521e-05)}\nTree:  (-0.5000000318805372 + (cos(9.369002925642521e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(100117115.2460563), 1: np.float64(196910777.7331198), 2: np.float64(37552273.39979343), 3: np.float64(-0.8524743675147644)}\nTree:  (const((x71 / -0.8524743675147644)) / ((x67 + 196910777.7331198) + (37552273.39979343 / x48)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008)}\nTree:  (-20.108351004437395 - -20.60835100444008)', 'Equation constants: {0: np.float64(-0.5000000000185565), 1: np.float64(-3.2897995691258935e-07), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(-3.2897995691258935e-07), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.5356600733936366), 1: np.float64(0.12495552499135258), 2: np.float64(-166.84759527161987), 3: np.float64(-1.1854189611828354)}\nTree:  (-0.5356600733936366 + ((0.12495552499135258 cos (-1.1854189611828354)**(x11)))**((x11 / -166.84759527161987)))', 'Equation constants: {0: np.float64(-0.5356600590757461), 1: np.float64(-0.1249555308112444), 2: np.float64(-166.848000324367), 3: np.float64(-1.2005509929490294)}\nTree:  (-0.5356600590757461 + ((-0.1249555308112444 cos (-1.2005509929490294 * x11)))**((x11 / -166.848000324367)))', 'Equation constants: {0: np.float64(-0.5000000030029496), 1: np.float64(-7.925566633587278e-06), 2: np.float64(0.5911804474289459)}\nTree:  (-0.5000000030029496 + (cos(const(cos(0.5911804474289459))))**((x11((x4)**(x22)))**(x21)))', 'Equation constants: {0: np.float64(-0.4989292187097641), 1: np.float64(0.09885168709862709)}\nTree:  (-0.4989292187097641 + (cos(0.09885168709862709))**((x11 - x21)))', 'Equation constants: {0: np.float64(-0.5000000085892534), 1: np.float64(-0.00011291222890972807), 2: np.float64(-0.6621409608085264), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (-0.5000000085892534 + (cos(-0.00011291222890972807))**((1.0 / const((const((x53)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029)}\nTree:  /(-5528.044501875671, -11056.08841564029, sin(x57), (x56 - x54))', 'Equation constants: {0: np.float64(0.4999999999999423), 1: np.float64(-2.1582651912555773e-07), 6: np.float64(1.0)}\nTree:  (const(cos(x40)) * (cos(-2.1582651912555773e-07))**((x11)**(x21(cos(cos(1.0))))))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029)}\nTree:  /(-5528.044501875671, -11056.08841564029, sin(x57))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008)}\nTree:  (-20.108351004437395 - -20.60835100444008)', 'Equation constants: {0: np.float64(-0.5000000000001299), 1: np.float64(6.145523889679908e-08)}\nTree:  (-0.5000000000001299 + (cos(const(cos(x72))))**((x11((x4)**(x22)))**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000003676), 1: np.float64(4.518284133657351e-09)}\nTree:  (-0.5000000000003676 + (cos(4.518284133657351e-09))**((x11((x52)**(x93)) * x21)))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029), 2: np.float64(-1.1072371325317434)}\nTree:  /(-5528.044501875671, -11056.08841564029, sin(x57((-1.1072371325317434)**(-1.1072371325317434))), (x56 - x54))', 'Equation constants: {0: np.float64(-0.5000000000001299), 1: np.float64(4.319699890366936e-09)}\nTree:  (-0.5000000000001299 + (cos(const((x34 / x13))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.500000000000114), 1: np.float64(-6.06024928549738e-08), 2: np.float64(0.9148704781282113)}\nTree:  *(const(cos(x40((0.9148704781282113 / x1)))), (cos(-6.06024928549738e-08))**((x11)**(x21)), (x18 * x8))', 'Equation constants: {0: np.float64(-0.49999999999999495), 1: np.float64(6.145247585768602e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(6.145247585768602e-08), (x11)**(x21), (0.8669610034707098 / const((((x53)**(0.3338681438332669) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(100117115.2460563), 1: np.float64(196910777.7331198), 2: np.float64(37552273.454634994), 3: np.float64(-0.8524743675147644)}\nTree:  (const((x71 / -0.8524743675147644)) / ((x67 + 196910777.7331198) + (37552273.454634994 / x48)))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029)}\nTree:  /(-5528.044501875671, -11056.08841564029, cos(x57), (x56 / x54))', 'Equation constants: {0: np.float64(-5.120381610033386), 1: np.float64(-5.620381610033392), 2: np.float64(-0.9263690417457426), 3: np.float64(1.7567414071343048)}\nTree:  -(const(cos(-0.9263690417457426)), -5.620381610033392, (1.7567414071343048 + 1.7567414071343048))', 'Equation constants: {0: np.float64(-0.5000000000003676), 1: np.float64(4.518284133657351e-09)}\nTree:  (-0.5000000000003676 + (cos(4.518284133657351e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, -41.068455720264296, sin(x54))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029)}\nTree:  /(-5528.044501875671, -11056.08841564029, (x56 - x54))', 'Equation constants: {0: np.float64(0.5006294649305552), 2: np.float64(0.13010158200341312), 3: np.float64(0.13003634586718066), 4: np.float64(-9.416419327642801)}\nTree:  (const(cos(x18)) + ((x38 cos (0.13003634586718066 * x11((x97 + -9.416419327642801)))) / (x11 / 0.13010158200341312)))', 'Equation constants: {0: np.float64(0.4829480003782187), 1: np.float64(-0.08563596713523694)}\nTree:  (0.4829480003782187 / (cos(-0.08563596713523694))**((x11)**(x46)))', 'Equation constants: {0: np.float64(-0.5152425384171405), 1: np.float64(-0.14159761461636058), 2: np.float64(-0.6647547328540442), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.000016313310849)}\nTree:  (-0.5152425384171405 + (cos(-0.14159761461636058))**((1.000016313310849 / const((const((x53)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000085892534), 1: np.float64(-0.00011291222890972807), 2: np.float64(-0.6621409608085264), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (-0.5000000085892534 + (cos(-0.00011291222890972807))**((1.0 / const((const((x53 / 1.0)) / x31)))))', 'Equation constants: {0: np.float64(-0.4999999972216067), 1: np.float64(-0.000110892701731228), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.3589345864750286)}\nTree:  (const(cos(-0.4121323370138712)) + ((-0.000110892701731228 cos (0.3589345864750286 - x0)))**((0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  (const(cos(x40)) - -41.068455720264296)']
MSE: [np.float64(0.2500000000000007), np.float64(396201368.2669605), np.float64(0.25), np.float64(0.2500000000000012), np.float64(0.7299044114997227), np.float64(0.25), np.float64(0.2500000000000007), np.float64(6.772904735789754e+22), np.float64(0.25), np.float64(0.7299044114997227), np.float64(0.2500000000000001), np.float64(0.2500000000000001), np.float64(0.24973746949205639), np.float64(0.25000000000012085), np.float64(75700642685.51648), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000000007), np.float64(0.24980106310398237), np.float64(0.24998689056168114), np.float64(0.2500000000171279), np.float64(0.25), np.float64(0.25000000000000017), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=303, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.2799999999999999, 2.2800000000000002), n_g=938, sigma_y=0.014222326658191318, unit=1.0284077004989516)', 'Generator(mode=real, range=(-7.2, 7.2), n_g=472, sigma_y=0.03755777750103895, unit=1.0175036467848526)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=303, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=692, sigma_y=0.06355692603682202, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.2799999999999999, 2.2800000000000002), n_g=938, sigma_y=0.02222238540342393, unit=0.9255669304490565)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=303, sigma_y=0.007949031530029998, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=440, sigma_y=0.02503851833402597, unit=1.0175036467848526)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.5311894240153108)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.5311894240153108)', 'Generator(mode=real, range=(-0.5816719561472328, 3.2583280438527673), n_g=970, sigma_y=0.02222238540342393, unit=1.1312484705488468)', 'Generator(mode=real, range=(-5, 5), n_g=628, sigma_y=0.04413675419223752, unit=0.49347157543340825)', 'Generator(mode=real, range=(-7.2, 7.2), n_g=472, sigma_y=0.03755777750103895, unit=1.0175036467848526)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05296410503068502, unit=0.6634451180826935)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=303, sigma_y=0.009936289412537496, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=335, sigma_y=0.006359225224023999, unit=0.6557894123645812)', 'Generator(mode=real, range=(-5.680676305034034, 6.319323694965966), n_g=440, sigma_y=0.02503851833402597, unit=1.0175036467848526)', 'Generator(mode=real, range=(-7.2, 7.2), n_g=504, sigma_y=0.03755777750103895, unit=1.119254011463338)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=303, sigma_y=0.006624192941691665, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=303, sigma_y=0.007949031530029998, unit=0.5902104711281231)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=692, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-6.256064910662758, 5.743935089337242), n_g=504, sigma_y=0.03129814791753246, unit=0.9157532821063674)', 'Generator(mode=real, range=(-6.256064910662758, 5.743935089337242), n_g=504, sigma_y=0.03129814791753246, unit=0.9157532821063674)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=1002, sigma_y=0.02222238540342393, unit=1.1312484705488468)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=504, sigma_y=0.03129814791753246, unit=0.6743274168237796)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=700, sigma_y=0.012861823364613244, unit=1.0020774944786415)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-0.536, 2.536), n_g=970, sigma_y=0.02222238540342393, unit=1.1312484705488468)', 'Generator(mode=real, range=(-5.630513262704275, 4.369486737295725), n_g=660, sigma_y=0.05296410503068502, unit=0.6634451180826935)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=970, sigma_y=0.02222238540342393, unit=1.1312484705488468)']
Gen 16: 22 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.5000000000001299), 1: np.float64(6.145523889679908e-08)}\nTree:  (-0.5000000000001299 + (cos(const(cos(x72))))**((x11((x4)**(x22)))**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000003676), 1: np.float64(4.518284133657351e-09)}\nTree:  (-0.5000000000003676 + (cos(4.518284133657351e-09))**((x11((x52)**(x93)) * x21)))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029), 2: np.float64(-1.1072371325317434)}\nTree:  /(-5528.044501875671, -11056.08841564029, sin(x57((-1.1072371325317434)**(-1.1072371325317434))), (x56 - x54))', 'Equation constants: {0: np.float64(-0.5000000000001299), 1: np.float64(4.319699890366936e-09)}\nTree:  (-0.5000000000001299 + (cos(const((x34 / x13))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.500000000000114), 1: np.float64(-6.06024928549738e-08), 2: np.float64(0.9148704781282113)}\nTree:  *(const(cos(x40((0.9148704781282113 / x1)))), (cos(-6.06024928549738e-08))**((x11)**(x21)), (x18 * x8))', 'Equation constants: {0: np.float64(-0.49999999999999495), 1: np.float64(6.145247585768602e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(6.145247585768602e-08), (x11)**(x21), (0.8669610034707098 / const((((x53)**(0.3338681438332669) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(100117115.2460563), 1: np.float64(196910777.7331198), 2: np.float64(37552273.454634994), 3: np.float64(-0.8524743675147644)}\nTree:  (const((x71 / -0.8524743675147644)) / ((x67 + 196910777.7331198) + (37552273.454634994 / x48)))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029)}\nTree:  /(-5528.044501875671, -11056.08841564029, cos(x57), (x56 / x54))', 'Equation constants: {0: np.float64(-5.120381610033386), 1: np.float64(-5.620381610033392), 2: np.float64(-0.9263690417457426), 3: np.float64(1.7567414071343048)}\nTree:  -(const(cos(-0.9263690417457426)), -5.620381610033392, (1.7567414071343048 + 1.7567414071343048))', 'Equation constants: {0: np.float64(-0.5000000000003676), 1: np.float64(4.518284133657351e-09)}\nTree:  (-0.5000000000003676 + (cos(4.518284133657351e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, -41.068455720264296, sin(x54))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029)}\nTree:  /(-5528.044501875671, -11056.08841564029, (x56 - x54))', 'Equation constants: {0: np.float64(0.5006294649305552), 2: np.float64(0.13010158200341312), 3: np.float64(0.13003634586718066), 4: np.float64(-9.416419327642801)}\nTree:  (const(cos(x18)) + ((x38 cos (0.13003634586718066 * x11((x97 + -9.416419327642801)))) / (x11 / 0.13010158200341312)))', 'Equation constants: {0: np.float64(0.4829480003782187), 1: np.float64(-0.08563596713523694)}\nTree:  (0.4829480003782187 / (cos(-0.08563596713523694))**((x11)**(x46)))', 'Equation constants: {0: np.float64(-0.5152425384171405), 1: np.float64(-0.14159761461636058), 2: np.float64(-0.6647547328540442), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.000016313310849)}\nTree:  (-0.5152425384171405 + (cos(-0.14159761461636058))**((1.000016313310849 / const((const((x53)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000085892534), 1: np.float64(-0.00011291222890972807), 2: np.float64(-0.6621409608085264), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (-0.5000000085892534 + (cos(-0.00011291222890972807))**((1.0 / const((const((x53 / 1.0)) / x31)))))', 'Equation constants: {0: np.float64(-0.4999999972216067), 1: np.float64(-0.000110892701731228), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.3589345864750286)}\nTree:  (const(cos(-0.4121323370138712)) + ((-0.000110892701731228 cos (0.3589345864750286 - x0)))**((0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  (const(cos(x40)) - -41.068455720264296)', 'Equation constants: {0: np.float64(-0.49999999999999495), 1: np.float64(6.145247585768602e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(6.145247585768602e-08), (x11)**(x21), (0.8669610034707098 / const((((x53)**(0.3338681438332669) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, -41.068455720264296, sin(x17))', 'Equation constants: {0: np.float64(-0.5000000000003676), 1: np.float64(4.518284133657351e-09)}\nTree:  (-0.5000000000003676 + (cos(4.518284133657351e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(100117115.2460563), 1: np.float64(196910777.7331198), 2: np.float64(37552273.454634994)}\nTree:  (100117115.2460563 / ((x67 + 196910777.7331198) + (37552273.454634994 / x48)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.456265973398186), 1: np.float64(-0.2984627551994599), 2: np.float64(-0.9462134237617332), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.011778326468852)}\nTree:  (-0.456265973398186 + (cos(-0.2984627551994599))**((1.011778326468852)**(const((const((x53)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000002491906), 1: np.float64(2.025834976030606e-05), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(0.33386817447487355)}\nTree:  (-0.5000000002491906 + ((2.025834976030606e-05 cos (0.33386817447487355 - x0)))**((1.0 / const((const((x53)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  (-40.568455720264936 - -41.068455720264296)', 'Equation constants: {0: np.float64(100117115.2460563), 1: np.float64(196910777.7331198), 2: np.float64(37552273.454634994), 3: np.float64(-0.8524743675147644)}\nTree:  (const((x30 / -0.8524743675147644)) / ((x67 + 196910777.7331198) + (37552273.454634994 / x48)))', 'Equation constants: {0: np.float64(-0.5356603466104193), 1: np.float64(0.1249554365370676), 2: np.float64(-166.8400996580771), 3: np.float64(-1.1854189611828354)}\nTree:  (-0.5356603466104193 + ((0.1249554365370676 cos (-1.1854189611828354)**(x11)))**((x11 / -166.8400996580771)))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029)}\nTree:  /(-5528.044501875671, -11056.08841564029, (x56 / x54))', 'Equation constants: {0: np.float64(-0.5000000000001299), 1: np.float64(6.145523889679908e-08)}\nTree:  (-0.5000000000001299 + (cos(6.145523889679908e-08))**((x11((x4)**(x22)))**(x21)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(-0.37602426694662583)}\nTree:  -(-20.108351004437395, -20.60835100444008, (x93 + -0.37602426694662583))', 'Equation constants: {0: np.float64(0.50000000001722), 1: np.float64(3.409299659003541e-08), 6: np.float64(1.0)}\nTree:  (0.50000000001722 * (cos(3.409299659003541e-08))**((x11)**(x21(cos(cos(1.0))))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  (-40.568455720264936 - -41.068455720264296)', 'Equation constants: {0: np.float64(0.499999996967457), 1: np.float64(-1.1093909338944161e-05)}\nTree:  (0.499999996967457 * (cos(-1.1093909338944161e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.49999999999999006), 1: np.float64(1.5405446228409291e-09), 2: np.float64(0.9148704781282113)}\nTree:  (const(cos(x40((0.9148704781282113 / x1)))) * (cos(1.5405446228409291e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000006173944), 1: np.float64(2.645685251348254e-06)}\nTree:  (-0.5000000006173944 + (cos(2.645685251348254e-06))**((x11((x52)**(x93)) * x21)))', 'Equation constants: {0: np.float64(-81.35049557449946), 1: np.float64(-81.85049557449956)}\nTree:  (const(cos(x40)) - -81.85049557449956)', 'Equation constants: {0: np.float64(-0.5000000051421761), 1: np.float64(2.1372329108718127e-06)}\nTree:  +(-0.5000000051421761, (cos(2.1372329108718127e-06))**((x11)**(x21)), (x27 + x17))', 'Equation constants: {0: np.float64(0.4829479211820008), 1: np.float64(-0.08563616442031753)}\nTree:  (0.4829479211820008 / (cos(-0.08563616442031753))**((x11)**(x46)))', 'Equation constants: {0: np.float64(-9328.462112677256), 1: np.float64(-18656.929418328284)}\nTree:  /(-9328.462112677256, -18656.929418328284, sin(x57))']
MSE: [np.float64(0.25000000000000006), np.float64(0.25), np.float64(0.25), np.float64(0.24973746949205639), np.float64(0.47745985232241855), np.float64(0.2500000000000002), np.float64(0.7299044114997227), np.float64(0.250000000019077), np.float64(0.25), np.float64(0.25), np.float64(0.24973746949205639), np.float64(0.24865711929219675), np.float64(0.2500000000000007), np.float64(0.2500000000000012), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25000000004394646), np.float64(0.25), np.float64(0.250000000001552), np.float64(0.25), np.float64(312657729.29910845), np.float64(0.25000000001093603), np.float64(0.24998689056168127), np.float64(0.2500000000061226)]
Generators: ['Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=303, sigma_y=0.006624192941691665, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=303, sigma_y=0.007949031530029998, unit=0.5902104711281231)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=692, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-6.256064910662758, 5.743935089337242), n_g=504, sigma_y=0.03129814791753246, unit=0.9157532821063674)', 'Generator(mode=real, range=(-6.256064910662758, 5.743935089337242), n_g=504, sigma_y=0.03129814791753246, unit=0.9157532821063674)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=1002, sigma_y=0.02222238540342393, unit=1.1312484705488468)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=504, sigma_y=0.03129814791753246, unit=0.6743274168237796)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=700, sigma_y=0.012861823364613244, unit=1.0020774944786415)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-0.536, 2.536), n_g=970, sigma_y=0.02222238540342393, unit=1.1312484705488468)', 'Generator(mode=real, range=(-5.630513262704275, 4.369486737295725), n_g=660, sigma_y=0.05296410503068502, unit=0.6634451180826935)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=970, sigma_y=0.02222238540342393, unit=1.1312484705488468)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=504, sigma_y=0.03129814791753246, unit=0.6743274168237796)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4346095287397997)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-0.5816719561472328, 3.2583280438527673), n_g=938, sigma_y=0.02222238540342393, unit=1.1312484705488468)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=303, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=504, sigma_y=0.03129814791753246, unit=0.6743274168237796)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.005087380179219199, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.005299354353353332, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.5843083664168419)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=335, sigma_y=0.006359225224023999, unit=0.6557894123645812)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05296410503068502, unit=0.6634451180826935)', 'Generator(mode=real, range=(-0.2799999999999999, 2.2800000000000002), n_g=970, sigma_y=0.014222326658191318, unit=1.0284077004989516)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=692, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.5902104711281231)', 'Generator(mode=real, range=(-7.2, 7.2), n_g=472, sigma_y=0.045069333001246735, unit=1.0175036467848526)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=303, sigma_y=0.009936289412537496, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=335, sigma_y=0.007949031530029998, unit=0.5902104711281231)']
Gen 17: 18 equations and 24 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.49999999999999495), 1: np.float64(6.145247585768602e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(6.145247585768602e-08), (x11)**(x21), (0.8669610034707098 / const((((x53)**(0.3338681438332669) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, -41.068455720264296, sin(x17))', 'Equation constants: {0: np.float64(-0.5000000000003676), 1: np.float64(4.518284133657351e-09)}\nTree:  (-0.5000000000003676 + (cos(4.518284133657351e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(100117115.2460563), 1: np.float64(196910777.7331198), 2: np.float64(37552273.454634994)}\nTree:  (100117115.2460563 / ((x67 + 196910777.7331198) + (37552273.454634994 / x48)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669)}\nTree:  (const(cos(-0.4121323370138712)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.456265973398186), 1: np.float64(-0.2984627551994599), 2: np.float64(-0.9462134237617332), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.011778326468852)}\nTree:  (-0.456265973398186 + (cos(-0.2984627551994599))**((1.011778326468852)**(const((const((x53)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000002491906), 1: np.float64(2.025834976030606e-05), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(0.33386817447487355)}\nTree:  (-0.5000000002491906 + ((2.025834976030606e-05 cos (0.33386817447487355 - x0)))**((1.0 / const((const((x53)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  (-40.568455720264936 - -41.068455720264296)', 'Equation constants: {0: np.float64(100117115.2460563), 1: np.float64(196910777.7331198), 2: np.float64(37552273.454634994), 3: np.float64(-0.8524743675147644)}\nTree:  (const((x30 / -0.8524743675147644)) / ((x67 + 196910777.7331198) + (37552273.454634994 / x48)))', 'Equation constants: {0: np.float64(-0.5356603466104193), 1: np.float64(0.1249554365370676), 2: np.float64(-166.8400996580771), 3: np.float64(-1.1854189611828354)}\nTree:  (-0.5356603466104193 + ((0.1249554365370676 cos (-1.1854189611828354)**(x11)))**((x11 / -166.8400996580771)))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029)}\nTree:  /(-5528.044501875671, -11056.08841564029, (x56 / x54))', 'Equation constants: {0: np.float64(-0.5000000000001299), 1: np.float64(6.145523889679908e-08)}\nTree:  (-0.5000000000001299 + (cos(6.145523889679908e-08))**((x11((x4)**(x22)))**(x21)))', 'Equation constants: {0: np.float64(-20.108351004437395), 1: np.float64(-20.60835100444008), 2: np.float64(-0.37602426694662583)}\nTree:  -(-20.108351004437395, -20.60835100444008, (x93 + -0.37602426694662583))', 'Equation constants: {0: np.float64(0.50000000001722), 1: np.float64(3.409299659003541e-08), 6: np.float64(1.0)}\nTree:  (0.50000000001722 * (cos(3.409299659003541e-08))**((x11)**(x21(cos(cos(1.0))))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  (-40.568455720264936 - -41.068455720264296)', 'Equation constants: {0: np.float64(0.499999996967457), 1: np.float64(-1.1093909338944161e-05)}\nTree:  (0.499999996967457 * (cos(-1.1093909338944161e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.49999999999999006), 1: np.float64(1.5405446228409291e-09), 2: np.float64(0.9148704781282113)}\nTree:  (const(cos(x40((0.9148704781282113 / x1)))) * (cos(1.5405446228409291e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000006173944), 1: np.float64(2.645685251348254e-06)}\nTree:  (-0.5000000006173944 + (cos(2.645685251348254e-06))**((x11((x52)**(x93)) * x21)))', 'Equation constants: {0: np.float64(-81.35049557449946), 1: np.float64(-81.85049557449956)}\nTree:  (const(cos(x40)) - -81.85049557449956)', 'Equation constants: {0: np.float64(-0.5000000051421761), 1: np.float64(2.1372329108718127e-06)}\nTree:  +(-0.5000000051421761, (cos(2.1372329108718127e-06))**((x11)**(x21)), (x27 + x17))', 'Equation constants: {0: np.float64(0.4829479211820008), 1: np.float64(-0.08563616442031753)}\nTree:  (0.4829479211820008 / (cos(-0.08563616442031753))**((x11)**(x46)))', 'Equation constants: {0: np.float64(-9328.462112677256), 1: np.float64(-18656.929418328284)}\nTree:  /(-9328.462112677256, -18656.929418328284, sin(x57))', 'Equation constants: {0: np.float64(-0.5000000000000175), 1: np.float64(8.587348729300815e-09), 2: np.float64(0.7326161664158102)}\nTree:  (-0.5000000000000175 + ((8.587348729300815e-09 cos (0.7326161664158102 - 0.7326161664158102)))**((x11((x4)**(x22)))**(x21)))', 'Equation constants: {0: np.float64(0.49999999719250254), 1: np.float64(-1.5019172167062507e-05)}\nTree:  (0.49999999719250254 * (cos(-1.5019172167062507e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-12438.113001934584), 1: np.float64(-24876.2279738397)}\nTree:  /(-12438.113001934584, -24876.2279738397, (x56 - x54))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029), 2: np.float64(-1.1028231799312582)}\nTree:  /(-5528.044501875671, -11056.08841564029, (x56 - x54((-1.1028231799312582 * -1.1028231799312582))))', 'Equation constants: {0: np.float64(-0.499999999215877), 1: np.float64(5.273670163050478e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(0.3338681438332669)}\nTree:  (-0.499999999215877 + pow(cos(5.273670163050478e-08), (x11)**(x21), (1.0 / const((((x53)**(1.0) const (0.3338681438332669)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029), 2: np.float64(0.5912316076611241)}\nTree:  /(-5528.044501875671, const((0.5912316076611241)**(0.5912316076611241)), cos(x57), (x56 / x54))', 'Equation constants: {0: np.float64(-81.3752915341496), 1: np.float64(-81.87529153414968)}\nTree:  -(-81.3752915341496, -81.87529153414968, sin(x17))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669)}\nTree:  (const(cos(-0.351230676831375)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.4199274694510777), 1: np.float64(-0.4033916692613871), 2: np.float64(-0.9459872857518511), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0025111866957759)}\nTree:  (-0.4199274694510777 + (cos(-0.4033916692613871))**((1.0025111866957759)**(const((const((x53)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(0.4829479163937754), 1: np.float64(-0.08563617667452317)}\nTree:  (0.4829479163937754 / (cos(-0.08563617667452317))**((x11)**(x46)))', 'Equation constants: {0: np.float64(-81.50991723529143), 1: np.float64(-82.00991723529137)}\nTree:  -(-81.50991723529143, -82.00991723529137, sin(x17))', 'Equation constants: {0: np.float64(-81.35049557449946), 1: np.float64(-81.85049557449956), 2: np.float64(0.5774395917628721)}\nTree:  ((cos(x40) const (0.5774395917628721 - x65)) - -81.85049557449956)', 'Equation constants: {0: np.float64(-3800.5324657492465), 1: np.float64(-7601.06505319594)}\nTree:  /(-3800.5324657492465, -7601.06505319594, (x56 / x54))', 'Equation constants: {0: np.float64(0.499999999152402), 1: np.float64(-1.6989122180947525e-06), 2: np.float64(-1.9057751795043307)}\nTree:  (const((x91 - -1.9057751795043307)) * (cos(-1.6989122180947525e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000003676), 1: np.float64(4.518284133657351e-09)}\nTree:  (const((x95 - x2)) + (cos(4.518284133657351e-09))**((x11((x52)**(x93)) * x21)))', 'Equation constants: {0: np.float64(-0.4999999972216067), 1: np.float64(-0.000110892701731228), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.3589345864750286)}\nTree:  ((cos(-0.4121323370138712) const (x6 - x97)) + ((-0.000110892701731228 cos (0.3589345864750286 - x0)))**((0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, -41.068455720264296, cos(x30))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, const(cos(x81)), sin(x54))']
MSE: [np.float64(0.25), np.float64(0.3299859418133099), np.float64(0.25000000003974915), np.float64(1302923386.9764855), np.float64(0.2500000000000015), np.float64(0.2500000000000007), np.float64(0.25000000000000006), np.float64(4125407591.2559133), np.float64(0.47354937631417443), np.float64(0.2500000000000007), np.float64(0.4503258202071993), np.float64(0.3749667790326126), np.float64(0.25), np.float64(0.25), np.float64(0.25000000009844164), np.float64(0.2499868905616808), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000000869), np.float64(0.25), np.float64(0.25000000000000017), np.float64(0.25), np.float64(0.49989765047915), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-6.0, 6.0), n_g=504, sigma_y=0.03129814791753246, unit=0.6743274168237796)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.005087380179219199, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.005299354353353332, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.5843083664168419)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=335, sigma_y=0.006359225224023999, unit=0.6557894123645812)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05296410503068502, unit=0.6634451180826935)', 'Generator(mode=real, range=(-0.2799999999999999, 2.2800000000000002), n_g=970, sigma_y=0.014222326658191318, unit=1.0284077004989516)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=692, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.5902104711281231)', 'Generator(mode=real, range=(-7.2, 7.2), n_g=472, sigma_y=0.045069333001246735, unit=1.0175036467848526)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=303, sigma_y=0.009936289412537496, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=335, sigma_y=0.007949031530029998, unit=0.5902104711281231)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.005087380179219199, unit=0.6557894123645812)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=504, sigma_y=0.03129814791753246, unit=0.6743274168237796)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=335, sigma_y=0.006359225224023999, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=303, sigma_y=0.00828024117711458, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.7213683536010393)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=504, sigma_y=0.03129814791753246, unit=0.6743274168237796)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=692, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.005299354353353332, unit=0.5902104711281231)', 'Generator(mode=real, range=(-5.056064910662758, 4.543935089337242), n_g=504, sigma_y=0.03129814791753246, unit=0.9157532821063674)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.005299354353353332, unit=0.5902104711281231)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=303, sigma_y=0.007949031530029998, unit=0.5902104711281231)', 'Generator(mode=real, range=(-6.256064910662758, 5.743935089337242), n_g=536, sigma_y=0.03129814791753246, unit=0.9157532821063674)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=668, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.006359225224023999, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.02399999999999991, 2.024), n_g=970, sigma_y=0.014222326658191318, unit=1.0284077004989516)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=504, sigma_y=0.03129814791753246, unit=0.6068946751414017)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.005299354353353332, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-0.2799999999999999, 2.2800000000000002), n_g=970, sigma_y=0.01706679198982958, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.4828994763775552)', 'Generator(mode=real, range=(-5.76, 5.76), n_g=692, sigma_y=0.05296410503068502, unit=0.5483017504815647)']
Gen 18: 22 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.5000000000000175), 1: np.float64(8.587348729300815e-09), 2: np.float64(0.7326161664158102)}\nTree:  (-0.5000000000000175 + ((8.587348729300815e-09 cos (0.7326161664158102 - 0.7326161664158102)))**((x11((x4)**(x22)))**(x21)))', 'Equation constants: {0: np.float64(0.49999999719250254), 1: np.float64(-1.5019172167062507e-05)}\nTree:  (0.49999999719250254 * (cos(-1.5019172167062507e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-12438.113001934584), 1: np.float64(-24876.2279738397)}\nTree:  /(-12438.113001934584, -24876.2279738397, (x56 - x54))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029), 2: np.float64(-1.1028231799312582)}\nTree:  /(-5528.044501875671, -11056.08841564029, (x56 - x54((-1.1028231799312582 * -1.1028231799312582))))', 'Equation constants: {0: np.float64(-0.499999999215877), 1: np.float64(5.273670163050478e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(0.3338681438332669)}\nTree:  (-0.499999999215877 + pow(cos(5.273670163050478e-08), (x11)**(x21), (1.0 / const((((x53)**(1.0) const (0.3338681438332669)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029), 2: np.float64(0.5912316076611241)}\nTree:  /(-5528.044501875671, const((0.5912316076611241)**(0.5912316076611241)), cos(x57), (x56 / x54))', 'Equation constants: {0: np.float64(-81.3752915341496), 1: np.float64(-81.87529153414968)}\nTree:  -(-81.3752915341496, -81.87529153414968, sin(x17))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669)}\nTree:  (const(cos(-0.351230676831375)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.4199274694510777), 1: np.float64(-0.4033916692613871), 2: np.float64(-0.9459872857518511), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0025111866957759)}\nTree:  (-0.4199274694510777 + (cos(-0.4033916692613871))**((1.0025111866957759)**(const((const((x53)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(0.4829479163937754), 1: np.float64(-0.08563617667452317)}\nTree:  (0.4829479163937754 / (cos(-0.08563617667452317))**((x11)**(x46)))', 'Equation constants: {0: np.float64(-81.50991723529143), 1: np.float64(-82.00991723529137)}\nTree:  -(-81.50991723529143, -82.00991723529137, sin(x17))', 'Equation constants: {0: np.float64(-81.35049557449946), 1: np.float64(-81.85049557449956), 2: np.float64(0.5774395917628721)}\nTree:  ((cos(x40) const (0.5774395917628721 - x65)) - -81.85049557449956)', 'Equation constants: {0: np.float64(-3800.5324657492465), 1: np.float64(-7601.06505319594)}\nTree:  /(-3800.5324657492465, -7601.06505319594, (x56 / x54))', 'Equation constants: {0: np.float64(0.499999999152402), 1: np.float64(-1.6989122180947525e-06), 2: np.float64(-1.9057751795043307)}\nTree:  (const((x91 - -1.9057751795043307)) * (cos(-1.6989122180947525e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000003676), 1: np.float64(4.518284133657351e-09)}\nTree:  (const((x95 - x2)) + (cos(4.518284133657351e-09))**((x11((x52)**(x93)) * x21)))', 'Equation constants: {0: np.float64(-0.4999999972216067), 1: np.float64(-0.000110892701731228), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.3589345864750286)}\nTree:  ((cos(-0.4121323370138712) const (x6 - x97)) + ((-0.000110892701731228 cos (0.3589345864750286 - x0)))**((0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, -41.068455720264296, cos(x30))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, const(cos(x81)), sin(x54))', 'Equation constants: {0: np.float64(0.5000000000106822), 1: np.float64(-1.557166776522677e-06)}\nTree:  (0.5000000000106822 * ((-1.557166776522677e-06 cos sin(x95)))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000045453274), 1: np.float64(2.514796573070548e-07)}\nTree:  (-0.5000000045453274 + (cos(2.514796573070548e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669), 6: np.float64(0.49384384873079146)}\nTree:  +(const(cos(-0.351230676831375)), pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))), (0.49384384873079146)**(x53))', 'Equation constants: {0: np.float64(0.4999999998584652), 1: np.float64(2.3961636273447927e-07)}\nTree:  (0.4999999998584652 * (cos(2.3961636273447927e-07))**(pow(x11, x21, cos(x54))))', 'Equation constants: {0: np.float64(-0.5000000002491906), 1: np.float64(2.025834976030606e-05), 2: np.float64(-0.6621409606266639), 6: np.float64(1.0), 7: np.float64(1.0)}\nTree:  (-0.5000000002491906 + ((2.025834976030606e-05 cos (1.0 - x0)))**((1.0 / -0.6621409606266639)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.772265461904536), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669)}\nTree:  (const(cos(-0.351230676831375)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, const(cos(x81)), (x54 sin (x46)**(x67)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(1.2825373403103706)}\nTree:  -(-40.568455720264936, const(cos(x81((1.2825373403103706 / 1.2825373403103706)))), sin(x54))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 5: np.float64(1.0)}\nTree:  (-0.500000000000083 + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-0.49999999999999495), 1: np.float64(6.145247585768602e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(6.145247585768602e-08), (x11)**(x21), (0.8669610034707098 / const((((x53)**(const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-81.42273125403705), 1: np.float64(-81.92273125403716)}\nTree:  -(-81.42273125403705, -81.92273125403716, cos(x30))', 'Equation constants: {1: np.float64(0.49818117095870973)}\nTree:  (0.49818117095870973 / (x56 / x54))', 'Equation constants: {0: np.float64(0.4999999674521763), 1: np.float64(-2.3598540901144797e-05), 2: np.float64(-1.9057751795043307)}\nTree:  (const((x91 - -1.9057751795043307)) * (cos(-2.3598540901144797e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-18657.117040014247), 1: np.float64(-37314.253260241356)}\nTree:  /(-18657.117040014247, -37314.253260241356, (x56 - x54))', 'Equation constants: {0: np.float64(-81.3752915341496), 1: np.float64(-81.87529153414968)}\nTree:  (-81.3752915341496 - -81.87529153414968)', 'Equation constants: {0: np.float64(-0.5000000000003676), 1: np.float64(4.518284133657351e-09)}\nTree:  (-0.5000000000003676 + (cos(4.518284133657351e-09))**((x11)**(x24)))', 'Equation constants: {0: np.float64(0.49999999918900656), 1: np.float64(-8.879623725570623e-08), 6: np.float64(1.0)}\nTree:  (0.49999999918900656 * (cos(-8.879623725570623e-08))**((x11)**(x21(cos(cos(1.0))))))', 'Equation constants: {0: np.float64(0.49818117107649196)}\nTree:  (0.49818117107649196 / (x56 / x54))', 'Equation constants: {0: np.float64(-37314.07312547718), 1: np.float64(-74627.87874018533)}\nTree:  /(-37314.07312547718, -74627.87874018533, sin(x57))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976)}\nTree:  -(-163.24416045910954, -163.74416045910976, sin(x17))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375)}\nTree:  (const(cos(-0.351230676831375)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-12438.113001934584), 1: np.float64(-24876.2279738397)}\nTree:  /(-12438.113001934584, -24876.2279738397, (x56 - x54), (x44 - x95))']
MSE: [np.float64(0.25000000000008143), np.float64(0.25000000000093714), np.float64(0.25), np.float64(0.2500000000003706), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000000006), np.float64(0.25), np.float64(0.2498246418875418), np.float64(0.2500000000634211), np.float64(0.2500000000002505), np.float64(0.49947543326329413), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000014094), np.float64(0.2498246418875418), np.float64(0.25000000001290285), np.float64(0.25), np.float64(0.7706165453849364), np.float64(0.25), np.float64(0.2500000000000015), np.float64(0.49947543326329435)]
Generators: ['Generator(mode=real, range=(-5.056064910662758, 4.543935089337242), n_g=504, sigma_y=0.03129814791753246, unit=0.9157532821063674)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=303, sigma_y=0.005299354353353332, unit=0.5902104711281231)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=303, sigma_y=0.007949031530029998, unit=0.5902104711281231)', 'Generator(mode=real, range=(-6.256064910662758, 5.743935089337242), n_g=536, sigma_y=0.03129814791753246, unit=0.9157532821063674)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=668, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.006359225224023999, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.02399999999999991, 2.024), n_g=970, sigma_y=0.014222326658191318, unit=1.0284077004989516)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=504, sigma_y=0.03129814791753246, unit=0.6068946751414017)', 'Generator(mode=real, range=(-1.045799822798359, 2.954200177201641), n_g=335, sigma_y=0.005299354353353332, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-0.2799999999999999, 2.2800000000000002), n_g=970, sigma_y=0.01706679198982958, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.4828994763775552)', 'Generator(mode=real, range=(-5.76, 5.76), n_g=692, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-7.2, 7.2), n_g=504, sigma_y=0.045069333001246735, unit=1.0175036467848526)', 'Generator(mode=real, range=(-7.2, 7.2), n_g=472, sigma_y=0.03605546640099739, unit=1.0175036467848526)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006359225224023999, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.2799999999999999, 2.2800000000000002), n_g=938, sigma_y=0.01706679198982958, unit=1.0284077004989516)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.005299354353353332, unit=0.7213683536010393)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=303, sigma_y=0.005299354353353332, unit=0.5902104711281231)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=335, sigma_y=0.006359225224023999, unit=0.5902104711281231)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.4828994763775552)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.5311894240153108)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.006359225224023998, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.7213683536010393)', 'Generator(mode=real, range=(-5.76, 5.76), n_g=692, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05296410503068502, unit=0.6634451180826935)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-6.256064910662758, 5.743935089337242), n_g=536, sigma_y=0.03755777750103895, unit=0.9157532821063674)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=335, sigma_y=0.009538837836035997, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.02399999999999991, 2.024), n_g=970, sigma_y=0.014222326658191318, unit=1.1312484705488468)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.5843083664168419)', 'Generator(mode=real, range=(-6.256064910662758, 5.743935089337242), n_g=504, sigma_y=0.03129814791753246, unit=0.9157532821063674)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=504, sigma_y=0.03129814791753246, unit=0.6068946751414017)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=335, sigma_y=0.007949031530029998, unit=0.5902104711281231)']
Gen 19: 19 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.5000000045453274), 1: np.float64(2.514796573070548e-07)}\nTree:  (-0.5000000045453274 + (cos(2.514796573070548e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669), 6: np.float64(0.49384384873079146)}\nTree:  +(const(cos(-0.351230676831375)), pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))), (0.49384384873079146)**(x53))', 'Equation constants: {0: np.float64(0.4999999998584652), 1: np.float64(2.3961636273447927e-07)}\nTree:  (0.4999999998584652 * (cos(2.3961636273447927e-07))**(pow(x11, x21, cos(x54))))', 'Equation constants: {0: np.float64(-0.5000000002491906), 1: np.float64(2.025834976030606e-05), 2: np.float64(-0.6621409606266639), 6: np.float64(1.0), 7: np.float64(1.0)}\nTree:  (-0.5000000002491906 + ((2.025834976030606e-05 cos (1.0 - x0)))**((1.0 / -0.6621409606266639)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.772265461904536), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669)}\nTree:  (const(cos(-0.351230676831375)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, const(cos(x81)), (x54 sin (x46)**(x67)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(1.2825373403103706)}\nTree:  -(-40.568455720264936, const(cos(x81((1.2825373403103706 / 1.2825373403103706)))), sin(x54))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 5: np.float64(1.0)}\nTree:  (-0.500000000000083 + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-0.49999999999999495), 1: np.float64(6.145247585768602e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(6.145247585768602e-08), (x11)**(x21), (0.8669610034707098 / const((((x53)**(const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-81.42273125403705), 1: np.float64(-81.92273125403716)}\nTree:  -(-81.42273125403705, -81.92273125403716, cos(x30))', 'Equation constants: {1: np.float64(0.49818117095870973)}\nTree:  (0.49818117095870973 / (x56 / x54))', 'Equation constants: {0: np.float64(0.4999999674521763), 1: np.float64(-2.3598540901144797e-05), 2: np.float64(-1.9057751795043307)}\nTree:  (const((x91 - -1.9057751795043307)) * (cos(-2.3598540901144797e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-18657.117040014247), 1: np.float64(-37314.253260241356)}\nTree:  /(-18657.117040014247, -37314.253260241356, (x56 - x54))', 'Equation constants: {0: np.float64(-81.3752915341496), 1: np.float64(-81.87529153414968)}\nTree:  (-81.3752915341496 - -81.87529153414968)', 'Equation constants: {0: np.float64(-0.5000000000003676), 1: np.float64(4.518284133657351e-09)}\nTree:  (-0.5000000000003676 + (cos(4.518284133657351e-09))**((x11)**(x24)))', 'Equation constants: {0: np.float64(0.49999999918900656), 1: np.float64(-8.879623725570623e-08), 6: np.float64(1.0)}\nTree:  (0.49999999918900656 * (cos(-8.879623725570623e-08))**((x11)**(x21(cos(cos(1.0))))))', 'Equation constants: {0: np.float64(0.49818117107649196)}\nTree:  (0.49818117107649196 / (x56 / x54))', 'Equation constants: {0: np.float64(-37314.07312547718), 1: np.float64(-74627.87874018533)}\nTree:  /(-37314.07312547718, -74627.87874018533, sin(x57))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976)}\nTree:  -(-163.24416045910954, -163.74416045910976, sin(x17))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375)}\nTree:  (const(cos(-0.351230676831375)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-12438.113001934584), 1: np.float64(-24876.2279738397)}\nTree:  /(-12438.113001934584, -24876.2279738397, (x56 - x54), (x44 - x95))', 'Equation constants: {0: np.float64(-162.93676349625775), 1: np.float64(-163.43676349625795)}\nTree:  -(-162.93676349625775, -163.43676349625795, sin(x17))', 'Equation constants: {0: np.float64(0.5000000007264418), 1: np.float64(-7.10374831876297e-07)}\nTree:  (0.5000000007264418 * (cos(-7.10374831876297e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.499999999215877), 1: np.float64(5.273670163050478e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(1.0)}\nTree:  (-0.499999999215877 + pow(cos(const(cos(x13))), (x11)**(x21), (1.0 / const((((x53)**(1.0) const (1.0)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(0.5000000000049595), 1: np.float64(8.036975986730026e-07), 2: np.float64(-1.4230314790117506)}\nTree:  (0.5000000000049595 * (cos(8.036975986730026e-07))**(pow(x11, x21, (-1.4230314790117506 / x81))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 5: np.float64(1.0)}\nTree:  +(-0.500000000000083, pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(1.0)) / x31)))), (x56)**(x93))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669), 6: np.float64(0.49384384873079146)}\nTree:  +(const(cos(-0.351230676831375)), pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31))), cos(x4)), (0.49384384873079146)**(x53))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.593040809678878), 4: np.float64(-0.351230676831375)}\nTree:  (const(cos(-0.351230676831375)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((1.593040809678878 / x31)))))', 'Equation constants: {0: np.float64(-0.4212864277195262), 1: np.float64(-0.3990602314105834), 2: np.float64(-0.945987517844532), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(0.9976521681944005)}\nTree:  (-0.4212864277195262 + (cos(-0.3990602314105834))**((0.9976521681944005)**(const((const((x53((x17 - x2)))**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, const(cos(x81)), (x54 sin pow(x46, x67, cos(x33))))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029), 2: np.float64(0.5912316076611241), 3: np.float64(-0.020872606593810072)}\nTree:  /(-5528.044501875671, const((const(cos(-0.020872606593810072)))**(0.5912316076611241)), cos(x57), (x56 / x54))', 'Equation constants: {0: np.float64(-81.3752915341496), 1: np.float64(-81.87529153414968)}\nTree:  (-81.3752915341496 - const((x99)**(x60)))', 'Equation constants: {0: np.float64(-8292.031925881785), 1: np.float64(-16584.0761595046), 2: np.float64(-1.1028231799312582)}\nTree:  /(-8292.031925881785, -16584.0761595046, (x56 - x54((-1.1028231799312582 * -1.1028231799312582))))', 'Equation constants: {0: np.float64(1.5036001891508959)}\nTree:  (1.5036001891508959 - (x56 / x54))', 'Equation constants: {0: np.float64(0.4999999998584652), 1: np.float64(2.3961636273447927e-07)}\nTree:  *(0.4999999998584652, (cos(2.3961636273447927e-07))**((x11)**(x21)), sin(x97))', 'Equation constants: {0: np.float64(-81.3752915341496), 1: np.float64(-81.87529153414968)}\nTree:  (-81.3752915341496 - -81.87529153414968)', 'Equation constants: {0: np.float64(-81.35049557449946), 1: np.float64(-81.85049557449956), 2: np.float64(0.5774395917628721), 3: np.float64(0.44494908565053937)}\nTree:  ((cos(x40) const (0.5774395917628721 - x65)) - const((0.44494908565053937 * x23)))', 'Equation constants: {0: np.float64(-81.29691345105819), 1: np.float64(-81.79691345105829)}\nTree:  -(-81.29691345105819, -81.79691345105829, cos(x30))', 'Equation constants: {0: np.float64(-0.4989292187097641), 1: np.float64(0.09885168709862709)}\nTree:  (const((x95 - x2)) + (cos(0.09885168709862709))**((x11((x52)**(x93)) - x21)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.772265461904536), 4: np.float64(-0.6457256537476123), 5: np.float64(0.3338681438332669)}\nTree:  (const(cos(-0.6457256537476123)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))))']
MSE: [np.float64(0.25), np.float64(0.2500000000003249), np.float64(0.2500000000000001), np.float64(0.7687733163578693), np.float64(0.25000000000003414), np.float64(0.25), np.float64(321679165.03803515), np.float64(0.25), np.float64(0.25), np.float64(4125407591.256329), np.float64(0.25000000010016754), np.float64(0.25), np.float64(443575588425.0737), np.float64(0.2500000000000007), np.float64(0.25), np.float64(0.2500000000012516), np.float64(0.251529672343502), np.float64(0.2500000000003706), np.float64(0.25), np.float64(0.7706165453849364), np.float64(332099875.5106404), np.float64(0.25), np.float64(0.25), np.float64(0.2486578430739781), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.5311894240153108)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.006359225224023998, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.7213683536010393)', 'Generator(mode=real, range=(-5.76, 5.76), n_g=692, sigma_y=0.05296410503068502, unit=0.5483017504815647)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05296410503068502, unit=0.6634451180826935)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-6.256064910662758, 5.743935089337242), n_g=536, sigma_y=0.03755777750103895, unit=0.9157532821063674)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=335, sigma_y=0.009538837836035997, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.02399999999999991, 2.024), n_g=970, sigma_y=0.014222326658191318, unit=1.1312484705488468)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.5843083664168419)', 'Generator(mode=real, range=(-6.256064910662758, 5.743935089337242), n_g=504, sigma_y=0.03129814791753246, unit=0.9157532821063674)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=504, sigma_y=0.03129814791753246, unit=0.6068946751414017)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=335, sigma_y=0.007949031530029998, unit=0.5902104711281231)', 'Generator(mode=real, range=(0.1808000000000001, 1.8192), n_g=970, sigma_y=0.014222326658191318, unit=1.0284077004989516)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=335, sigma_y=0.006359225224023999, unit=0.7213683536010393)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.7213683536010393)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=367, sigma_y=0.006359225224023999, unit=0.5902104711281231)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.5311894240153108)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=367, sigma_y=0.006359225224023999, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.006359225224023998, unit=0.5902104711281231)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=472, sigma_y=0.03129814791753246, unit=0.6068946751414017)', 'Generator(mode=real, range=(-6.256064910662758, 5.743935089337242), n_g=504, sigma_y=0.03129814791753246, unit=1.0073286103170043)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.011446605403243196, unit=0.4828994763775552)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.7213683536010393)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=303, sigma_y=0.007949031530029998, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.9156751808456153, 2.284324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.004239483482682666, unit=0.7213683536010393)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=271, sigma_y=0.004883884972050431, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=335, sigma_y=0.009538837836035997, unit=0.5311894240153108)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.6557894123645812)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006359225224023999, unit=0.6492315182409354)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-7.2, 7.2), n_g=504, sigma_y=0.045069333001246735, unit=0.9157532821063674)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.4828994763775552)', 'Generator(mode=real, range=(-0.2799999999999999, 2.2800000000000002), n_g=938, sigma_y=0.020480150387795496, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=335, sigma_y=0.007631070268828798, unit=0.5902104711281231)']
Gen 20: 23 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.499999999215877), 1: np.float64(5.273670163050478e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(1.0)}\nTree:  (-0.499999999215877 + pow(cos(const(cos(x13))), (x11)**(x21), (1.0 / const((((x53)**(1.0) const (1.0)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(0.5000000000049595), 1: np.float64(8.036975986730026e-07), 2: np.float64(-1.4230314790117506)}\nTree:  (0.5000000000049595 * (cos(8.036975986730026e-07))**(pow(x11, x21, (-1.4230314790117506 / x81))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 5: np.float64(1.0)}\nTree:  +(-0.500000000000083, pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(1.0)) / x31)))), (x56)**(x93))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669), 6: np.float64(0.49384384873079146)}\nTree:  +(const(cos(-0.351230676831375)), pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31))), cos(x4)), (0.49384384873079146)**(x53))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.593040809678878), 4: np.float64(-0.351230676831375)}\nTree:  (const(cos(-0.351230676831375)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((1.593040809678878 / x31)))))', 'Equation constants: {0: np.float64(-0.4212864277195262), 1: np.float64(-0.3990602314105834), 2: np.float64(-0.945987517844532), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(0.9976521681944005)}\nTree:  (-0.4212864277195262 + (cos(-0.3990602314105834))**((0.9976521681944005)**(const((const((x53((x17 - x2)))**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, const(cos(x81)), (x54 sin pow(x46, x67, cos(x33))))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029), 2: np.float64(0.5912316076611241), 3: np.float64(-0.020872606593810072)}\nTree:  /(-5528.044501875671, const((const(cos(-0.020872606593810072)))**(0.5912316076611241)), cos(x57), (x56 / x54))', 'Equation constants: {0: np.float64(-81.3752915341496), 1: np.float64(-81.87529153414968)}\nTree:  (-81.3752915341496 - const((x99)**(x60)))', 'Equation constants: {0: np.float64(-8292.031925881785), 1: np.float64(-16584.0761595046), 2: np.float64(-1.1028231799312582)}\nTree:  /(-8292.031925881785, -16584.0761595046, (x56 - x54((-1.1028231799312582 * -1.1028231799312582))))', 'Equation constants: {0: np.float64(1.5036001891508959)}\nTree:  (1.5036001891508959 - (x56 / x54))', 'Equation constants: {0: np.float64(0.4999999998584652), 1: np.float64(2.3961636273447927e-07)}\nTree:  *(0.4999999998584652, (cos(2.3961636273447927e-07))**((x11)**(x21)), sin(x97))', 'Equation constants: {0: np.float64(-81.3752915341496), 1: np.float64(-81.87529153414968)}\nTree:  (-81.3752915341496 - -81.87529153414968)', 'Equation constants: {0: np.float64(-81.35049557449946), 1: np.float64(-81.85049557449956), 2: np.float64(0.5774395917628721), 3: np.float64(0.44494908565053937)}\nTree:  ((cos(x40) const (0.5774395917628721 - x65)) - const((0.44494908565053937 * x23)))', 'Equation constants: {0: np.float64(-81.29691345105819), 1: np.float64(-81.79691345105829)}\nTree:  -(-81.29691345105819, -81.79691345105829, cos(x30))', 'Equation constants: {0: np.float64(-0.4989292187097641), 1: np.float64(0.09885168709862709)}\nTree:  (const((x95 - x2)) + (cos(0.09885168709862709))**((x11((x52)**(x93)) - x21)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.772265461904536), 4: np.float64(-0.6457256537476123), 5: np.float64(0.3338681438332669)}\nTree:  (const(cos(-0.6457256537476123)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(0.5025819377204216), 1: np.float64(0.05490133299624813)}\nTree:  (0.5025819377204216 * (cos(0.05490133299624813))**((x11)**(cos(x54))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 6: np.float64(1.0)}\nTree:  +(const(cos(-0.351230676831375)), pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(x74)) / x31)))), (1.0)**(x53))', 'Equation constants: {0: np.float64(0.4981811710970887)}\nTree:  (0.4981811710970887 / (x56 / x54))', 'Equation constants: {0: np.float64(-163.0217355515441), 1: np.float64(-163.52173555154434)}\nTree:  (-163.0217355515441 - -163.52173555154434)', 'Equation constants: {0: np.float64(1.5036001891508959), 1: np.float64(1.2213783811067827)}\nTree:  -(1.5036001891508959, (x56 / x54), (1.2213783811067827 / 1.2213783811067827))', 'Equation constants: {0: np.float64(-12438.113001934584), 1: np.float64(-24876.2279738397)}\nTree:  /(-12438.113001934584, -24876.2279738397, (x56 - x54), (x60 - x95))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(1.2825373403103706)}\nTree:  -(-40.568455720264936, const(cos(((1.2825373403103706 / 1.2825373403103706) x81 sin(x68)))), sin(x54))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158)}\nTree:  -(-163.24416045910954, const((x2 / -1.527546221146158)), sin(x17))', 'Equation constants: {0: np.float64(-0.5000000000000825), 1: np.float64(1.3082409584012302e-08)}\nTree:  (-0.5000000000000825 + (cos(1.3082409584012302e-08))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000146179094), 1: np.float64(-1.4399341553516764e-05)}\nTree:  (-0.5000000146179094 + (cos(-1.4399341553516764e-05))**((x11)**(x21)))', 'Equation constants: {1: np.float64(0.49818117095870973)}\nTree:  (0.49818117095870973 / (x56 / x54))', 'Equation constants: {0: np.float64(0.4999999999999927), 1: np.float64(6.148223002992248e-10), 2: np.float64(0.03498914017137755)}\nTree:  *(0.4999999999999927, ((6.148223002992248e-10 cos (x64 - 0.03498914017137755)))**((x11)**(x21)), sin(x97))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.772265461904536), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669)}\nTree:  (const(cos(-0.351230676831375)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x49)))))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029), 2: np.float64(0.5912316076611241), 3: np.float64(0.01568627109519398)}\nTree:  /(-5528.044501875671, const((const(cos(0.01568627109519398)))**(0.5912316076611241)), cos(x57), (x56 / x54))', 'Equation constants: {0: np.float64(-0.49999999999999495), 1: np.float64(6.145247585768602e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(6.145247585768602e-08), (x11)**(x21), (0.8669610034707098 / const((((x53)**(const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000046501462), 1: np.float64(-3.1467654411352224e-06)}\nTree:  (-0.5000000046501462 + (cos(-3.1467654411352224e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669), 6: np.float64(0.49384384873079146), 7: np.float64(-1.9549626026621052)}\nTree:  +(const(cos(-0.351230676831375)), pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))), (0.49384384873079146)**(x53(sin(-1.9549626026621052))))', 'Equation constants: {0: np.float64(-81.42273125403705), 1: np.float64(-81.92273125403716), 2: np.float64(1.4541807751656086)}\nTree:  -(const((x68 - 1.4541807751656086)), -81.92273125403716, cos(x30))', 'Equation constants: {0: np.float64(-0.5000000000003676), 1: np.float64(4.518284133657351e-09)}\nTree:  (-0.5000000000003676 + (cos(4.518284133657351e-09))**((x11)**(x86)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, const(cos(x81)), (x54 sin (x46)**(x67)))', 'Equation constants: {0: np.float64(-0.500000001844131), 1: np.float64(1.7895944651544763e-06), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 5: np.float64(1.0)}\nTree:  (-0.500000001844131 + pow(cos(1.7895944651544763e-06), (x11)**(x21), (x52 / const((const((x53)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(0.5000000000016643), 1: np.float64(-8.880478728093235e-08)}\nTree:  (0.5000000000016643 * (cos(-8.880478728093235e-08))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.4153532882924069), 1: np.float64(-0.4144816267286028), 2: np.float64(-0.9459921480182296), 3: np.float64(1.6487086928786074), 6: np.float64(1.0002686959781855)}\nTree:  (-0.4153532882924069 + (cos(-0.4144816267286028))**((1.0002686959781855)**(const((1.6487086928786074 / x31)))))']
MSE: [np.float64(0.2499903082171175), np.float64(0.25), np.float64(0.2498246418875418), np.float64(0.25), np.float64(0.251529672343502), np.float64(0.2500000000000015), np.float64(0.25), np.float64(0.25), np.float64(1.6845700978469762), np.float64(0.25000000000000017), np.float64(0.25000000002771705), np.float64(0.2498246418875418), np.float64(0.2500000000000001), np.float64(0.25), np.float64(0.2500000000000007), np.float64(0.25000000000000006), np.float64(0.2500000000153815), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000013118), np.float64(0.25), np.float64(0.5), np.float64(0.2500000000576173)]
Generators: ['Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.011446605403243196, unit=0.4828994763775552)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.7213683536010393)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=303, sigma_y=0.007949031530029998, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.9156751808456153, 2.284324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.004239483482682666, unit=0.7213683536010393)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=271, sigma_y=0.004883884972050431, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=335, sigma_y=0.009538837836035997, unit=0.5311894240153108)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.6557894123645812)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006359225224023999, unit=0.6492315182409354)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-7.2, 7.2), n_g=504, sigma_y=0.045069333001246735, unit=0.9157532821063674)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.4828994763775552)', 'Generator(mode=real, range=(-0.2799999999999999, 2.2800000000000002), n_g=938, sigma_y=0.020480150387795496, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=335, sigma_y=0.007631070268828798, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.006359225224023998, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.9156751808456153, 2.284324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.5843083664168419)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.7213683536010393)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=335, sigma_y=0.009538837836035997, unit=0.4828994763775552)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.006359225224023998, unit=0.6492315182409354)', 'Generator(mode=real, range=(-5, 5), n_g=628, sigma_y=0.05296410503068502, unit=0.6634451180826935)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5843083664168419)', 'Generator(mode=real, range=(0.1808000000000001, 1.8192), n_g=1002, sigma_y=0.014222326658191318, unit=1.0284077004989516)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05296410503068502, unit=0.5971006062744242)', 'Generator(mode=real, range=(-1.8105998227983586, 3.7190001772016408), n_g=303, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=732, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.7935051889611433)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.006359225224023998, unit=0.5902104711281231)', 'Generator(mode=real, range=(0.1808000000000001, 1.8192), n_g=970, sigma_y=0.01706679198982958, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=367, sigma_y=0.006359225224023999, unit=0.5311894240153108)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.5311894240153108)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.4346095287397997)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.5311894240153108)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.5311894240153108)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006359225224023999, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.5311894240153108)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.7213683536010393)']
Gen 21: 23 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(1.2825373403103706)}\nTree:  -(-40.568455720264936, const(cos(((1.2825373403103706 / 1.2825373403103706) x81 sin(x68)))), sin(x54))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158)}\nTree:  -(-163.24416045910954, const((x2 / -1.527546221146158)), sin(x17))', 'Equation constants: {0: np.float64(-0.5000000000000825), 1: np.float64(1.3082409584012302e-08)}\nTree:  (-0.5000000000000825 + (cos(1.3082409584012302e-08))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000146179094), 1: np.float64(-1.4399341553516764e-05)}\nTree:  (-0.5000000146179094 + (cos(-1.4399341553516764e-05))**((x11)**(x21)))', 'Equation constants: {1: np.float64(0.49818117095870973)}\nTree:  (0.49818117095870973 / (x56 / x54))', 'Equation constants: {0: np.float64(0.4999999999999927), 1: np.float64(6.148223002992248e-10), 2: np.float64(0.03498914017137755)}\nTree:  *(0.4999999999999927, ((6.148223002992248e-10 cos (x64 - 0.03498914017137755)))**((x11)**(x21)), sin(x97))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.772265461904536), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669)}\nTree:  (const(cos(-0.351230676831375)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x49)))))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029), 2: np.float64(0.5912316076611241), 3: np.float64(0.01568627109519398)}\nTree:  /(-5528.044501875671, const((const(cos(0.01568627109519398)))**(0.5912316076611241)), cos(x57), (x56 / x54))', 'Equation constants: {0: np.float64(-0.49999999999999495), 1: np.float64(6.145247585768602e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(6.145247585768602e-08), (x11)**(x21), (0.8669610034707098 / const((((x53)**(const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000046501462), 1: np.float64(-3.1467654411352224e-06)}\nTree:  (-0.5000000046501462 + (cos(-3.1467654411352224e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669), 6: np.float64(0.49384384873079146), 7: np.float64(-1.9549626026621052)}\nTree:  +(const(cos(-0.351230676831375)), pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))), (0.49384384873079146)**(x53(sin(-1.9549626026621052))))', 'Equation constants: {0: np.float64(-81.42273125403705), 1: np.float64(-81.92273125403716), 2: np.float64(1.4541807751656086)}\nTree:  -(const((x68 - 1.4541807751656086)), -81.92273125403716, cos(x30))', 'Equation constants: {0: np.float64(-0.5000000000003676), 1: np.float64(4.518284133657351e-09)}\nTree:  (-0.5000000000003676 + (cos(4.518284133657351e-09))**((x11)**(x86)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, const(cos(x81)), (x54 sin (x46)**(x67)))', 'Equation constants: {0: np.float64(-0.500000001844131), 1: np.float64(1.7895944651544763e-06), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 5: np.float64(1.0)}\nTree:  (-0.500000001844131 + pow(cos(1.7895944651544763e-06), (x11)**(x21), (x52 / const((const((x53)**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(0.5000000000016643), 1: np.float64(-8.880478728093235e-08)}\nTree:  (0.5000000000016643 * (cos(-8.880478728093235e-08))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.4153532882924069), 1: np.float64(-0.4144816267286028), 2: np.float64(-0.9459921480182296), 3: np.float64(1.6487086928786074), 6: np.float64(1.0002686959781855)}\nTree:  (-0.4153532882924069 + (cos(-0.4144816267286028))**((1.0002686959781855)**(const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(0.4999999998584652), 1: np.float64(2.3961636273447927e-07)}\nTree:  *(0.4999999998584652, (cos(const(cos(x40))))**((x11)**(x21)), sin(x97))', 'Equation constants: {0: np.float64(-0.49999999999999495), 1: np.float64(6.145247585768602e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(6.145247585768602e-08), (x11)**(x21), (0.8669610034707098 / const((((x53)**(const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-326.1205934253204), 1: np.float64(-326.6205934253208)}\nTree:  (-326.1205934253204 - -326.6205934253208)', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.7182450586666438)}\nTree:  -(-163.24416045910954, const((x2 / -1.7182450586666438)), sin(x17))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.772265461904536), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669)}\nTree:  (const(cos(-0.351230676831375)) + pow(cos(1.4416922241262404e-08), (x11)**(x60), (x52 / const((const((x53)**(0.3338681438332669)) / x49)))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6399071587752998), 3: np.float64(1.772265461904536), 4: np.float64(-0.6457256537476123), 5: np.float64(0.3338681438332669)}\nTree:  (const(cos(-0.6457256537476123)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-326.4232885335516), 1: np.float64(-326.92328853355207)}\nTree:  (-326.4232885335516 - -326.92328853355207)', 'Equation constants: {0: np.float64(0.4999999998584652), 1: np.float64(2.3961636273447927e-07)}\nTree:  *(0.4999999998584652, pow(cos(2.3961636273447927e-07), (x11)**(x21), (x51 - x87)), sin(x97))', 'Equation constants: {0: np.float64(-0.5000000000000825), 1: np.float64(1.3082409584012302e-08)}\nTree:  (-0.5000000000000825 + (cos(1.3082409584012302e-08))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.49999996770851296), 1: np.float64(-4.007683324623713e-05)}\nTree:  (0.49999996770851296 * (cos(-4.007683324623713e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(1.2825373403103706)}\nTree:  -(-40.568455720264936, const(cos(((1.2825373403103706 / 1.2825373403103706) x81 sin(x68)))), sin(x54))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, const(cos(x81)), (x54 sin (x46)**(x67)))', 'Equation constants: {0: np.float64(-0.5000000004888103), 1: np.float64(1.3960786097859478e-07)}\nTree:  (-0.5000000004888103 + (cos(1.3960786097859478e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-7601.134820793438), 1: np.float64(-15202.272562469607), 2: np.float64(0.5912316076611241), 3: np.float64(0.01568627109519398)}\nTree:  /(-7601.134820793438, const((const(cos(0.01568627109519398)))**(0.5912316076611241)), cos(x57), (x56 / x54))', 'Equation constants: {1: np.float64(0.49817557719484096), 2: np.float64(0.4981741762189736)}\nTree:  (const((0.4981741762189736)**(0.4981741762189736)) / (x56 / x54))', 'Equation constants: {0: np.float64(-81.42273125403705), 1: np.float64(-81.92273125403716)}\nTree:  -(const((x68 - x10)), -81.92273125403716, cos(x30))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029), 2: np.float64(0.5912316076611241), 3: np.float64(0.01568627109519398)}\nTree:  /(-5528.044501875671, const((const(cos(0.01568627109519398)))**(x37)), cos(x57), (x56 / x54))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.593040809678878), 4: np.float64(-0.351230676831375)}\nTree:  (const(cos(-0.351230676831375)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((1.593040809678878 / x31)))))', 'Equation constants: {0: np.float64(1.5036001891508959), 1: np.float64(1.2213783811067827), 2: np.float64(1.4695420263138113)}\nTree:  -(1.5036001891508959, (x56 / x54((1.4695420263138113 - x7))), (1.2213783811067827 / 1.2213783811067827))', 'Equation constants: {0: np.float64(-163.15625306660814), 1: np.float64(-163.6562530666084)}\nTree:  (-163.15625306660814 - -163.6562530666084)', 'Equation constants: {0: np.float64(-0.500000058831013), 1: np.float64(6.502798504498926e-05)}\nTree:  (-0.500000058831013 + (cos(6.502798504498926e-05))**((x11)**(x86)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669), 6: np.float64(0.49384384873079146), 7: np.float64(-1.9549626026621052)}\nTree:  +(const(cos(-0.351230676831375)), pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))), (0.49384384873079146)**(x53(sin(-1.9549626026621052))), (x85 * x98))', 'Equation constants: {0: np.float64(-0.5000000002730092), 1: np.float64(8.594345355209314e-07)}\nTree:  (-0.5000000002730092 + (cos(8.594345355209314e-07))**((x11)**(x21)))']
MSE: [np.float64(0.2500000000000004), np.float64(0.25000000000000006), np.float64(0.7706165484386848), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000000004), np.float64(0.25), np.float64(0.2500000000456235), np.float64(0.25), np.float64(0.25), np.float64(0.44247666306333433), np.float64(0.2500000000000438), np.float64(0.25000000000003464), np.float64(0.24982464193686219), np.float64(0.25), np.float64(0.2500000000000007), np.float64(0.25), np.float64(0.251529672343502), np.float64(0.25), np.float64(0.2500000000676241), np.float64(0.25), np.float64(0.25000000000062206)]
Generators: ['Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05296410503068502, unit=0.5971006062744242)', 'Generator(mode=real, range=(-1.8105998227983586, 3.7190001772016408), n_g=303, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=732, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.7935051889611433)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.006359225224023998, unit=0.5902104711281231)', 'Generator(mode=real, range=(0.1808000000000001, 1.8192), n_g=970, sigma_y=0.01706679198982958, unit=1.0284077004989516)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=367, sigma_y=0.006359225224023999, unit=0.5311894240153108)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.5311894240153108)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.4346095287397997)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.5311894240153108)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.5311894240153108)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006359225224023999, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=700, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.5311894240153108)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=303, sigma_y=0.006359225224023998, unit=0.5902104711281231)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05296410503068502, unit=0.6634451180826935)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.005087380179219199, unit=0.7213683536010393)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=271, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-1.8105998227983586, 3.7190001772016408), n_g=303, sigma_y=0.009538837836035997, unit=0.4828994763775552)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=271, sigma_y=0.007631070268828798, unit=0.5311894240153108)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.04237128402454802, unit=0.5971006062744242)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.7935051889611433)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05296410503068502, unit=0.5971006062744242)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=668, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-1.2356751808456155, 2.6043248191543853), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.4828994763775552)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.006359225224023999, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.32579982279835884, 2.2342001772016413), n_g=335, sigma_y=0.006359225224023998, unit=0.5902104711281231)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.4828994763775552)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=700, sigma_y=0.012861823364613244, unit=0.8198815863916158)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.4346095287397997)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.5311894240153108)', 'Generator(mode=real, range=(-0.9156751808456153, 2.284324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.007631070268828797, unit=0.5902104711281231)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.013735926483891835, unit=0.4828994763775552)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=335, sigma_y=0.009157284322594557, unit=0.5902104711281231)']
Gen 22: 23 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-326.4232885335516), 1: np.float64(-326.92328853355207)}\nTree:  (-326.4232885335516 - -326.92328853355207)', 'Equation constants: {0: np.float64(0.4999999998584652), 1: np.float64(2.3961636273447927e-07)}\nTree:  *(0.4999999998584652, pow(cos(2.3961636273447927e-07), (x11)**(x21), (x51 - x87)), sin(x97))', 'Equation constants: {0: np.float64(-0.5000000000000825), 1: np.float64(1.3082409584012302e-08)}\nTree:  (-0.5000000000000825 + (cos(1.3082409584012302e-08))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.49999996770851296), 1: np.float64(-4.007683324623713e-05)}\nTree:  (0.49999996770851296 * (cos(-4.007683324623713e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(1.2825373403103706)}\nTree:  -(-40.568455720264936, const(cos(((1.2825373403103706 / 1.2825373403103706) x81 sin(x68)))), sin(x54))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, const(cos(x81)), (x54 sin (x46)**(x67)))', 'Equation constants: {0: np.float64(-0.5000000004888103), 1: np.float64(1.3960786097859478e-07)}\nTree:  (-0.5000000004888103 + (cos(1.3960786097859478e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-7601.134820793438), 1: np.float64(-15202.272562469607), 2: np.float64(0.5912316076611241), 3: np.float64(0.01568627109519398)}\nTree:  /(-7601.134820793438, const((const(cos(0.01568627109519398)))**(0.5912316076611241)), cos(x57), (x56 / x54))', 'Equation constants: {1: np.float64(0.49817557719484096), 2: np.float64(0.4981741762189736)}\nTree:  (const((0.4981741762189736)**(0.4981741762189736)) / (x56 / x54))', 'Equation constants: {0: np.float64(-81.42273125403705), 1: np.float64(-81.92273125403716)}\nTree:  -(const((x68 - x10)), -81.92273125403716, cos(x30))', 'Equation constants: {0: np.float64(-5528.044501875671), 1: np.float64(-11056.08841564029), 2: np.float64(0.5912316076611241), 3: np.float64(0.01568627109519398)}\nTree:  /(-5528.044501875671, const((const(cos(0.01568627109519398)))**(x37)), cos(x57), (x56 / x54))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.593040809678878), 4: np.float64(-0.351230676831375)}\nTree:  (const(cos(-0.351230676831375)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((1.593040809678878 / x31)))))', 'Equation constants: {0: np.float64(1.5036001891508959), 1: np.float64(1.2213783811067827), 2: np.float64(1.4695420263138113)}\nTree:  -(1.5036001891508959, (x56 / x54((1.4695420263138113 - x7))), (1.2213783811067827 / 1.2213783811067827))', 'Equation constants: {0: np.float64(-163.15625306660814), 1: np.float64(-163.6562530666084)}\nTree:  (-163.15625306660814 - -163.6562530666084)', 'Equation constants: {0: np.float64(-0.500000058831013), 1: np.float64(6.502798504498926e-05)}\nTree:  (-0.500000058831013 + (cos(6.502798504498926e-05))**((x11)**(x86)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669), 6: np.float64(0.49384384873079146), 7: np.float64(-1.9549626026621052)}\nTree:  +(const(cos(-0.351230676831375)), pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))), (0.49384384873079146)**(x53(sin(-1.9549626026621052))), (x85 * x98))', 'Equation constants: {0: np.float64(-0.5000000002730092), 1: np.float64(8.594345355209314e-07)}\nTree:  (-0.5000000002730092 + (cos(8.594345355209314e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-81.43320592020791), 1: np.float64(-81.93320592020802), 2: np.float64(1.2825373403103706)}\nTree:  -(-81.43320592020791, const(cos(((1.2825373403103706 / 1.2825373403103706) x81 sin(x68)))), sin(x54))', 'Equation constants: {0: np.float64(0.4999999725222613), 1: np.float64(6.378043210783911e-05)}\nTree:  (0.4999999725222613 * (cos(6.378043210783911e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.49999999915404747), 1: np.float64(2.6035694807589056e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.3841381437130451), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(sin(-0.3841381437130451)) + pow(cos(2.6035694807589056e-08), (x11)**(x21), (0.8669610034707098 / const((((x53)**(const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-7601.134820793438), 1: np.float64(-15202.272562469607), 2: np.float64(0.5912316076611241), 3: np.float64(0.01568627109519398)}\nTree:  /(-7601.134820793438, ((const(cos(0.01568627109519398)))**(0.5912316076611241) const (x24 * x98)), cos(x57), (x56 / x54))', 'Equation constants: {0: np.float64(-81.42273125403705), 1: np.float64(-81.92273125403716)}\nTree:  -(const((x68 - x10)), -81.92273125403716, cos(x30))', 'Equation constants: {0: np.float64(-0.4989292187010277), 1: np.float64(0.0988516882034253)}\nTree:  (-0.4989292187010277 + (cos(0.0988516882034253))**((x11 - x21)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 4: np.float64(1.0)}\nTree:  (const(cos(1.0)) + (cos(1.4416922241262404e-08))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, const(cos(x81)), sin((x46)**(x67)))', 'Equation constants: {0: np.float64(-0.5000000002730092), 1: np.float64(8.594345355209314e-07)}\nTree:  (-0.5000000002730092 + (cos(8.594345355209314e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, const(cos(x81)), (x54 sin (x59)**(x67)))', 'Equation constants: {0: np.float64(-0.4989292257976518), 1: np.float64(0.09885149801805634), 2: np.float64(-0.6621409606266639), 3: np.float64(1.593040809678878), 4: np.float64(-0.351230676831375)}\nTree:  (const(cos(-0.351230676831375)) + pow(cos(0.09885149801805634), (x11 - x21), (x52 / const((1.593040809678878 / x31)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836)}\nTree:  -(-163.24416045910954, ((x2 / -1.527546221146158) const (1.254046649674836 - 1.254046649674836)), sin(x17))', 'Equation constants: {1: np.float64(0.4981753527959238), 2: np.float64(0.49817529659475757)}\nTree:  (const((0.49817529659475757)**(0.49817529659475757)) / (x56 / x54))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-1.5817346648193569)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((((x53)**(const((x21 - x45((-1.5817346648193569 * -1.5817346648193569))))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.5487014157791552), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669), 6: np.float64(0.49384384873079146), 7: np.float64(-1.9549626026621052)}\nTree:  +(const(cos(-0.351230676831375)), pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))), (0.49384384873079146)**(x53(sin(-1.9549626026621052))), (x85 * x98))', 'Equation constants: {0: np.float64(0.44129201465379575), 1: np.float64(2.113906315243429e-09)}\nTree:  (0.44129201465379575 + (sin(2.113906315243429e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.49999999999999495), 1: np.float64(6.145247585768602e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(6.145247585768602e-08), (x11)**(x21), (0.8669610034707098 / const((((x3)**(const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669), 6: np.float64(0.49384384873079146), 7: np.float64(-1.9549626026621052), 8: np.float64(-0.8010564508209761)}\nTree:  +(const(cos(-0.351230676831375)), pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const(pow(x53, 0.3338681438332669, (-0.8010564508209761 + -0.8010564508209761))) / x31)))), (0.49384384873079146)**(x53(sin(-1.9549626026621052))))', 'Equation constants: {0: np.float64(-0.41149808700431734), 1: np.float64(-0.4243755457587392), 2: np.float64(-0.9819327567424798), 3: np.float64(1.6487086928786074), 6: np.float64(1.0021596461857885)}\nTree:  (-0.41149808700431734 + (cos(-0.4243755457587392))**((1.0021596461857885)**(const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-326.1205934253204), 1: np.float64(-326.6205934253208)}\nTree:  (-326.1205934253204 - const((x97)**(x11)))', 'Equation constants: {0: np.float64(-0.5000000039046478), 1: np.float64(-3.928121530295535e-05), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669), 6: np.float64(0.49384384873079146), 7: np.float64(-1.9549626026621052)}\nTree:  +(const(cos(-0.351230676831375)), pow(cos(-3.928121530295535e-05), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))), (0.49384384873079146)**(x53(sin(-1.9549626026621052))))', 'Equation constants: {0: np.float64(-0.5000000051803015), 1: np.float64(1.4256638929392054e-05)}\nTree:  (-0.5000000051803015 + (cos(1.4256638929392054e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.4999999662097516), 1: np.float64(2.5560690206413988e-05)}\nTree:  *(0.4999999662097516, (cos(const(cos(x40))))**((x11)**(x21)), sin(x97))']
MSE: [np.float64(0.25), np.float64(0.2500000002343971), np.float64(315620378.5939016), np.float64(0.25), np.float64(0.25000000000000927), np.float64(0.25), np.float64(0.24865784307397815), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000062206), np.float64(0.25), np.float64(0.24865784307401173), np.float64(0.25), np.float64(0.249824641922328), np.float64(0.25), np.float64(0.25), np.float64(0.25344663021614944), np.float64(0.25000000000000006), np.float64(0.48659301470403515), np.float64(0.25), np.float64(0.2500000000044762), np.float64(0.25), np.float64(0.2500000001050807), np.float64(0.25000000002721773), np.float64(0.2500000000632097)]
Generators: ['Generator(mode=real, range=(-1.2356751808456155, 2.6043248191543853), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=303, sigma_y=0.006359225224023999, unit=0.4828994763775552)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.006359225224023999, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.32579982279835884, 2.2342001772016413), n_g=335, sigma_y=0.006359225224023998, unit=0.5902104711281231)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.4828994763775552)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=700, sigma_y=0.012861823364613244, unit=0.8198815863916158)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.4346095287397997)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.5311894240153108)', 'Generator(mode=real, range=(-0.9156751808456153, 2.284324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.007631070268828797, unit=0.5902104711281231)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.013735926483891835, unit=0.4828994763775552)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=335, sigma_y=0.009157284322594557, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=668, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=660, sigma_y=0.04237128402454802, unit=0.5971006062744242)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.007949031530029998, unit=0.4828994763775552)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=668, sigma_y=0.010289458691690595, unit=0.9109795404351286)', 'Generator(mode=real, range=(-1.8124270963165685, 2.9875729036834313), n_g=335, sigma_y=0.010988741187113469, unit=0.5902104711281231)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.5311894240153108)', 'Generator(mode=real, range=(-1.8105998227983586, 3.7190001772016408), n_g=303, sigma_y=0.009538837836035997, unit=0.5311894240153108)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.007949031530029998, unit=0.4346095287397997)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.04237128402454802, unit=0.6634451180826935)', 'Generator(mode=real, range=(-0.5203598227983588, 2.428760177201641), n_g=303, sigma_y=0.007949031530029998, unit=0.4346095287397997)', 'Generator(mode=real, range=(-3.160152722100458, 3.7518472778995413), n_g=303, sigma_y=0.005087380179219199, unit=0.7213683536010393)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.013735926483891835, unit=0.5311894240153108)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=367, sigma_y=0.006359225224023999, unit=0.5843083664168419)', 'Generator(mode=real, range=(-1.2356751808456155, 2.6043248191543853), n_g=335, sigma_y=0.005299354353353332, unit=0.7213683536010393)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=271, sigma_y=0.009157284322594557, unit=0.5311894240153108)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.006359225224023999, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=732, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=700, sigma_y=0.012861823364613244, unit=0.8198815863916158)', 'Generator(mode=real, range=(-1.8742403740040108, 2.925759625995989), n_g=303, sigma_y=0.006359225224023999, unit=0.5311894240153108)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.5311894240153108)', 'Generator(mode=real, range=(-0.32579982279835884, 2.2342001772016413), n_g=367, sigma_y=0.006359225224023998, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.32579982279835884, 2.2342001772016413), n_g=335, sigma_y=0.006359225224023998, unit=0.5902104711281231)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.04237128402454802, unit=0.5971006062744242)']
Gen 23: 20 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-7601.134820793438), 1: np.float64(-15202.272562469607), 2: np.float64(0.5912316076611241), 3: np.float64(0.01568627109519398)}\nTree:  /(-7601.134820793438, ((const(cos(0.01568627109519398)))**(0.5912316076611241) const (x24 * x98)), cos(x57), (x56 / x54))', 'Equation constants: {0: np.float64(-81.42273125403705), 1: np.float64(-81.92273125403716)}\nTree:  -(const((x68 - x10)), -81.92273125403716, cos(x30))', 'Equation constants: {0: np.float64(-0.4989292187010277), 1: np.float64(0.0988516882034253)}\nTree:  (-0.4989292187010277 + (cos(0.0988516882034253))**((x11 - x21)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 4: np.float64(1.0)}\nTree:  (const(cos(1.0)) + (cos(1.4416922241262404e-08))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, const(cos(x81)), sin((x46)**(x67)))', 'Equation constants: {0: np.float64(-0.5000000002730092), 1: np.float64(8.594345355209314e-07)}\nTree:  (-0.5000000002730092 + (cos(8.594345355209314e-07))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, const(cos(x81)), (x54 sin (x59)**(x67)))', 'Equation constants: {0: np.float64(-0.4989292257976518), 1: np.float64(0.09885149801805634), 2: np.float64(-0.6621409606266639), 3: np.float64(1.593040809678878), 4: np.float64(-0.351230676831375)}\nTree:  (const(cos(-0.351230676831375)) + pow(cos(0.09885149801805634), (x11 - x21), (x52 / const((1.593040809678878 / x31)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836)}\nTree:  -(-163.24416045910954, ((x2 / -1.527546221146158) const (1.254046649674836 - 1.254046649674836)), sin(x17))', 'Equation constants: {1: np.float64(0.4981753527959238), 2: np.float64(0.49817529659475757)}\nTree:  (const((0.49817529659475757)**(0.49817529659475757)) / (x56 / x54))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-1.5817346648193569)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((((x53)**(const((x21 - x45((-1.5817346648193569 * -1.5817346648193569))))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.5487014157791552), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669), 6: np.float64(0.49384384873079146), 7: np.float64(-1.9549626026621052)}\nTree:  +(const(cos(-0.351230676831375)), pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))), (0.49384384873079146)**(x53(sin(-1.9549626026621052))), (x85 * x98))', 'Equation constants: {0: np.float64(0.44129201465379575), 1: np.float64(2.113906315243429e-09)}\nTree:  (0.44129201465379575 + (sin(2.113906315243429e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.49999999999999495), 1: np.float64(6.145247585768602e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(6.145247585768602e-08), (x11)**(x21), (0.8669610034707098 / const((((x3)**(const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669), 6: np.float64(0.49384384873079146), 7: np.float64(-1.9549626026621052), 8: np.float64(-0.8010564508209761)}\nTree:  +(const(cos(-0.351230676831375)), pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const(pow(x53, 0.3338681438332669, (-0.8010564508209761 + -0.8010564508209761))) / x31)))), (0.49384384873079146)**(x53(sin(-1.9549626026621052))))', 'Equation constants: {0: np.float64(-0.41149808700431734), 1: np.float64(-0.4243755457587392), 2: np.float64(-0.9819327567424798), 3: np.float64(1.6487086928786074), 6: np.float64(1.0021596461857885)}\nTree:  (-0.41149808700431734 + (cos(-0.4243755457587392))**((1.0021596461857885)**(const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-326.1205934253204), 1: np.float64(-326.6205934253208)}\nTree:  (-326.1205934253204 - const((x97)**(x11)))', 'Equation constants: {0: np.float64(-0.5000000039046478), 1: np.float64(-3.928121530295535e-05), 2: np.float64(-0.6621409606266639), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669), 6: np.float64(0.49384384873079146), 7: np.float64(-1.9549626026621052)}\nTree:  +(const(cos(-0.351230676831375)), pow(cos(-3.928121530295535e-05), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))), (0.49384384873079146)**(x53(sin(-1.9549626026621052))))', 'Equation constants: {0: np.float64(-0.5000000051803015), 1: np.float64(1.4256638929392054e-05)}\nTree:  (-0.5000000051803015 + (cos(1.4256638929392054e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.4999999662097516), 1: np.float64(2.5560690206413988e-05)}\nTree:  *(0.4999999662097516, (cos(const(cos(x40))))**((x11)**(x21)), sin(x97))', 'Equation constants: {0: np.float64(0.46793518693318154), 1: np.float64(-0.118325839874736)}\nTree:  (0.46793518693318154 / (cos(-0.118325839874736))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(1.3862130309870322)}\nTree:  -(-40.568455720264936, const(cos(((1.3862130309870322 / 1.3862130309870322) x81 sin(x68)))), sin(x54))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836)}\nTree:  (-163.24416045910954 - ((x2 / -1.527546221146158) const (1.254046649674836 - 1.254046649674836)))', 'Equation constants: {0: np.float64(-81.43320592020791), 1: np.float64(-81.93320592020802), 2: np.float64(1.2825373403103706)}\nTree:  -(-81.43320592020791, const(cos(((1.2825373403103706 / 1.2825373403103706) x81 sin(x68)))), sin(x54), (x62 - x20))', 'Equation constants: {0: np.float64(-0.5000000031053127), 1: np.float64(5.623475489334686e-06)}\nTree:  (-0.5000000031053127 + (cos(5.623475489334686e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-653.0285205450048), 1: np.float64(-653.5285205450056)}\nTree:  (-653.0285205450048 - -653.5285205450056)', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(-0.5899202900165008)}\nTree:  -(-40.568455720264936, const(cos(x81)), sin(x54, (x59)**(x67), cos(-0.5899202900165008)))', 'Equation constants: {0: np.float64(0.4999999921818654), 1: np.float64(2.1975543349839845e-05)}\nTree:  *(0.4999999921818654, (cos(const(cos(x40))))**((x11)**(x21)), sin(x97))', 'Equation constants: {0: np.float64(-0.5427015002068458), 1: np.float64(0.12320642911857839), 2: np.float64(-52.253154683319956), 3: np.float64(1.593040809678878), 4: np.float64(-0.351230676831375)}\nTree:  (const(cos(-0.351230676831375)) + (cos(0.12320642911857839))**((x52 / const((1.593040809678878 / x31)))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 4: np.float64(1.0), 5: np.float64(1.0)}\nTree:  (const(cos(1.0)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x74 - 1.0)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.593040809678878), 4: np.float64(-0.351230676831375)}\nTree:  (const(cos(-0.351230676831375)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 - const((1.593040809678878 / x31)))))', 'Equation constants: {0: np.float64(-0.5000000000000825), 1: np.float64(1.3082409584012302e-08)}\nTree:  (-0.5000000000000825 + (cos(1.3082409584012302e-08))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000002694751), 1: np.float64(-1.002148549235127e-06)}\nTree:  (-0.5000000002694751 + (cos(-1.002148549235127e-06))**((x11)**(x72)))', 'Equation constants: {0: np.float64(-0.49999999915405846), 1: np.float64(2.6053573444402813e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(sin(-0.376643169054988)) + pow(cos(2.6053573444402813e-08), (x11)**(x21), (0.8669610034707098 / const((((x3)**(const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(-0.862936629008348)}\nTree:  -(-163.24416045910954, ((x2 / const(sin(-0.862936629008348))) const (1.254046649674836 - 1.254046649674836)), sin(x17))', 'Equation constants: {0: np.float64(-7601.134820793438), 1: np.float64(-15202.272562469607), 2: np.float64(0.5912316076611241), 3: np.float64(0.01568627109519398)}\nTree:  /(-7601.134820793438, ((const(cos(0.01568627109519398)))**(0.5912316076611241) const (x24 * x98)), cos(x57), (x56 / x54))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.44129201465379575), 1: np.float64(2.113906315243429e-09)}\nTree:  (0.44129201465379575 + (sin(2.113906315243429e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158)}\nTree:  -(-163.24416045910954, const((x2 / -1.527546221146158)), sin(x17))', 'Equation constants: {0: np.float64(-0.4130183828156975), 1: np.float64(-0.4201701390497523), 2: np.float64(-0.9819325654793464), 6: np.float64(0.9999751909043867)}\nTree:  (-0.4130183828156975 + (cos(-0.4201701390497523))**((0.9999751909043867)**(-0.9819325654793464)))']
MSE: [np.float64(0.24995350996894902), np.float64(0.25), np.float64(0.25), np.float64(315042444.0860946), np.float64(0.25), np.float64(0.25000000000240025), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000191355), np.float64(0.24943467538390757), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000003178), np.float64(0.25), np.float64(0.25), np.float64(0.7299044114997227), np.float64(0.25000000000000927), np.float64(0.3732281240994539), np.float64(0.25), np.float64(0.5053289036886432), np.float64(0.25344663021614944), np.float64(0.25), np.float64(43320216584.92834), np.float64(0.2500000000147323)]
Generators: ['Generator(mode=real, range=(-3.160152722100458, 3.7518472778995413), n_g=303, sigma_y=0.005087380179219199, unit=0.7213683536010393)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.013735926483891835, unit=0.5311894240153108)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=367, sigma_y=0.006359225224023999, unit=0.5843083664168419)', 'Generator(mode=real, range=(-1.2356751808456155, 2.6043248191543853), n_g=335, sigma_y=0.005299354353353332, unit=0.7213683536010393)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=271, sigma_y=0.009157284322594557, unit=0.5311894240153108)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.006359225224023999, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=732, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=700, sigma_y=0.012861823364613244, unit=0.8198815863916158)', 'Generator(mode=real, range=(-1.8742403740040108, 2.925759625995989), n_g=303, sigma_y=0.006359225224023999, unit=0.5311894240153108)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.5311894240153108)', 'Generator(mode=real, range=(-0.32579982279835884, 2.2342001772016413), n_g=367, sigma_y=0.006359225224023998, unit=0.5902104711281231)', 'Generator(mode=real, range=(-0.32579982279835884, 2.2342001772016413), n_g=335, sigma_y=0.006359225224023998, unit=0.5902104711281231)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.04237128402454802, unit=0.5971006062744242)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.006359225224023999, unit=0.6492315182409354)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.033897027219638415, unit=0.6634451180826935)', 'Generator(mode=real, range=(-0.6457998227983589, 2.554200177201641), n_g=335, sigma_y=0.007631070268828797, unit=0.5902104711281231)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.572536945005067, 3.0354630549949326), n_g=303, sigma_y=0.009538837836035997, unit=0.4828994763775552)', 'Generator(mode=real, range=(-0.32579982279835884, 2.2342001772016413), n_g=335, sigma_y=0.006359225224023998, unit=0.5902104711281231)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.32579982279835884, 2.2342001772016413), n_g=367, sigma_y=0.006359225224023998, unit=0.5902104711281231)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.0164831117806702, unit=0.4828994763775552)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.8712054175556263, 2.9687945824443736), n_g=700, sigma_y=0.012861823364613244, unit=0.8198815863916158)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=660, sigma_y=0.04237128402454802, unit=0.6568106669018666)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=732, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-3.851352722100458, 4.443047277899542), n_g=303, sigma_y=0.005087380179219199, unit=0.7213683536010393)', 'Generator(mode=real, range=(-3.9057693975632892, 4.094230602436711), n_g=660, sigma_y=0.04237128402454802, unit=0.5971006062744242)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.4346095287397997)', 'Generator(mode=real, range=(-0.7654281111525123, 2.9209718888474874), n_g=271, sigma_y=0.007949031530029998, unit=0.4346095287397997)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.006359225224023999, unit=0.4346095287397997)', 'Generator(mode=real, range=(-5, 5), n_g=628, sigma_y=0.04237128402454802, unit=0.5971006062744242)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.7213683536010393)', 'Generator(mode=real, range=(-1.304, 3.304), n_g=700, sigma_y=0.012861823364613244, unit=0.8198815863916158)', 'Generator(mode=real, range=(-0.9156751808456153, 2.284324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.7213683536010393)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05084554082945762, unit=0.5971006062744242)']
Gen 24: 25 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-653.0285205450048), 1: np.float64(-653.5285205450056)}\nTree:  (-653.0285205450048 - -653.5285205450056)', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(-0.5899202900165008)}\nTree:  -(-40.568455720264936, const(cos(x81)), sin(x54, (x59)**(x67), cos(-0.5899202900165008)))', 'Equation constants: {0: np.float64(0.4999999921818654), 1: np.float64(2.1975543349839845e-05)}\nTree:  *(0.4999999921818654, (cos(const(cos(x40))))**((x11)**(x21)), sin(x97))', 'Equation constants: {0: np.float64(-0.5427015002068458), 1: np.float64(0.12320642911857839), 2: np.float64(-52.253154683319956), 3: np.float64(1.593040809678878), 4: np.float64(-0.351230676831375)}\nTree:  (const(cos(-0.351230676831375)) + (cos(0.12320642911857839))**((x52 / const((1.593040809678878 / x31)))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 4: np.float64(1.0), 5: np.float64(1.0)}\nTree:  (const(cos(1.0)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x74 - 1.0)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.593040809678878), 4: np.float64(-0.351230676831375)}\nTree:  (const(cos(-0.351230676831375)) + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 - const((1.593040809678878 / x31)))))', 'Equation constants: {0: np.float64(-0.5000000000000825), 1: np.float64(1.3082409584012302e-08)}\nTree:  (-0.5000000000000825 + (cos(1.3082409584012302e-08))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000002694751), 1: np.float64(-1.002148549235127e-06)}\nTree:  (-0.5000000002694751 + (cos(-1.002148549235127e-06))**((x11)**(x72)))', 'Equation constants: {0: np.float64(-0.49999999915405846), 1: np.float64(2.6053573444402813e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(sin(-0.376643169054988)) + pow(cos(2.6053573444402813e-08), (x11)**(x21), (0.8669610034707098 / const((((x3)**(const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(-0.862936629008348)}\nTree:  -(-163.24416045910954, ((x2 / const(sin(-0.862936629008348))) const (1.254046649674836 - 1.254046649674836)), sin(x17))', 'Equation constants: {0: np.float64(-7601.134820793438), 1: np.float64(-15202.272562469607), 2: np.float64(0.5912316076611241), 3: np.float64(0.01568627109519398)}\nTree:  /(-7601.134820793438, ((const(cos(0.01568627109519398)))**(0.5912316076611241) const (x24 * x98)), cos(x57), (x56 / x54))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.44129201465379575), 1: np.float64(2.113906315243429e-09)}\nTree:  (0.44129201465379575 + (sin(2.113906315243429e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158)}\nTree:  -(-163.24416045910954, const((x2 / -1.527546221146158)), sin(x17))', 'Equation constants: {0: np.float64(-0.4130183828156975), 1: np.float64(-0.4201701390497523), 2: np.float64(-0.9819325654793464), 6: np.float64(0.9999751909043867)}\nTree:  (-0.4130183828156975 + (cos(-0.4201701390497523))**((0.9999751909043867)**(-0.9819325654793464)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.593040809678878)}\nTree:  (-0.500000000000083 + pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 - const((1.593040809678878 / x31)))))', 'Equation constants: {0: np.float64(-0.40947446925429254), 1: np.float64(-0.428445066088683), 2: np.float64(-0.9152131275182004), 3: np.float64(1.6487086928786074), 6: np.float64(0.997965693481122)}\nTree:  (-0.40947446925429254 + (cos(-0.428445066088683))**((0.997965693481122)**(const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 3: np.float64(1.0)}\nTree:  (-163.24416045910954 - ((x2 / x56) const (1.0 - 1.0)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-1.8207099419018111)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**(pow(x11, x21, (x72 + -1.8207099419018111))))', 'Equation constants: {0: np.float64(-0.5426997008683438), 1: np.float64(-0.12320632249892471), 2: np.float64(-52.26577492632773), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669), 6: np.float64(0.49384384873079146), 7: np.float64(-1.9549626026621052)}\nTree:  +(const(cos(-0.351230676831375)), (cos(-0.12320632249892471))**((x52 / const((const((x53)**(0.3338681438332669)) / x31)))), (0.49384384873079146)**(x53(sin(-1.9549626026621052))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, const(cos(x81)), (x54 sin (x59)**(x67)))', 'Equation constants: {0: np.float64(-652.5715953198693), 1: np.float64(-653.0715953198701)}\nTree:  (-652.5715953198693 - const((x97)**(x11)))', 'Equation constants: {0: np.float64(-7601.134820793438), 1: np.float64(-15202.272562469607), 2: np.float64(0.5912316076611241)}\nTree:  /(-7601.134820793438, ((0.5912316076611241)**(0.5912316076611241) const (x24 * x98)), cos(x57), (x56 / x54))', 'Equation constants: {1: np.float64(0.49817534379399125), 2: np.float64(0.49817534153943926)}\nTree:  (const(pow(0.49817534153943926, 0.49817534153943926, (x81)**(x46))) / (x56 / x54))', 'Equation constants: {0: np.float64(-0.49999999915405846), 1: np.float64(2.6053573444402813e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-1.4750356133679396)}\nTree:  (const(sin(-0.376643169054988)) + pow(cos(2.6053573444402813e-08), (x11)**(x21), (0.8669610034707098 / ((((x3)**(const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31) const cos(-1.4750356133679396)))))', 'Equation constants: {0: np.float64(0.4528294796804728), 1: np.float64(2.113906315243429e-09)}\nTree:  (0.4528294796804728 + (sin(2.113906315243429e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000530153216), 1: np.float64(-6.81126950124858e-05)}\nTree:  (-0.5000000530153216 + (cos(-6.81126950124858e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.5487014157791552), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669), 6: np.float64(0.49384384873079146), 7: np.float64(-1.9549626026621052)}\nTree:  +(const(cos(-0.351230676831375)), pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))), (0.49384384873079146)**(x53(sin(-1.9549626026621052))), (x96 * x98))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**((x72)**(x21)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 4: np.float64(1.0), 5: np.float64(1.0)}\nTree:  (const(cos(1.0)) + (cos(const((1.0 + 1.0))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342)}\nTree:  -(-163.24416045910954, ((x2((x38 * 0.10684533015999342)) / -1.527546221146158) const (1.254046649674836 - 1.254046649674836)), sin(x17))', 'Equation constants: {0: np.float64(0.50000000001586), 1: np.float64(7.651747284269827e-07)}\nTree:  (0.50000000001586 * (cos(const(cos(x40))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(-0.5899202900165008), 3: np.float64(-0.5058469879922032)}\nTree:  -(-40.568455720264936, const((x81 cos (-0.5058469879922032 * -0.5058469879922032))), sin(x54, (x59)**(x67), cos(-0.5899202900165008)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000002479092), 1: np.float64(-2.773185424855867e-06)}\nTree:  (-0.5000000002479092 + (cos(-2.773185424855867e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, const(cos(x81)), (x54 sin (x45)**(x67)))', 'Equation constants: {0: np.float64(-0.5000000000000825), 1: np.float64(1.3082409584012302e-08)}\nTree:  (-0.5000000000000825 + (cos(1.3082409584012302e-08))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.49999999999999495), 1: np.float64(6.145247585768602e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-0.3909662561987739)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(const(cos(-0.3909662561987739))), (x11)**(x21), (0.8669610034707098 / const((((x3)**(const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(const((x21 - x45((1.0 * 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(1.3862130309870322)}\nTree:  -(-40.568455720264936, (cos(((1.3862130309870322 / 1.3862130309870322) x81 sin(x68))) const (x63 * x14)), sin(x54))']
MSE: [np.float64(0.25), np.float64(0.2500000000588078), np.float64(0.25), np.float64(0.25), np.float64(0.24944589803829245), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000000927), np.float64(0.24982464192179774), np.float64(0.25), np.float64(0.25222505938554163), np.float64(0.2500000004910763), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000016676), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000146866), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000000006), np.float64(0.25), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-0.8712054175556263, 2.9687945824443736), n_g=700, sigma_y=0.012861823364613244, unit=0.8198815863916158)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=660, sigma_y=0.04237128402454802, unit=0.6568106669018666)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=732, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-3.851352722100458, 4.443047277899542), n_g=303, sigma_y=0.005087380179219199, unit=0.7213683536010393)', 'Generator(mode=real, range=(-3.9057693975632892, 4.094230602436711), n_g=660, sigma_y=0.04237128402454802, unit=0.5971006062744242)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.4346095287397997)', 'Generator(mode=real, range=(-0.7654281111525123, 2.9209718888474874), n_g=271, sigma_y=0.007949031530029998, unit=0.4346095287397997)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.006359225224023999, unit=0.4346095287397997)', 'Generator(mode=real, range=(-5, 5), n_g=628, sigma_y=0.04237128402454802, unit=0.5971006062744242)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.7213683536010393)', 'Generator(mode=real, range=(-1.304, 3.304), n_g=700, sigma_y=0.012861823364613244, unit=0.8198815863916158)', 'Generator(mode=real, range=(-0.9156751808456153, 2.284324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.7213683536010393)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05084554082945762, unit=0.5971006062744242)', 'Generator(mode=real, range=(-1.004704207192183, 2.835295792807818), n_g=335, sigma_y=0.005299354353353332, unit=0.7213683536010393)', 'Generator(mode=real, range=(-1.8105998227983586, 3.7190001772016408), n_g=303, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-4.40322236527159, 5.59677763472841), n_g=628, sigma_y=0.04237128402454802, unit=0.5971006062744242)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.5311894240153108)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=692, sigma_y=0.04237128402454802, unit=0.6568106669018666)', 'Generator(mode=real, range=(-1.2356751808456155, 2.6043248191543853), n_g=335, sigma_y=0.005299354353353332, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=700, sigma_y=0.012861823364613244, unit=0.8198815863916158)', 'Generator(mode=real, range=(-3.851352722100458, 4.443047277899542), n_g=303, sigma_y=0.005087380179219199, unit=0.7213683536010393)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.0406764326635661, unit=0.5971006062744242)', 'Generator(mode=real, range=(-3.9057693975632892, 4.094230602436711), n_g=660, sigma_y=0.04237128402454802, unit=0.5971006062744242)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05084554082945762, unit=0.6568106669018666)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=660, sigma_y=0.04237128402454802, unit=0.5971006062744242)', 'Generator(mode=real, range=(-3.160152722100458, 3.7518472778995413), n_g=303, sigma_y=0.005087380179219199, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.8516751808456153, 2.220324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.7213683536010393)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-4.680792722100458, 5.2724872778995415), n_g=303, sigma_y=0.005087380179219199, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.7213683536010393)', 'Generator(mode=real, range=(-2.4806377172754495, 4.43136228272455), n_g=367, sigma_y=0.006359225224023999, unit=0.6492315182409354)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=660, sigma_y=0.04237128402454802, unit=0.6568106669018666)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=335, sigma_y=0.006359225224023998, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=668, sigma_y=0.012861823364613244, unit=0.8198815863916158)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)']
Gen 25: 24 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.49999999915405846), 1: np.float64(2.6053573444402813e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-1.4750356133679396)}\nTree:  (const(sin(-0.376643169054988)) + pow(cos(2.6053573444402813e-08), (x11)**(x21), (0.8669610034707098 / ((((x3)**(const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31) const cos(-1.4750356133679396)))))', 'Equation constants: {0: np.float64(0.4528294796804728), 1: np.float64(2.113906315243429e-09)}\nTree:  (0.4528294796804728 + (sin(2.113906315243429e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000530153216), 1: np.float64(-6.81126950124858e-05)}\nTree:  (-0.5000000530153216 + (cos(-6.81126950124858e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.5487014157791552), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669), 6: np.float64(0.49384384873079146), 7: np.float64(-1.9549626026621052)}\nTree:  +(const(cos(-0.351230676831375)), pow(cos(1.4416922241262404e-08), (x11)**(x21), (x52 / const((const((x53)**(0.3338681438332669)) / x31)))), (0.49384384873079146)**(x53(sin(-1.9549626026621052))), (x96 * x98))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**((x72)**(x21)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 4: np.float64(1.0), 5: np.float64(1.0)}\nTree:  (const(cos(1.0)) + (cos(const((1.0 + 1.0))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342)}\nTree:  -(-163.24416045910954, ((x2((x38 * 0.10684533015999342)) / -1.527546221146158) const (1.254046649674836 - 1.254046649674836)), sin(x17))', 'Equation constants: {0: np.float64(0.50000000001586), 1: np.float64(7.651747284269827e-07)}\nTree:  (0.50000000001586 * (cos(const(cos(x40))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(-0.5899202900165008), 3: np.float64(-0.5058469879922032)}\nTree:  -(-40.568455720264936, const((x81 cos (-0.5058469879922032 * -0.5058469879922032))), sin(x54, (x59)**(x67), cos(-0.5899202900165008)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000002479092), 1: np.float64(-2.773185424855867e-06)}\nTree:  (-0.5000000002479092 + (cos(-2.773185424855867e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, const(cos(x81)), (x54 sin (x45)**(x67)))', 'Equation constants: {0: np.float64(-0.5000000000000825), 1: np.float64(1.3082409584012302e-08)}\nTree:  (-0.5000000000000825 + (cos(1.3082409584012302e-08))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.49999999999999495), 1: np.float64(6.145247585768602e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-0.3909662561987739)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(const(cos(-0.3909662561987739))), (x11)**(x21), (0.8669610034707098 / const((((x3)**(const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(const((x21 - x45((1.0 * 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(1.3862130309870322)}\nTree:  -(-40.568455720264936, (cos(((1.3862130309870322 / 1.3862130309870322) x81 sin(x68))) const (x63 * x14)), sin(x54))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0), 9: np.float64(1.0)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53((1.0 * x53)))**(const((x21 - x45((1.0 * 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000043220688), 1: np.float64(4.580689703204789e-06), 2: np.float64(-0.6621409606266639), 3: np.float64(1.593040809678878)}\nTree:  (-0.5000000043220688 + pow(cos(4.580689703204789e-06), (x11)**(x21), (x52 - const((1.593040809678878 / x31)))))', 'Equation constants: {0: np.float64(-0.49999999999999495), 1: np.float64(6.145247585768602e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-0.3909662561987739)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(const(cos(-0.3909662561987739))), (x11)**(x21), (0.8669610034707098 / const((((x3)**(const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(0.3338681438332669) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342)}\nTree:  -(-163.24416045910954, ((x2((x38 * 0.10684533015999342)) / -1.527546221146158) const (1.254046649674836 - x47)), sin(x17))', 'Equation constants: {0: np.float64(0.49999999985294513), 1: np.float64(-9.126395163031702e-07)}\nTree:  (0.49999999985294513 * (cos(const(cos(x40))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.499999999154685), 1: np.float64(-6.929324866207234e-08)}\nTree:  (0.499999999154685 * (cos(-6.929324866207234e-08))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.49999999915405846), 1: np.float64(2.6053573444402813e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-0.08847538708165548)}\nTree:  (const(sin(-0.376643169054988)) + pow(cos(2.6053573444402813e-08), (x11)**(x21), (0.8669610034707098 / const((((x3((x68 * -0.08847538708165548)))**(const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**(pow(x11, x21, (-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-0.4336714703890011), 1: np.float64(-0.3659809122141049), 2: np.float64(-1.1806322699052467), 3: np.float64(1.6487086928786074), 6: np.float64(0.998543227442536)}\nTree:  (-0.4336714703890011 + (cos(-0.3659809122141049))**((0.998543227442536)**(const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 4: np.float64(1.0), 5: np.float64(1.0)}\nTree:  (const(cos(1.0)) + (cos(const((x18 + 1.0))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-326.8006881916888), 1: np.float64(-327.30068819168923), 3: np.float64(1.0)}\nTree:  (-326.8006881916888 - ((x2 / x56) const (1.0 - 1.0)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(1.3862130309870322)}\nTree:  -(-40.568455720264936, (cos(x81((1.3862130309870322 / 1.3862130309870322))) const (x63 * x14)), sin(x54))', 'Equation constants: {0: np.float64(-0.5426990210120798), 1: np.float64(0.12320593274552791), 2: np.float64(-52.26911067199116), 3: np.float64(1.593040809678878), 4: np.float64(-0.4138932263018399)}\nTree:  (const(cos(-0.4138932263018399)) + (cos(0.12320593274552791))**((x52 / const((1.593040809678878 / x31)))))', 'Equation constants: {0: np.float64(-0.49999999915405846), 1: np.float64(2.6053573444402813e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(1.8370260125470992)}\nTree:  (const(sin(-0.376643169054988)) + pow(cos(2.6053573444402813e-08), (x11)**(x21), (0.8669610034707098 / const((((x3)**(const((x21(cos(1.8370260125470992)) - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342), 5: np.float64(-1.570584159936034)}\nTree:  -(-163.24416045910954, const((x2((x38 * 0.10684533015999342)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67 * -1.570584159936034)), sin(x17))', 'Equation constants: {0: np.float64(-0.5000000000011088), 1: np.float64(-4.8474248915802084e-08)}\nTree:  (-0.5000000000011088 + (cos(-4.8474248915802084e-08))**((x11)**(x72)))', 'Equation constants: {0: np.float64(-7601.134820793438), 1: np.float64(-15202.272562469607), 2: np.float64(0.5912316076611241)}\nTree:  /(-7601.134820793438, ((0.5912316076611241)**(0.5912316076611241) const (x24 * x98)), cos(x57), (x56 / x54))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37625977139044897), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.37625977139044897)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(const((x21 - x45((1.0 * 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, const(cos(x81)), sin(x54, (x59)**(x67), cos(x81)))', 'Equation constants: {0: np.float64(-653.0285205450048), 1: np.float64(-653.5285205450056), 2: np.float64(1.8929905288187467)}\nTree:  (-653.0285205450048 - const((1.8929905288187467 - x8)))', 'Equation constants: {0: np.float64(-0.5000000006622268), 1: np.float64(-7.3465670360471005e-06)}\nTree:  (-0.5000000006622268 + (cos(-7.3465670360471005e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5426985252232446), 1: np.float64(-0.12320585522890036), 2: np.float64(-52.272417055431234), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669), 6: np.float64(0.49384384873079146), 7: np.float64(-1.9549626026621052)}\nTree:  +(const(cos(-0.351230676831375)), (cos(-0.12320585522890036))**((x52 / const((const((x53)**(0.3338681438332669)) / x31)))), (0.49384384873079146)**(x53(sin(-1.9549626026621052))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158)}\nTree:  -(-163.24416045910954, const((x2 / -1.527546221146158)), sin(x17))']
MSE: [np.float64(0.25), np.float64(0.25000000001389105), np.float64(0.25000000000000006), np.float64(0.25), np.float64(0.25), np.float64(316636200.1322163), np.float64(0.25000000000049516), np.float64(0.25000000000000056), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000055962), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.2487281112790498), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000000133), np.float64(0.25000000000000927), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000030445), np.float64(0.24872811129954941), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-3.9057693975632892, 4.094230602436711), n_g=660, sigma_y=0.04237128402454802, unit=0.5971006062744242)', 'Generator(mode=real, range=(-5, 5), n_g=660, sigma_y=0.05084554082945762, unit=0.6568106669018666)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=660, sigma_y=0.04237128402454802, unit=0.5971006062744242)', 'Generator(mode=real, range=(-3.160152722100458, 3.7518472778995413), n_g=303, sigma_y=0.005087380179219199, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.8516751808456153, 2.220324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.7213683536010393)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-4.680792722100458, 5.2724872778995415), n_g=303, sigma_y=0.005087380179219199, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.7213683536010393)', 'Generator(mode=real, range=(-2.4806377172754495, 4.43136228272455), n_g=367, sigma_y=0.006359225224023999, unit=0.6492315182409354)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=660, sigma_y=0.04237128402454802, unit=0.6568106669018666)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=335, sigma_y=0.006359225224023998, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=668, sigma_y=0.012861823364613244, unit=0.8198815863916158)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=764, sigma_y=0.012861823364613244, unit=0.9109795404351286)', 'Generator(mode=real, range=(-2.561908435553047, 4.350091564446952), n_g=303, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=668, sigma_y=0.015434188037535893, unit=0.8198815863916158)', 'Generator(mode=real, range=(-2.3635598227983587, 4.271960177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.4457998227983588, 3.354200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.4780704816137797)', 'Generator(mode=real, range=(-5.40322236527159, 6.59677763472841), n_g=628, sigma_y=0.04237128402454802, unit=0.5971006062744242)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.4346095287397997)', 'Generator(mode=real, range=(-0.9156751808456153, 2.284324819154385), n_g=367, sigma_y=0.005299354353353332, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=367, sigma_y=0.007949031530029998, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.4806377172754495, 4.43136228272455), n_g=367, sigma_y=0.006359225224023999, unit=0.714154670065029)', 'Generator(mode=real, range=(-1.8105998227983586, 3.7190001772016408), n_g=303, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.4346095287397997)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=660, sigma_y=0.04237128402454802, unit=0.6568106669018666)', 'Generator(mode=real, range=(-4.680792722100458, 5.2724872778995415), n_g=303, sigma_y=0.006104856215063039, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=303, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.304, 3.304), n_g=700, sigma_y=0.012861823364613244, unit=0.7378934277524543)', 'Generator(mode=real, range=(-1.3211291994060939, 3.478870800593906), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-4.680792722100458, 5.2724872778995415), n_g=303, sigma_y=0.005087380179219199, unit=0.6492315182409354)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=399, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-3.851352722100458, 4.443047277899542), n_g=303, sigma_y=0.005087380179219199, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.8712054175556263, 2.9687945824443736), n_g=700, sigma_y=0.012861823364613244, unit=0.8198815863916158)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.5843083664168419)']
Gen 26: 23 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.49999999915405846), 1: np.float64(2.6053573444402813e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-0.08847538708165548)}\nTree:  (const(sin(-0.376643169054988)) + pow(cos(2.6053573444402813e-08), (x11)**(x21), (0.8669610034707098 / const((((x3((x68 * -0.08847538708165548)))**(const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**(pow(x11, x21, (-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-0.4336714703890011), 1: np.float64(-0.3659809122141049), 2: np.float64(-1.1806322699052467), 3: np.float64(1.6487086928786074), 6: np.float64(0.998543227442536)}\nTree:  (-0.4336714703890011 + (cos(-0.3659809122141049))**((0.998543227442536)**(const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 4: np.float64(1.0), 5: np.float64(1.0)}\nTree:  (const(cos(1.0)) + (cos(const((x18 + 1.0))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-326.8006881916888), 1: np.float64(-327.30068819168923), 3: np.float64(1.0)}\nTree:  (-326.8006881916888 - ((x2 / x56) const (1.0 - 1.0)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(1.3862130309870322)}\nTree:  -(-40.568455720264936, (cos(x81((1.3862130309870322 / 1.3862130309870322))) const (x63 * x14)), sin(x54))', 'Equation constants: {0: np.float64(-0.5426990210120798), 1: np.float64(0.12320593274552791), 2: np.float64(-52.26911067199116), 3: np.float64(1.593040809678878), 4: np.float64(-0.4138932263018399)}\nTree:  (const(cos(-0.4138932263018399)) + (cos(0.12320593274552791))**((x52 / const((1.593040809678878 / x31)))))', 'Equation constants: {0: np.float64(-0.49999999915405846), 1: np.float64(2.6053573444402813e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(1.8370260125470992)}\nTree:  (const(sin(-0.376643169054988)) + pow(cos(2.6053573444402813e-08), (x11)**(x21), (0.8669610034707098 / const((((x3)**(const((x21(cos(1.8370260125470992)) - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342), 5: np.float64(-1.570584159936034)}\nTree:  -(-163.24416045910954, const((x2((x38 * 0.10684533015999342)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67 * -1.570584159936034)), sin(x17))', 'Equation constants: {0: np.float64(-0.5000000000011088), 1: np.float64(-4.8474248915802084e-08)}\nTree:  (-0.5000000000011088 + (cos(-4.8474248915802084e-08))**((x11)**(x72)))', 'Equation constants: {0: np.float64(-7601.134820793438), 1: np.float64(-15202.272562469607), 2: np.float64(0.5912316076611241)}\nTree:  /(-7601.134820793438, ((0.5912316076611241)**(0.5912316076611241) const (x24 * x98)), cos(x57), (x56 / x54))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37625977139044897), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.37625977139044897)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(const((x21 - x45((1.0 * 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  -(-40.568455720264936, const(cos(x81)), sin(x54, (x59)**(x67), cos(x81)))', 'Equation constants: {0: np.float64(-653.0285205450048), 1: np.float64(-653.5285205450056), 2: np.float64(1.8929905288187467)}\nTree:  (-653.0285205450048 - const((1.8929905288187467 - x8)))', 'Equation constants: {0: np.float64(-0.5000000006622268), 1: np.float64(-7.3465670360471005e-06)}\nTree:  (-0.5000000006622268 + (cos(-7.3465670360471005e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5426985252232446), 1: np.float64(-0.12320585522890036), 2: np.float64(-52.272417055431234), 3: np.float64(1.6487086928786074), 4: np.float64(-0.351230676831375), 5: np.float64(0.3338681438332669), 6: np.float64(0.49384384873079146), 7: np.float64(-1.9549626026621052)}\nTree:  +(const(cos(-0.351230676831375)), (cos(-0.12320585522890036))**((x52 / const((const((x53)**(0.3338681438332669)) / x31)))), (0.49384384873079146)**(x53(sin(-1.9549626026621052))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158)}\nTree:  -(-163.24416045910954, const((x2 / -1.527546221146158)), sin(x17))', 'Equation constants: {1: np.float64(1.5707963211281233), 2: np.float64(1.5707963140470322), 3: np.float64(1.4416922241262405e-08), 5: np.float64(-0.5487014157791552), 6: np.float64(0.9284530801035172), 7: np.float64(1.6487086928786074)}\nTree:  +(pow(cos(1.5707963211281233), (x11)**(x21), (x52 / const((const((x53)**(-0.5487014157791552)) / x31)))), (0.9284530801035172)**(x53(sin(1.6487086928786074))), (x96 * x98))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**(pow(x11, x84, (-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000173286585), 1: np.float64(1.6006776227761303e-05)}\nTree:  (-0.5000000173286585 + (cos(1.6006776227761303e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000053911493), 1: np.float64(6.9200242446162886e-06)}\nTree:  (-0.5000000053911493 + (cos(6.9200242446162886e-06))**((x72)**(x21)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 4: np.float64(1.0), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (const(cos(1.0)) + pow(cos(const((1.0 + 1.0))), (x11)**(x21), (x18 + 1.0)))', 'Equation constants: {0: np.float64(-0.49999999999999495), 1: np.float64(6.145247585768602e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-0.3909662561987739)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(const(cos(-0.3909662561987739))), (x11)**(x21), (0.8669610034707098 / const((((x3)**(const((x21 - x45))) const (1.1108933922237667 * 1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37625977139044897), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.37625977139044897)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(const((x95 - x45((1.0 * 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-0.49999999999999495), 1: np.float64(6.145247585768602e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-0.3909662561987739)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(const(cos(-0.3909662561987739))), (x11)**(x21), (0.8669610034707098 / const((((x3 / const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(0.3338681438332669)}\nTree:  (-0.49999999999837963 + (cos(-3.6232771373581303e-05))**((1.0 / const((((x3)**(1.0) const (0.3338681438332669)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.4314554000492011), 1: np.float64(-0.3731324608196153), 2: np.float64(-1.176102148462795), 6: np.float64(1.0033934783635514)}\nTree:  (-0.4314554000492011 + (cos(-0.3731324608196153))**((1.0033934783635514)**(-1.176102148462795)))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.1812526566009754)}\nTree:  -(-163.24416045910954, ((x2((x38 * 0.1812526566009754)) / -1.527546221146158) const (1.254046649674836 - x47)), sin(x17))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37625977139044897), 6: np.float64(1.0)}\nTree:  (const(sin(-0.37625977139044897)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (1.0 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-0.5000000042590921), 1: np.float64(1.9785166586311583e-05)}\nTree:  (-0.5000000042590921 + (cos(1.9785166586311583e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.4999999987710412), 1: np.float64(1.5707723058686844)}\nTree:  (0.4999999987710412 * (sin(1.5707723058686844))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(1.3862130309870322)}\nTree:  -(-40.568455720264936, (cos(((1.3862130309870322 / 1.3862130309870322) x81 sin(x68))) const (x63 * x14)), sin(x54(cos(x89))))', 'Equation constants: {0: np.float64(-0.5000000000008159), 1: np.float64(-3.323330930104548e-07), 2: np.float64(-0.6621409606266639), 3: np.float64(1.593040809678878), 4: np.float64(0.5321511967717987)}\nTree:  (-0.5000000000008159 + pow((-3.323330930104548e-07 cos (0.5321511967717987 + 0.5321511967717987)), (x11)**(x21), (x52 - const((1.593040809678878 / x31)))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  (-40.568455720264936 - const(cos(x81)))', 'Equation constants: {0: np.float64(-0.49999999915405846), 1: np.float64(2.6053573444402813e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(1.8370260125470992)}\nTree:  (const(sin(-0.376643169054988)) + pow(cos(2.6053573444402813e-08), (x11)**(x21), (0.8669610034707098 / const((((x3)**(((x21(cos(1.8370260125470992)) - x45) const sin(x80))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-81.50212499545698), 1: np.float64(-82.00212499545714)}\nTree:  -(-81.50212499545698, const(cos(x81)), sin(x54, (x59)**(x67), cos(x81)))', 'Equation constants: {0: np.float64(0.4528294796804728), 1: np.float64(2.113906315243429e-09)}\nTree:  (0.4528294796804728 + (sin(2.113906315243429e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000011088), 1: np.float64(-4.8474248915802084e-08)}\nTree:  +(-0.5000000000011088, (cos(-4.8474248915802084e-08))**((x11)**(x72)), sin(x32))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(const((x21 - x45))) const (1.1108933922237667 * 1.1108933922237667)) / x31)))))']
MSE: [np.float64(0.2722567537736438), np.float64(0.25), np.float64(0.25), np.float64(0.25000000002987166), np.float64(0.25000000001226985), np.float64(0.25), np.float64(0.25000000000000006), np.float64(334651969.5719324), np.float64(0.25), np.float64(0.25000000000000006), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25000000003434963), np.float64(0.2500000000179634), np.float64(0.25), np.float64(0.25000000000000827), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25222505938554163), np.float64(110560840394.46274), np.float64(0.25000000000000006), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-2.4806377172754495, 4.43136228272455), n_g=367, sigma_y=0.006359225224023999, unit=0.714154670065029)', 'Generator(mode=real, range=(-1.8105998227983586, 3.7190001772016408), n_g=303, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.4346095287397997)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=660, sigma_y=0.04237128402454802, unit=0.6568106669018666)', 'Generator(mode=real, range=(-4.680792722100458, 5.2724872778995415), n_g=303, sigma_y=0.006104856215063039, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=303, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.304, 3.304), n_g=700, sigma_y=0.012861823364613244, unit=0.7378934277524543)', 'Generator(mode=real, range=(-1.3211291994060939, 3.478870800593906), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-4.680792722100458, 5.2724872778995415), n_g=303, sigma_y=0.005087380179219199, unit=0.6492315182409354)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=399, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-3.851352722100458, 4.443047277899542), n_g=303, sigma_y=0.005087380179219199, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.8712054175556263, 2.9687945824443736), n_g=700, sigma_y=0.012861823364613244, unit=0.8198815863916158)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.5843083664168419)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=668, sigma_y=0.012861823364613244, unit=0.8198815863916158)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=271, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.304, 3.304), n_g=668, sigma_y=0.015434188037535893, unit=0.8198815863916158)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=660, sigma_y=0.04237128402454802, unit=0.5971006062744242)', 'Generator(mode=real, range=(-1.3211291994060939, 3.478870800593906), n_g=303, sigma_y=0.006104856215063039, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.8105998227983586, 3.7190001772016408), n_g=303, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-2.561908435553047, 4.350091564446952), n_g=303, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-4.680792722100458, 5.2724872778995415), n_g=303, sigma_y=0.004069904143375359, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=367, sigma_y=0.007949031530029998, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.4806377172754495, 4.43136228272455), n_g=335, sigma_y=0.006359225224023999, unit=0.6492315182409354)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=660, sigma_y=0.04237128402454802, unit=0.6568106669018666)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.4872054175556263, 2.5847945824443737), n_g=700, sigma_y=0.012861823364613244, unit=0.8198815863916158)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.4302634334524017)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-1.8011291994060938, 3.958870800593906), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.4346095287397997)', 'Generator(mode=real, range=(-0.8516751808456152, 2.220324819154385), n_g=335, sigma_y=0.006359225224023998, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.8712054175556263, 2.9687945824443736), n_g=700, sigma_y=0.012861823364613244, unit=0.8198815863916158)']
Gen 27: 24 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37625977139044897), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.37625977139044897)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(const((x95 - x45((1.0 * 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-0.49999999999999495), 1: np.float64(6.145247585768602e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-0.3909662561987739)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(const(cos(-0.3909662561987739))), (x11)**(x21), (0.8669610034707098 / const((((x3 / const((x21 - x45))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(0.3338681438332669)}\nTree:  (-0.49999999999837963 + (cos(-3.6232771373581303e-05))**((1.0 / const((((x3)**(1.0) const (0.3338681438332669)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.4314554000492011), 1: np.float64(-0.3731324608196153), 2: np.float64(-1.176102148462795), 6: np.float64(1.0033934783635514)}\nTree:  (-0.4314554000492011 + (cos(-0.3731324608196153))**((1.0033934783635514)**(-1.176102148462795)))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.1812526566009754)}\nTree:  -(-163.24416045910954, ((x2((x38 * 0.1812526566009754)) / -1.527546221146158) const (1.254046649674836 - x47)), sin(x17))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37625977139044897), 6: np.float64(1.0)}\nTree:  (const(sin(-0.37625977139044897)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (1.0 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-0.5000000042590921), 1: np.float64(1.9785166586311583e-05)}\nTree:  (-0.5000000042590921 + (cos(1.9785166586311583e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(0.4999999987710412), 1: np.float64(1.5707723058686844)}\nTree:  (0.4999999987710412 * (sin(1.5707723058686844))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(1.3862130309870322)}\nTree:  -(-40.568455720264936, (cos(((1.3862130309870322 / 1.3862130309870322) x81 sin(x68))) const (x63 * x14)), sin(x54(cos(x89))))', 'Equation constants: {0: np.float64(-0.5000000000008159), 1: np.float64(-3.323330930104548e-07), 2: np.float64(-0.6621409606266639), 3: np.float64(1.593040809678878), 4: np.float64(0.5321511967717987)}\nTree:  (-0.5000000000008159 + pow((-3.323330930104548e-07 cos (0.5321511967717987 + 0.5321511967717987)), (x11)**(x21), (x52 - const((1.593040809678878 / x31)))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  (-40.568455720264936 - const(cos(x81)))', 'Equation constants: {0: np.float64(-0.49999999915405846), 1: np.float64(2.6053573444402813e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(1.8370260125470992)}\nTree:  (const(sin(-0.376643169054988)) + pow(cos(2.6053573444402813e-08), (x11)**(x21), (0.8669610034707098 / const((((x3)**(((x21(cos(1.8370260125470992)) - x45) const sin(x80))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-81.50212499545698), 1: np.float64(-82.00212499545714)}\nTree:  -(-81.50212499545698, const(cos(x81)), sin(x54, (x59)**(x67), cos(x81)))', 'Equation constants: {0: np.float64(0.4528294796804728), 1: np.float64(2.113906315243429e-09)}\nTree:  (0.4528294796804728 + (sin(2.113906315243429e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000011088), 1: np.float64(-4.8474248915802084e-08)}\nTree:  +(-0.5000000000011088, (cos(-4.8474248915802084e-08))**((x11)**(x72)), sin(x32))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(const((x21 - x45))) const (1.1108933922237667 * 1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.537156961895869), 2: np.float64(-409.60687326467615), 3: np.float64(194.76353063015992), 4: np.float64(-0.6628196431947454), 5: np.float64(1.6487086928786074), 6: np.float64(-3.498167037519959), 7: np.float64(1.662617277450718)}\nTree:  (const(sin(-0.6628196431947454)) + ((x11)**(x21))**((-3.498167037519959 / const((((x3)**(const((x21 - x45))) const (1.662617277450718 * 1.662617277450718)) / x31)))))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.66228669995485)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(1.8851751868595924e-08), (x11)**(x21((x62 / 0.66228669995485))), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000682460753), 1: np.float64(3.712814935941011e-05)}\nTree:  (-0.5000000682460753 + (cos(3.712814935941011e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296)}\nTree:  (-40.568455720264936 - const(cos(x1)))', 'Equation constants: {0: np.float64(-0.5000000000247801), 1: np.float64(8.306282179791306e-07), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.5000000000247801 + (cos(8.306282179791306e-07))**(pow(x11, x21, (-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-0.5000000000011088), 1: np.float64(-4.8474248915802084e-08), 2: np.float64(-0.14974111925055844)}\nTree:  +(-0.5000000000011088, (cos(-4.8474248915802084e-08))**((x11((-0.14974111925055844 / -0.14974111925055844)))**(x72)), sin(x32))', 'Equation constants: {0: np.float64(-0.5000000066255135), 1: np.float64(7.193886573969763e-06)}\nTree:  (-0.5000000066255135 + (cos(7.193886573969763e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342), 5: np.float64(-1.570584159936034)}\nTree:  -(-163.24416045910954, const((x2((x38 * 0.10684533015999342)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x52 * -1.570584159936034)), sin(x17))', 'Equation constants: {0: np.float64(0.4528294796804728), 1: np.float64(2.113906315243429e-09)}\nTree:  (0.4528294796804728 + (sin(2.113906315243429e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342), 5: np.float64(-1.570584159936034)}\nTree:  -(-163.24416045910954, const((x2((x38 * 0.10684533015999342)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(-1.570584159936034)), sin(x17))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37625977139044897), 6: np.float64(1.0), 7: np.float64(1.0)}\nTree:  (const(sin(-0.37625977139044897)) + pow(cos(const((1.0 / x95))), (x11)**(x21), (1.0 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37625977139044897), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.37625977139044897)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(const((x21 - x45((1.0 - 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(const((x21 - x45))) const (1.1108933922237667 * 1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(1.3862130309870322)}\nTree:  -(-40.568455720264936, (cos(((1.3862130309870322 + 1.3862130309870322) x81 sin(x68))) const (x63 * x14)), sin(x54(cos(x89))))', 'Equation constants: {0: np.float64(-0.49999999915405846), 1: np.float64(2.6053573444402813e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(1.8370260125470992), 9: np.float64(-0.4447847075166367)}\nTree:  (const(sin(const(sin(-0.4447847075166367)))) + pow(cos(2.6053573444402813e-08), (x11)**(x21), (0.8669610034707098 / const((((x3)**(((x21(cos(1.8370260125470992)) - x45) const sin(x80))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.1812526566009754)}\nTree:  -(-163.24416045910954, ((x2((x38 * 0.1812526566009754)))**(-1.527546221146158) const (1.254046649674836 - x47)), sin(x17))', 'Equation constants: {0: np.float64(-0.5000000037834522), 1: np.float64(1.1758121862352157e-05)}\nTree:  (-0.5000000037834522 + (cos(1.1758121862352157e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 4: np.float64(1.0), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (const(cos(1.0)) + (cos(const((x18((x59)**(1.0)) + 1.0))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-653.0285205450048), 1: np.float64(-653.5285205450056)}\nTree:  (-653.0285205450048 - const((x44 - x8)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(1.0)}\nTree:  (-0.49999999999837963 + (cos(-3.6232771373581303e-05))**((1.0 / const((((x3)**(1.0) const (1.0)**(1.0)) / x31(sin(x5)))))))', 'Equation constants: {0: np.float64(-0.4999999991500471), 1: np.float64(1.8100966826208867e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-0.3909662561987739), 9: np.float64(1.624702149306398)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(const(cos(-0.3909662561987739))), (x11)**(x21), (0.8669610034707098 / const((((x3 / const((x21 - x45))) const pow(1.1108933922237667, 1.1108933922237667, sin(1.624702149306398))) / x31)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976)}\nTree:  -(-163.24416045910954, const((x2 / x17)), sin(x17))']
MSE: [np.float64(0.24991653626535715), np.float64(0.25), np.float64(0.25000000009825046), np.float64(0.25), np.float64(0.2500000000004402), np.float64(0.25000000000000006), np.float64(0.25000000001932654), np.float64(0.25), np.float64(0.25222505938554163), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(75011029163.00826), np.float64(0.25), np.float64(0.25), np.float64(0.25000000002425593), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-2.4806377172754495, 4.43136228272455), n_g=335, sigma_y=0.006359225224023999, unit=0.6492315182409354)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=660, sigma_y=0.04237128402454802, unit=0.6568106669018666)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.4872054175556263, 2.5847945824443737), n_g=700, sigma_y=0.012861823364613244, unit=0.8198815863916158)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.4302634334524017)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-1.8011291994060938, 3.958870800593906), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.4346095287397997)', 'Generator(mode=real, range=(-0.8516751808456152, 2.220324819154385), n_g=335, sigma_y=0.006359225224023998, unit=0.6557894123645812)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.8712054175556263, 2.9687945824443736), n_g=700, sigma_y=0.012861823364613244, unit=0.8198815863916158)', 'Generator(mode=real, range=(-4.680792722100458, 5.2724872778995415), n_g=271, sigma_y=0.004069904143375359, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=367, sigma_y=0.007949031530029998, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.304, 3.304), n_g=700, sigma_y=0.012861823364613244, unit=0.6641040849772089)', 'Generator(mode=real, range=(-1.8105998227983586, 3.7190001772016408), n_g=303, sigma_y=0.009157284322594557, unit=0.6492315182409354)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=399, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.43026343345240176)', 'Generator(mode=real, range=(-0.6824354907022644, 3.1575645092977354), n_g=303, sigma_y=0.007631070268828798, unit=0.4302634334524017)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.6427392030585262)', 'Generator(mode=real, range=(-0.5817998227983588, 2.490200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.4302634334524017)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-5.0729670932023785, 4.527032906797621), n_g=660, sigma_y=0.04237128402454802, unit=0.6568106669018666)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=668, sigma_y=0.012861823364613244, unit=0.8198815863916158)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=271, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-4.680792722100458, 5.2724872778995415), n_g=335, sigma_y=0.004069904143375359, unit=0.6492315182409354)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.4346095287397997)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=271, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.4302634334524017)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=271, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-1.0225159029325823, 3.5854840970674173), n_g=700, sigma_y=0.012861823364613244, unit=0.7378934277524543)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=303, sigma_y=0.005299354353353332, unit=0.6557894123645812)']
Gen 28: 22 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.5000000066255135), 1: np.float64(7.193886573969763e-06)}\nTree:  (-0.5000000066255135 + (cos(7.193886573969763e-06))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342), 5: np.float64(-1.570584159936034)}\nTree:  -(-163.24416045910954, const((x2((x38 * 0.10684533015999342)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x52 * -1.570584159936034)), sin(x17))', 'Equation constants: {0: np.float64(0.4528294796804728), 1: np.float64(2.113906315243429e-09)}\nTree:  (0.4528294796804728 + (sin(2.113906315243429e-09))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342), 5: np.float64(-1.570584159936034)}\nTree:  -(-163.24416045910954, const((x2((x38 * 0.10684533015999342)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(-1.570584159936034)), sin(x17))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37625977139044897), 6: np.float64(1.0), 7: np.float64(1.0)}\nTree:  (const(sin(-0.37625977139044897)) + pow(cos(const((1.0 / x95))), (x11)**(x21), (1.0 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37625977139044897), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.37625977139044897)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(const((x21 - x45((1.0 - 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(const((x21 - x45))) const (1.1108933922237667 * 1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(1.3862130309870322)}\nTree:  -(-40.568455720264936, (cos(((1.3862130309870322 + 1.3862130309870322) x81 sin(x68))) const (x63 * x14)), sin(x54(cos(x89))))', 'Equation constants: {0: np.float64(-0.49999999915405846), 1: np.float64(2.6053573444402813e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(1.8370260125470992), 9: np.float64(-0.4447847075166367)}\nTree:  (const(sin(const(sin(-0.4447847075166367)))) + pow(cos(2.6053573444402813e-08), (x11)**(x21), (0.8669610034707098 / const((((x3)**(((x21(cos(1.8370260125470992)) - x45) const sin(x80))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.1812526566009754)}\nTree:  -(-163.24416045910954, ((x2((x38 * 0.1812526566009754)))**(-1.527546221146158) const (1.254046649674836 - x47)), sin(x17))', 'Equation constants: {0: np.float64(-0.5000000037834522), 1: np.float64(1.1758121862352157e-05)}\nTree:  (-0.5000000037834522 + (cos(1.1758121862352157e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 4: np.float64(1.0), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (const(cos(1.0)) + (cos(const((x18((x59)**(1.0)) + 1.0))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-653.0285205450048), 1: np.float64(-653.5285205450056)}\nTree:  (-653.0285205450048 - const((x44 - x8)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(1.0)}\nTree:  (-0.49999999999837963 + (cos(-3.6232771373581303e-05))**((1.0 / const((((x3)**(1.0) const (1.0)**(1.0)) / x31(sin(x5)))))))', 'Equation constants: {0: np.float64(-0.4999999991500471), 1: np.float64(1.8100966826208867e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-0.3909662561987739), 9: np.float64(1.624702149306398)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(const(cos(-0.3909662561987739))), (x11)**(x21), (0.8669610034707098 / const((((x3 / const((x21 - x45))) const pow(1.1108933922237667, 1.1108933922237667, sin(1.624702149306398))) / x31)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976)}\nTree:  -(-163.24416045910954, const((x2 / x17)), sin(x17))', 'Equation constants: {0: np.float64(-0.5000000035931575), 1: np.float64(-2.115491867436254e-06), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(1.8370260125470992), 9: np.float64(-0.4447847075166367)}\nTree:  (const(sin(const(sin(-0.4447847075166367)))) + pow(cos(-2.115491867436254e-06), (x11)**(x21), (0.8669610034707098 / const((((x3)**(((x21(cos(1.8370260125470992)) - x45) const sin(x80))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.6628196431947454), 4: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (const(sin(1.0)) + (cos(-3.6232771373581303e-05))**((1.0 / -0.6628196431947454)))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976)}\nTree:  -(-163.24416045910954, const((x2 / x17)), sin(x17((x69 * x81))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(const((x21 - x45))) const (1.1108933922237667 * x84)) / x31)))))', 'Equation constants: {0: np.float64(0.4528294796804728), 1: np.float64(2.113906315243429e-09)}\nTree:  (0.4528294796804728 + (sin(2.113906315243429e-09))**((x7)**(x21)))', 'Equation constants: {0: np.float64(0.49999999959401786), 1: np.float64(1.5707938001907458)}\nTree:  (0.49999999959401786 * (sin(1.5707938001907458))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000069831771), 1: np.float64(1.1283902932334648e-05), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.66228669995485)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(1.1283902932334648e-05), (x11)**(x21((x62 / 0.66228669995485))), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000000011088), 1: np.float64(-4.8474248915802084e-08), 2: np.float64(-0.14974111925055844), 3: np.float64(-1.1804880031695357)}\nTree:  +(-0.5000000000011088, (cos(-4.8474248915802084e-08))**((x11((-0.14974111925055844 / const((x18 - -1.1804880031695357)))))**(x72)), sin(x32))', 'Equation constants: {0: np.float64(-0.5000000000001265), 1: np.float64(-1.5950191247470402e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.593040809678878), 4: np.float64(0.5321511967717987), 5: np.float64(1.8799962430624326)}\nTree:  +(-0.5000000000001265, pow((-1.5950191247470402e-08 cos (0.5321511967717987 + 0.5321511967717987)), (x11)**(x21), (x52 - const((1.593040809678878 / x31)))), (1.8799962430624326 / x13))', 'Equation constants: {0: np.float64(0.4629443274560918), 1: np.float64(1.5707963095529567), 2: np.float64(-0.19864205704854568)}\nTree:  (0.4629443274560918 + (cos(1.5707963095529567))**((x11)**((-0.19864205704854568 + -0.19864205704854568))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342), 5: np.float64(-1.570584159936034), 6: np.float64(-0.7098582050974462)}\nTree:  -(-163.24416045910954, const((x2((x38 * 0.10684533015999342)) / -1.527546221146158), (1.254046649674836 - const((x8 / -0.7098582050974462))), (x52 * -1.570584159936034)), sin(x17))', 'Equation constants: {0: np.float64(-0.49999999915405846), 1: np.float64(2.6053573444402813e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37709359199986586), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(1.8370260125470992), 9: np.float64(-0.4447847075166367)}\nTree:  (const(sin(const(sin(-0.4447847075166367)))) + pow(cos(2.6053573444402813e-08), (x11)**(x21), (0.8669610034707098 / const((((x3)**(((x21(cos(1.8370260125470992)) - x45) const sin(x80))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37625977139044897), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.37625977139044897)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53 + const((x21 - x45((1.0 - 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-0.42447252359813753), 1: np.float64(-0.3910981136269666), 2: np.float64(-1.1761013708657677), 6: np.float64(0.9997402196587036)}\nTree:  (-0.42447252359813753 + (cos(-0.3910981136269666))**((0.9997402196587036)**(-1.1761013708657677)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(1.0), 8: np.float64(1.0)}\nTree:  (-0.49999999999837963 + (cos(-3.6232771373581303e-05))**((1.0 / const((((x3)**(1.0) const (const(cos(1.0)))**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-163.2380418593682), 1: np.float64(-163.7380418593684)}\nTree:  -(-163.2380418593682, const(cos(x81)), sin(x54, (x59)**(x67), cos(x81)))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976)}\nTree:  -(-163.24416045910954, const((x2 / x17)), sin(x17((x75)**(x40))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342), 5: np.float64(-1.570584159936034)}\nTree:  -(-163.24416045910954, const((x2((x38 * 0.10684533015999342)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x84)**(-1.570584159936034)), sin(x17))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(1.3862130309870322)}\nTree:  -(-40.568455720264936, (cos(((1.3862130309870322 * 1.3862130309870322) x81 sin(x68))) const (x63 * x14)), sin(x54(cos(x89))))', 'Equation constants: {0: np.float64(-326.5460351518048), 1: np.float64(-327.04603515180526)}\nTree:  -(-326.5460351518048, const((x2 / x17)), sin(x17))', 'Equation constants: {0: np.float64(-0.5000000733155398), 1: np.float64(-2.1392610959614986e-05)}\nTree:  (-0.5000000733155398 + (cos(-2.1392610959614986e-05))**((x11)**(x21)))']
MSE: [np.float64(0.25000000000258205), np.float64(0.25), np.float64(318005088.39417815), np.float64(0.25), np.float64(6.067117344761665e+39), np.float64(0.25), np.float64(0.7706165453849364), np.float64(0.25222505913032994), np.float64(0.2500000000005284), np.float64(0.2500000000274879), np.float64(0.25000000000000006), np.float64(0.2500000000000003), np.float64(0.24934774988242578), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000898276), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.2500000001379031)]
Generators: ['Generator(mode=real, range=(-5.0729670932023785, 4.527032906797621), n_g=660, sigma_y=0.04237128402454802, unit=0.6568106669018666)', 'Generator(mode=real, range=(-0.92, 2.92), n_g=668, sigma_y=0.012861823364613244, unit=0.8198815863916158)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=271, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-4.680792722100458, 5.2724872778995415), n_g=335, sigma_y=0.004069904143375359, unit=0.6492315182409354)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.4346095287397997)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=271, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.4302634334524017)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=271, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-1.0225159029325823, 3.5854840970674173), n_g=700, sigma_y=0.012861823364613244, unit=0.7378934277524543)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=303, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=367, sigma_y=0.007949031530029998, unit=0.4302634334524017)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-0.5817998227983588, 2.490200177201641), n_g=367, sigma_y=0.007949031530029998, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.9257998227983588, 3.834200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.7213683536010393)', 'Generator(mode=real, range=(-5.0729670932023785, 4.527032906797621), n_g=660, sigma_y=0.04237128402454802, unit=0.5911296002116799)', 'Generator(mode=real, range=(-1.5012436103255125, 4.258756389674487), n_g=335, sigma_y=0.006104856215063039, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=271, sigma_y=0.007631070268828798, unit=0.4302634334524017)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=367, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=303, sigma_y=0.009157284322594557, unit=0.4346095287397997)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.7213683536010393)', 'Generator(mode=real, range=(-0.6824354907022644, 3.1575645092977354), n_g=303, sigma_y=0.009157284322594557, unit=0.4302634334524017)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-1.7000078227983588, 3.608408177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=660, sigma_y=0.04237128402454802, unit=0.7224917335920533)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.007949031530029998, unit=0.4780704816137797)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=692, sigma_y=0.04237128402454802, unit=0.6568106669018666)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.007949031530029998, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.3520337182792378)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.009157284322594557, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.714154670065029)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.4346095287397997)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=303, sigma_y=0.005299354353353332, unit=0.6557894123645812)']
Gen 29: 24 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.5000000069831771), 1: np.float64(1.1283902932334648e-05), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.66228669995485)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(1.1283902932334648e-05), (x11)**(x21((x62 / 0.66228669995485))), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000000011088), 1: np.float64(-4.8474248915802084e-08), 2: np.float64(-0.14974111925055844), 3: np.float64(-1.1804880031695357)}\nTree:  +(-0.5000000000011088, (cos(-4.8474248915802084e-08))**((x11((-0.14974111925055844 / const((x18 - -1.1804880031695357)))))**(x72)), sin(x32))', 'Equation constants: {0: np.float64(-0.5000000000001265), 1: np.float64(-1.5950191247470402e-08), 2: np.float64(-0.6621409606266639), 3: np.float64(1.593040809678878), 4: np.float64(0.5321511967717987), 5: np.float64(1.8799962430624326)}\nTree:  +(-0.5000000000001265, pow((-1.5950191247470402e-08 cos (0.5321511967717987 + 0.5321511967717987)), (x11)**(x21), (x52 - const((1.593040809678878 / x31)))), (1.8799962430624326 / x13))', 'Equation constants: {0: np.float64(0.4629443274560918), 1: np.float64(1.5707963095529567), 2: np.float64(-0.19864205704854568)}\nTree:  (0.4629443274560918 + (cos(1.5707963095529567))**((x11)**((-0.19864205704854568 + -0.19864205704854568))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342), 5: np.float64(-1.570584159936034), 6: np.float64(-0.7098582050974462)}\nTree:  -(-163.24416045910954, const((x2((x38 * 0.10684533015999342)) / -1.527546221146158), (1.254046649674836 - const((x8 / -0.7098582050974462))), (x52 * -1.570584159936034)), sin(x17))', 'Equation constants: {0: np.float64(-0.49999999915405846), 1: np.float64(2.6053573444402813e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37709359199986586), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(1.8370260125470992), 9: np.float64(-0.4447847075166367)}\nTree:  (const(sin(const(sin(-0.4447847075166367)))) + pow(cos(2.6053573444402813e-08), (x11)**(x21), (0.8669610034707098 / const((((x3)**(((x21(cos(1.8370260125470992)) - x45) const sin(x80))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37625977139044897), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.37625977139044897)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53 + const((x21 - x45((1.0 - 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-0.42447252359813753), 1: np.float64(-0.3910981136269666), 2: np.float64(-1.1761013708657677), 6: np.float64(0.9997402196587036)}\nTree:  (-0.42447252359813753 + (cos(-0.3910981136269666))**((0.9997402196587036)**(-1.1761013708657677)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(1.0), 8: np.float64(1.0)}\nTree:  (-0.49999999999837963 + (cos(-3.6232771373581303e-05))**((1.0 / const((((x3)**(1.0) const (const(cos(1.0)))**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-163.2380418593682), 1: np.float64(-163.7380418593684)}\nTree:  -(-163.2380418593682, const(cos(x81)), sin(x54, (x59)**(x67), cos(x81)))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976)}\nTree:  -(-163.24416045910954, const((x2 / x17)), sin(x17((x75)**(x40))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342), 5: np.float64(-1.570584159936034)}\nTree:  -(-163.24416045910954, const((x2((x38 * 0.10684533015999342)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x84)**(-1.570584159936034)), sin(x17))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-40.568455720264936), 1: np.float64(-41.068455720264296), 2: np.float64(1.3862130309870322)}\nTree:  -(-40.568455720264936, (cos(((1.3862130309870322 * 1.3862130309870322) x81 sin(x68))) const (x63 * x14)), sin(x54(cos(x89))))', 'Equation constants: {0: np.float64(-326.5460351518048), 1: np.float64(-327.04603515180526)}\nTree:  -(-326.5460351518048, const((x2 / x17)), sin(x17))', 'Equation constants: {0: np.float64(-0.5000000733155398), 1: np.float64(-2.1392610959614986e-05)}\nTree:  (-0.5000000733155398 + (cos(-2.1392610959614986e-05))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976)}\nTree:  -(-163.24416045910954, const((x2((x69)**(x66)) / x17)), sin(x17))', 'Equation constants: {0: np.float64(-0.500000000019999), 1: np.float64(1.235743278463908e-06), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(1.235743278463908e-06), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (-0.500000000000083 + (cos(const((x18((x59)**(1.0)) + 1.0))))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 6: np.float64(1.0), 7: np.float64(1.0)}\nTree:  (-0.4999999991503631 + pow(cos(const((1.0 / x95))), (x11)**(x21), (1.0 / const((1.6487086928786074 / x31)))))', 'Equation constants: {0: np.float64(-0.5000000000294865), 1: np.float64(1.9720764572649008e-07), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.66228669995485), 8: np.float64(0.7257525092357513)}\nTree:  (const(sin(const((0.7257525092357513 / x73)))) + pow(cos(1.9720764572649008e-07), (x11)**(x21((x62 / 0.66228669995485))), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.6628196431947454), 6: np.float64(1.0)}\nTree:  (-0.49999999999837963 + (cos(-3.6232771373581303e-05))**((1.0 / -0.6628196431947454)))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 3: np.float64(1.0), 4: np.float64(1.0), 5: np.float64(1.254046649674836)}\nTree:  -(-163.24416045910954, const((x2((x38 * 1.0)) / x52), (1.0 - 1.0), (x52 * 1.254046649674836)), sin(x17))', 'Equation constants: {0: np.float64(-0.49999999915405846), 1: np.float64(2.6053573444402813e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37709359199986586), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(1.8370260125470992), 9: np.float64(-0.4447847075166367)}\nTree:  (const(sin(const(sin(-0.4447847075166367)))) + pow(cos(2.6053573444402813e-08), (x11)**(x21), (0.8669610034707098 / const((((x3)**(((x21(cos(1.8370260125470992)) - x52) const sin(x80))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.500000000097027), 1: np.float64(-7.058958023781529e-07), 2: np.float64(0.967567974617972)}\nTree:  (-0.500000000097027 + (cos(-7.058958023781529e-07))**((x11((x87 - 0.967567974617972)))**(x21)))', 'Equation constants: {0: np.float64(-326.88524341093876), 1: np.float64(-327.38524341093915), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.1812526566009754)}\nTree:  -(-326.88524341093876, ((x2((x38 * 0.1812526566009754)))**(-1.527546221146158) const (1.254046649674836 - x47)), sin(x17))', 'Equation constants: {0: np.float64(-0.5371569361369085), 2: np.float64(30.189169137388788), 3: np.float64(-3.717362640777079), 4: np.float64(-0.6628196431947454), 5: np.float64(1.6487086928786074), 6: np.float64(0.2577837819895694), 7: np.float64(-0.03172850949411468), 8: np.float64(0.8669610034707098), 9: np.float64(1.1108933922237667)}\nTree:  (const(sin(const(sin(1.1108933922237667)))) + ((x11)**(x21))**((0.2577837819895694 / const((((x3)**(((x21(cos(0.8669610034707098)) - x45) const sin(x80))) const (-0.03172850949411468)**(-0.03172850949411468)) / x31)))))', 'Equation constants: {0: np.float64(0.46294457984415094), 1: np.float64(1.5707963095529567), 2: np.float64(-0.19864018200358216), 3: np.float64(-0.019893922342209436)}\nTree:  (const(cos(-0.019893922342209436)) + (cos(1.5707963095529567))**((x11)**((-0.19864018200358216 + -0.19864018200358216))))', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736)}\nTree:  -(-326.7500173403731, const((x2 / x17)), sin(x17((x75)**(x40))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(0.001796855061714897)}\nTree:  -(-163.24416045910954, const((x2 / x17)), sin(x17(pow(x75, x40, (0.001796855061714897 - 0.001796855061714897)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.1812526566009754)}\nTree:  -(-163.24416045910954, ((x2((x38 * 0.1812526566009754)))**(-1.527546221146158) const (1.254046649674836 - x89)), sin(x17))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342), 5: np.float64(-1.570584159936034), 6: np.float64(0.43759148136028125)}\nTree:  -(const((0.43759148136028125)**(x4)), const((x2((x38 * 0.10684533015999342)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(-1.570584159936034)), sin(x17))', 'Equation constants: {0: np.float64(-653.0285205450048), 1: np.float64(-653.5285205450056)}\nTree:  (-653.0285205450048 - -653.5285205450056)', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37625977139044897), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0), 9: np.float64(1.0)}\nTree:  ((sin(-0.37625977139044897) const (1.0 + x76)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(const((x21 - x45((1.0 - 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000213432712), 1: np.float64(3.127404513164715e-05), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(1.8370260125470992), 9: np.float64(-0.4447847075166367)}\nTree:  (const(sin(const(sin(-0.4447847075166367)))) + pow(cos(3.127404513164715e-05), (x11)**(x21), (0.8669610034707098 / const((((x3)**(((x21(cos(1.8370260125470992)) - x45) const sin(x80))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000000113738), 1: np.float64(1.8053137453248101e-06), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.5000000000113738 + (cos(1.8053137453248101e-06))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-163.2380418593682), 1: np.float64(-163.7380418593684)}\nTree:  -(-163.2380418593682, const(cos(x81)), sin(x54, (x59)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(0.49999999999982025), 1: np.float64(1.570796551342433)}\nTree:  (0.49999999999982025 * (sin(1.570796551342433))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000035347), 1: np.float64(5.6235114848930715e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(1.8370260125470992), 9: np.float64(-0.4447847075166367)}\nTree:  (const(sin(const(sin(-0.4447847075166367)))) + pow(cos(5.6235114848930715e-08), (x11)**(x21), (0.8669610034707098 / const((((x3)**(((x21(cos(1.8370260125470992)) - x45) const sin(x80))) const (x91)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-0.2707400493611951)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(const((x21 - x45((-0.2707400493611951 + -0.2707400493611951))))) const (1.1108933922237667 * x84)) / x31)))))']
MSE: [np.float64(0.25), np.float64(0.25000000000014294), np.float64(0.25), np.float64(0.25), np.float64(0.7299044114997227), np.float64(0.2500000000000791), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000032063), np.float64(0.25), np.float64(0.2499165363487459), np.float64(0.24934771608489137), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000822798), np.float64(0.25000000000011235), np.float64(0.25), np.float64(0.2500000000000062), np.float64(0.25000000000000827), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-0.6824354907022644, 3.1575645092977354), n_g=303, sigma_y=0.009157284322594557, unit=0.4302634334524017)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-1.7000078227983588, 3.608408177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=660, sigma_y=0.04237128402454802, unit=0.7224917335920533)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.007949031530029998, unit=0.4780704816137797)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=692, sigma_y=0.04237128402454802, unit=0.6568106669018666)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.007949031530029998, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.3520337182792378)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.009157284322594557, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.714154670065029)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.4346095287397997)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=303, sigma_y=0.005299354353353332, unit=0.6557894123645812)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.3520337182792378)', 'Generator(mode=real, range=(-4.1129670932023785, 3.567032906797621), n_g=660, sigma_y=0.04237128402454802, unit=0.6568106669018666)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-0.5817998227983588, 2.490200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.009157284322594557, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=335, sigma_y=0.005299354353353332, unit=0.7213683536010393)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-1.7000078227983588, 3.608408177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-0.5817998227983588, 2.490200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4780704816137797)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.5817998227983588, 2.490200177201641), n_g=367, sigma_y=0.009538837836035997, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=271, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.009157284322594557, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-5.0729670932023785, 4.527032906797621), n_g=660, sigma_y=0.04237128402454802, unit=0.7224917335920533)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7070131233643788)']
Gen 30: 25 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-326.88524341093876), 1: np.float64(-327.38524341093915), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.1812526566009754)}\nTree:  -(-326.88524341093876, ((x2((x38 * 0.1812526566009754)))**(-1.527546221146158) const (1.254046649674836 - x47)), sin(x17))', 'Equation constants: {0: np.float64(-0.5371569361369085), 2: np.float64(30.189169137388788), 3: np.float64(-3.717362640777079), 4: np.float64(-0.6628196431947454), 5: np.float64(1.6487086928786074), 6: np.float64(0.2577837819895694), 7: np.float64(-0.03172850949411468), 8: np.float64(0.8669610034707098), 9: np.float64(1.1108933922237667)}\nTree:  (const(sin(const(sin(1.1108933922237667)))) + ((x11)**(x21))**((0.2577837819895694 / const((((x3)**(((x21(cos(0.8669610034707098)) - x45) const sin(x80))) const (-0.03172850949411468)**(-0.03172850949411468)) / x31)))))', 'Equation constants: {0: np.float64(0.46294457984415094), 1: np.float64(1.5707963095529567), 2: np.float64(-0.19864018200358216), 3: np.float64(-0.019893922342209436)}\nTree:  (const(cos(-0.019893922342209436)) + (cos(1.5707963095529567))**((x11)**((-0.19864018200358216 + -0.19864018200358216))))', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736)}\nTree:  -(-326.7500173403731, const((x2 / x17)), sin(x17((x75)**(x40))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(0.001796855061714897)}\nTree:  -(-163.24416045910954, const((x2 / x17)), sin(x17(pow(x75, x40, (0.001796855061714897 - 0.001796855061714897)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.1812526566009754)}\nTree:  -(-163.24416045910954, ((x2((x38 * 0.1812526566009754)))**(-1.527546221146158) const (1.254046649674836 - x89)), sin(x17))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342), 5: np.float64(-1.570584159936034), 6: np.float64(0.43759148136028125)}\nTree:  -(const((0.43759148136028125)**(x4)), const((x2((x38 * 0.10684533015999342)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(-1.570584159936034)), sin(x17))', 'Equation constants: {0: np.float64(-653.0285205450048), 1: np.float64(-653.5285205450056)}\nTree:  (-653.0285205450048 - -653.5285205450056)', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37625977139044897), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0), 9: np.float64(1.0)}\nTree:  ((sin(-0.37625977139044897) const (1.0 + x76)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(const((x21 - x45((1.0 - 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000213432712), 1: np.float64(3.127404513164715e-05), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(1.8370260125470992), 9: np.float64(-0.4447847075166367)}\nTree:  (const(sin(const(sin(-0.4447847075166367)))) + pow(cos(3.127404513164715e-05), (x11)**(x21), (0.8669610034707098 / const((((x3)**(((x21(cos(1.8370260125470992)) - x45) const sin(x80))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000000113738), 1: np.float64(1.8053137453248101e-06), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.5000000000113738 + (cos(1.8053137453248101e-06))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-163.2380418593682), 1: np.float64(-163.7380418593684)}\nTree:  -(-163.2380418593682, const(cos(x81)), sin(x54, (x59)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(0.49999999999982025), 1: np.float64(1.570796551342433)}\nTree:  (0.49999999999982025 * (sin(1.570796551342433))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000000035347), 1: np.float64(5.6235114848930715e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(1.8370260125470992), 9: np.float64(-0.4447847075166367)}\nTree:  (const(sin(const(sin(-0.4447847075166367)))) + pow(cos(5.6235114848930715e-08), (x11)**(x21), (0.8669610034707098 / const((((x3)**(((x21(cos(1.8370260125470992)) - x45) const sin(x80))) const (x91)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-0.2707400493611951)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(const((x21 - x45((-0.2707400493611951 + -0.2707400493611951))))) const (1.1108933922237667 * x84)) / x31)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342), 5: np.float64(-1.570584159936034), 6: np.float64(-0.7098582050974462), 7: np.float64(1.952897238037714)}\nTree:  -(-163.24416045910954, const((x2((x38 * 0.10684533015999342)) / -1.527546221146158), (1.254046649674836 - const(/(x8, -0.7098582050974462, (x6 * 1.952897238037714)))), (x52 * -1.570584159936034)), sin(x17))', 'Equation constants: {0: np.float64(-326.5460351518048), 1: np.float64(-327.04603515180526), 2: np.float64(0.11032012715677153)}\nTree:  -(-326.5460351518048, const(/(x2, x17, (x19)**(0.11032012715677153))), sin(x17))', 'Equation constants: {0: np.float64(-326.5460351518048), 1: np.float64(-327.04603515180526)}\nTree:  (-326.5460351518048 - const((x2 / x17)))', 'Equation constants: {0: np.float64(0.5000000008581617), 1: np.float64(1.5707962725333922), 2: np.float64(1.6591504633821654)}\nTree:  (0.5000000008581617 * ((1.5707962725333922 sin sin(1.6591504633821654)))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.5000000683904243), 1: np.float64(-7.50792570455272e-05), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.5000000683904243 + (cos(-7.50792570455272e-05))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(1.029595643353561), 1: np.float64(-1.0343078108548367), 2: np.float64(-1.1869825492359936), 6: np.float64(1.0468544216179898)}\nTree:  (1.029595643353561 - (cos(-1.0343078108548367))**((1.0468544216179898)**(-1.1869825492359936)))', 'Equation constants: {0: np.float64(-0.5000000000003294), 1: np.float64(7.310529905150907e-08), 2: np.float64(0.967567974617972)}\nTree:  (-0.5000000000003294 + (cos(7.310529905150907e-08))**((x11((x87 - 0.967567974617972)))**(x87)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(1.0), 8: np.float64(1.0)}\nTree:  (-0.49999999999837963 + (cos(-3.6232771373581303e-05))**((1.0 / const((((x3)**(1.0) const (const(cos(1.0)))**(1.0)) / x31)))))', 'Equation constants: {0: np.float64(0.5027027022092977), 1: np.float64(1.570796309552956), 2: np.float64(-1.847879919540499), 3: np.float64(-0.019893922342209436)}\nTree:  (const(cos(-0.019893922342209436)) + (cos(1.570796309552956))**((x11)**((-1.847879919540499 + x26))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.1812526566009754), 5: np.float64(-0.2784395209982069)}\nTree:  -(-163.24416045910954, ((x2(*(x38, 0.1812526566009754, (x74 * -0.2784395209982069))))**(-1.527546221146158) const (1.254046649674836 - x89)), sin(x17))', 'Equation constants: {0: np.float64(0.501815366384402), 1: np.float64(-1.6133918748938896)}\nTree:  (0.501815366384402 + (cos(-1.6133918748938896) / (x11)**(x21)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.6628196431947454), 6: np.float64(1.0)}\nTree:  (-0.49999999999837963 + (cos(-3.6232771373581303e-05))**((1.0 / -0.6628196431947454)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-0.2707400493611951)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(const((x21 - x45((-0.2707400493611951 + -0.2707400493611951))))) const (1.1108933922237667 * x84)) / x31)))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-0.32560793418715944)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(const((x21 - x45((-0.32560793418715944 + -0.32560793418715944))))) const (1.1108933922237667 * x84)) / x31)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342)}\nTree:  -(-163.24416045910954, ((x2((x38 * 0.10684533015999342)) / -1.527546221146158) const (1.254046649674836 - 1.254046649674836)), sin(x17))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  -(const((1.0)**(x4)), const((x2((x38 * x80)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(1.0)), sin(x17))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37625977139044897), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.37625977139044897)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53 + const((x21 - x45((1.0 - 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-0.2707400493611951), 9: np.float64(-0.08549450903374467)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(const((x21 - x45((-0.2707400493611951 + -0.2707400493611951))))) const (1.1108933922237667 * x84((-0.08549450903374467 - -0.08549450903374467)))) / x31)))))', 'Equation constants: {0: np.float64(-0.4250574759382667), 1: np.float64(-0.3896080484007195), 2: np.float64(-1.1761013265484048), 6: np.float64(0.9998019029960075)}\nTree:  (-0.4250574759382667 + (cos(-0.3896080484007195))**((0.9998019029960075)**(-1.1761013265484048)))', 'Equation constants: {0: np.float64(-0.5000000000013931), 1: np.float64(1.7382977221424982e-07), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.5000000000013931 + (cos(1.7382977221424982e-07))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-0.5000000000255413), 1: np.float64(7.511606228204965e-07), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.66228669995485)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(7.511606228204965e-07), (x11)**(x21((x62 / 0.66228669995485))), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000000013931), 1: np.float64(1.7382977221424982e-07), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.5000000000013931 + (cos(1.7382977221424982e-07))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736), 2: np.float64(-0.8922118980599971)}\nTree:  -(-326.7500173403731, const((x2 / x17(cos(-0.8922118980599971)))), sin(x17((x75)**(x40))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-0.6896594616770626)}\nTree:  -(-163.24416045910954, const((x2((x69((x10 - -0.6896594616770626)))**(x66)) / x17)), sin(x17))']
MSE: [np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000000001), np.float64(0.2500000002257752), np.float64(0.2500000000006424), np.float64(0.25000000000000056), np.float64(0.25), np.float64(0.2500073540741421), np.float64(0.25), np.float64(0.24995068199749365), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000013109), np.float64(0.25000000000000067), np.float64(0.2500000000001108), np.float64(0.25000000000000067), np.float64(0.25), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-1.7000078227983588, 3.608408177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-0.5817998227983588, 2.490200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4780704816137797)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.5817998227983588, 2.490200177201641), n_g=367, sigma_y=0.009538837836035997, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=271, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.009157284322594557, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-5.0729670932023785, 4.527032906797621), n_g=660, sigma_y=0.04237128402454802, unit=0.7224917335920533)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-0.5817998227983588, 2.490200177201641), n_g=335, sigma_y=0.007949031530029998, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.005087380179219199, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.3170660832951802, 3.4829339167048197), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.5843083664168419)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-0.5817998227983588, 2.490200177201641), n_g=399, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.3520337182792378)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=303, sigma_y=0.009538837836035997, unit=0.4346095287397997)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=303, sigma_y=0.006359225224023998, unit=0.6557894123645812)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.5843083664168419)', 'Generator(mode=real, range=(-1.0557307149111312, 2.7842692850888686), n_g=399, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=367, sigma_y=0.005299354353353332, unit=0.7213683536010393)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=335, sigma_y=0.009157284322594557, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.636311811027941)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-4.1129670932023785, 3.567032906797621), n_g=660, sigma_y=0.04237128402454802, unit=0.6568106669018666)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.009538837836035997, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.43026343345240176)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.6492315182409354)']
Gen 31: 24 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.1812526566009754), 5: np.float64(-0.2784395209982069)}\nTree:  -(-163.24416045910954, ((x2(*(x38, 0.1812526566009754, (x74 * -0.2784395209982069))))**(-1.527546221146158) const (1.254046649674836 - x89)), sin(x17))', 'Equation constants: {0: np.float64(0.501815366384402), 1: np.float64(-1.6133918748938896)}\nTree:  (0.501815366384402 + (cos(-1.6133918748938896) / (x11)**(x21)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.6628196431947454), 6: np.float64(1.0)}\nTree:  (-0.49999999999837963 + (cos(-3.6232771373581303e-05))**((1.0 / -0.6628196431947454)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-0.2707400493611951)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(const((x21 - x45((-0.2707400493611951 + -0.2707400493611951))))) const (1.1108933922237667 * x84)) / x31)))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-0.32560793418715944)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(const((x21 - x45((-0.32560793418715944 + -0.32560793418715944))))) const (1.1108933922237667 * x84)) / x31)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342)}\nTree:  -(-163.24416045910954, ((x2((x38 * 0.10684533015999342)) / -1.527546221146158) const (1.254046649674836 - 1.254046649674836)), sin(x17))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  -(const((1.0)**(x4)), const((x2((x38 * x80)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(1.0)), sin(x17))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37625977139044897), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.37625977139044897)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53 + const((x21 - x45((1.0 - 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-0.2707400493611951), 9: np.float64(-0.08549450903374467)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(const((x21 - x45((-0.2707400493611951 + -0.2707400493611951))))) const (1.1108933922237667 * x84((-0.08549450903374467 - -0.08549450903374467)))) / x31)))))', 'Equation constants: {0: np.float64(-0.4250574759382667), 1: np.float64(-0.3896080484007195), 2: np.float64(-1.1761013265484048), 6: np.float64(0.9998019029960075)}\nTree:  (-0.4250574759382667 + (cos(-0.3896080484007195))**((0.9998019029960075)**(-1.1761013265484048)))', 'Equation constants: {0: np.float64(-0.5000000000013931), 1: np.float64(1.7382977221424982e-07), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.5000000000013931 + (cos(1.7382977221424982e-07))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-0.5000000000255413), 1: np.float64(7.511606228204965e-07), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.66228669995485)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(7.511606228204965e-07), (x11)**(x21((x62 / 0.66228669995485))), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000000013931), 1: np.float64(1.7382977221424982e-07), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.5000000000013931 + (cos(1.7382977221424982e-07))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736), 2: np.float64(-0.8922118980599971)}\nTree:  -(-326.7500173403731, const((x2 / x17(cos(-0.8922118980599971)))), sin(x17((x75)**(x40))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-0.6896594616770626)}\nTree:  -(-163.24416045910954, const((x2((x69((x10 - -0.6896594616770626)))**(x66)) / x17)), sin(x17))', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736), 2: np.float64(-1.3314242466117232)}\nTree:  -(-326.7500173403731, const((x2 / x17)), (x17((x75)**(x40)) sin (x19 / -1.3314242466117232)))', 'Equation constants: {0: np.float64(-0.5000000000000852), 1: np.float64(1.1622566660013404e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(1.7660647427181213), 9: np.float64(-0.4447847075166367)}\nTree:  (const(sin(const(sin(-0.4447847075166367)))) + pow(cos(1.1622566660013404e-08), (x11)**(x21), (0.8669610034707098 / const((((x3)**(((x21(cos(1.7660647427181213)) - x45) const sin(x80))) const (x91)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342), 5: np.float64(-1.570584159936034), 6: np.float64(0.43759148136028125)}\nTree:  -(const((0.43759148136028125)**(x4)), const((x2((x38 * 0.10684533015999342)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(-1.570584159936034)), sin(x17(cos(x50))))', 'Equation constants: {0: np.float64(-653.0285205450048), 1: np.float64(-653.5285205450056)}\nTree:  -(-653.0285205450048, -653.5285205450056, cos(x77))', 'Equation constants: {0: np.float64(-0.5000000007257961), 1: np.float64(-3.4736223084264143e-06), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(1.8370260125470992), 9: np.float64(-0.4447847075166367)}\nTree:  (const(sin(const(sin(-0.4447847075166367)))) + pow(cos(-3.4736223084264143e-06), (x11)**(x21), (0.8669610034707098 / const((((x3)**(((x21(cos(1.8370260125470992)) - x45) const sin(x80))) const (1.1108933922237667)**(1.1108933922237667)) / x31)))))', 'Equation constants: {0: np.float64(-326.5460351518048), 1: np.float64(-327.04603515180526)}\nTree:  (-326.5460351518048 - -327.04603515180526)', 'Equation constants: {0: np.float64(0.5000000008581617), 1: np.float64(1.5707962725333922), 2: np.float64(1.6591504633821654), 3: np.float64(1.0199945535472508)}\nTree:  (0.5000000008581617 * ((1.5707962725333922 sin sin(1.6591504633821654)))**(pow(x11, x21, (1.0199945535472508 - 1.0199945535472508))))', 'Equation constants: {0: np.float64(-0.5000000000001467), 1: np.float64(5.1375910798449004e-09), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.66228669995485), 8: np.float64(1.1777367057068213)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(5.1375910798449004e-09), (x11)**(x21(/(x62, 0.66228669995485, (1.1777367057068213 - x6)))), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(0.5000000000045358), 1: np.float64(1.5707962565758213)}\nTree:  (0.5000000000045358 * (sin(1.5707962565758213))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-0.2707400493611951), 9: np.float64(-0.13631305014672268)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(const((x21 - x45((-0.2707400493611951 + -0.2707400493611951))))), (1.1108933922237667 * x84), cos(-0.13631305014672268)) / x31)))))', 'Equation constants: {0: np.float64(-1306.144483439946), 1: np.float64(-1306.6444834399476)}\nTree:  (-1306.144483439946 - -1306.6444834399476)', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37625977139044897), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0), 9: np.float64(1.0), 10: np.float64(1.0)}\nTree:  ((sin(-0.37625977139044897) const (1.0 + x76)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(const((x21((1.0 * 1.0)) - x45((1.0 - 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-326.66436000761087), 1: np.float64(-327.1643600076113)}\nTree:  -(-326.66436000761087, const(cos(x81)), sin(x54, (x59)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 4: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (const(sin(1.0)) + (cos(-3.6232771373581303e-05))**((1.0 / -0.7935272892992125)))', 'Equation constants: {0: np.float64(-0.5398880646708635), 1: np.float64(-0.10100520985913612), 2: np.float64(-4.244862161450462)}\nTree:  (-0.5398880646708635 + (cos(-0.10100520985913612))**((x92 / -4.244862161450462)))', 'Equation constants: {0: np.float64(-163.2380418593682), 1: np.float64(-163.7380418593684)}\nTree:  -(-163.2380418593682, const(cos(x81)), sin(x54, (x65)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-999999.4984430406), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.6628196431947454), 6: np.float64(1.0)}\nTree:  (-999999.4984430406 + (sin(-3.6232771373581303e-05))**((1.0 / -0.6628196431947454)))', 'Equation constants: {0: np.float64(-0.5000000058109807), 1: np.float64(-5.469186307081793e-06), 2: np.float64(-0.27418850543370166)}\nTree:  +(-0.5000000058109807, (cos(-5.469186307081793e-06))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))), sin(x31))', 'Equation constants: {0: np.float64(-0.5000000000018304), 1: np.float64(4.9340014187351606e-08), 2: np.float64(-0.3559466640458077)}\nTree:  (-0.5000000000018304 + (cos(4.9340014187351606e-08))**((x11)**((-0.3559466640458077)**(-0.3559466640458077))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-0.6896594616770626)}\nTree:  -(-163.24416045910954, const((x2((x69((x10 - -0.6896594616770626)) + x66)) / x17)), sin(x17))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976)}\nTree:  -(-163.24416045910954, -163.74416045910976, sin(x17))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(const((x21 - x45((1.0 + 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000643110003), 1: np.float64(8.078229279755524e-05), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.5000000643110003 + (cos(8.078229279755524e-05))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))']
MSE: [np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(104785274753.42952), np.float64(0.25), np.float64(0.25000000000307665), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000000033), np.float64(0.25), np.float64(0.25000000000000006), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.24960913258511727), np.float64(0.25), np.float64(0.25000470165101374), np.float64(0.25000000000422823), np.float64(0.2500000000000014), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.2500000002379806)]
Generators: ['Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=303, sigma_y=0.006359225224023998, unit=0.6557894123645812)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.6492315182409354)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.5843083664168419)', 'Generator(mode=real, range=(-1.0557307149111312, 2.7842692850888686), n_g=399, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.5956751808456152, 1.964324819154385), n_g=367, sigma_y=0.005299354353353332, unit=0.7213683536010393)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=335, sigma_y=0.009157284322594557, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.636311811027941)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-4.1129670932023785, 3.567032906797621), n_g=660, sigma_y=0.04237128402454802, unit=0.6568106669018666)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.009538837836035997, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.43026343345240176)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.6492315182409354)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=239, sigma_y=0.011446605403243196, unit=0.39114857586581975)', 'Generator(mode=real, range=(-0.5817998227983588, 2.490200177201641), n_g=271, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.009538837836035997, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.3520337182792378)', 'Generator(mode=real, range=(-5.0729670932023785, 4.527032906797621), n_g=660, sigma_y=0.05084554082945762, unit=0.7224917335920533)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.009157284322594557, unit=0.7070131233643788)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.009157284322594557, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.3520337182792378)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.43026343345240176)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.5817998227983588, 2.490200177201641), n_g=335, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-4.771610004862284, 4.828389995137716), n_g=660, sigma_y=0.04237128402454802, unit=0.7224917335920533)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.009157284322594557, unit=0.6492315182409354)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.5843083664168419)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-0.5817998227983588, 2.490200177201641), n_g=399, sigma_y=0.006359225224023999, unit=0.4302634334524017)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.38723709010716156)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=399, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-2.6506451678304925, 4.261354832169507), n_g=303, sigma_y=0.004883884972050431, unit=0.6492315182409354)']
Gen 32: 23 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.5000000000001467), 1: np.float64(5.1375910798449004e-09), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.4121323370138712), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(0.66228669995485), 8: np.float64(1.1777367057068213)}\nTree:  (const(sin(-0.4121323370138712)) + pow(cos(5.1375910798449004e-09), (x11)**(x21(/(x62, 0.66228669995485, (1.1777367057068213 - x6)))), (0.8669610034707098 / const((const((x53)**(0.3338681438332669)) / x31)))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(0.5000000000045358), 1: np.float64(1.5707962565758213)}\nTree:  (0.5000000000045358 * (sin(1.5707962565758213))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(-0.2707400493611951), 9: np.float64(-0.13631305014672268)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(const((x21 - x45((-0.2707400493611951 + -0.2707400493611951))))), (1.1108933922237667 * x84), cos(-0.13631305014672268)) / x31)))))', 'Equation constants: {0: np.float64(-1306.144483439946), 1: np.float64(-1306.6444834399476)}\nTree:  (-1306.144483439946 - -1306.6444834399476)', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37625977139044897), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0), 9: np.float64(1.0), 10: np.float64(1.0)}\nTree:  ((sin(-0.37625977139044897) const (1.0 + x76)) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53)**(const((x21((1.0 * 1.0)) - x45((1.0 - 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-326.66436000761087), 1: np.float64(-327.1643600076113)}\nTree:  -(-326.66436000761087, const(cos(x81)), sin(x54, (x59)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 4: np.float64(1.0), 6: np.float64(1.0)}\nTree:  (const(sin(1.0)) + (cos(-3.6232771373581303e-05))**((1.0 / -0.7935272892992125)))', 'Equation constants: {0: np.float64(-0.5398880646708635), 1: np.float64(-0.10100520985913612), 2: np.float64(-4.244862161450462)}\nTree:  (-0.5398880646708635 + (cos(-0.10100520985913612))**((x92 / -4.244862161450462)))', 'Equation constants: {0: np.float64(-163.2380418593682), 1: np.float64(-163.7380418593684)}\nTree:  -(-163.2380418593682, const(cos(x81)), sin(x54, (x65)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-999999.4984430406), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.6628196431947454), 6: np.float64(1.0)}\nTree:  (-999999.4984430406 + (sin(-3.6232771373581303e-05))**((1.0 / -0.6628196431947454)))', 'Equation constants: {0: np.float64(-0.5000000058109807), 1: np.float64(-5.469186307081793e-06), 2: np.float64(-0.27418850543370166)}\nTree:  +(-0.5000000058109807, (cos(-5.469186307081793e-06))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))), sin(x31))', 'Equation constants: {0: np.float64(-0.5000000000018304), 1: np.float64(4.9340014187351606e-08), 2: np.float64(-0.3559466640458077)}\nTree:  (-0.5000000000018304 + (cos(4.9340014187351606e-08))**((x11)**((-0.3559466640458077)**(-0.3559466640458077))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-0.6896594616770626)}\nTree:  -(-163.24416045910954, const((x2((x69((x10 - -0.6896594616770626)) + x66)) / x17)), sin(x17))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976)}\nTree:  -(-163.24416045910954, -163.74416045910976, sin(x17))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(const((x21 - x45((1.0 + 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-0.5000000643110003), 1: np.float64(8.078229279755524e-05), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.5000000643110003 + (cos(8.078229279755524e-05))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-0.42403354506961566), 1: np.float64(-0.3945895619905164), 2: np.float64(-1.1844575625962135), 6: np.float64(1.010144354129951)}\nTree:  (-0.42403354506961566 + ((-0.3945895619905164 cos (x17)**(x55)))**((1.010144354129951)**(-1.1844575625962135)))', 'Equation constants: {0: np.float64(-0.5446614809722273), 1: np.float64(-0.10660950746158356), 2: np.float64(-4.184192367998146)}\nTree:  (-0.5446614809722273 + (cos(-0.10660950746158356))**((x61 / -4.184192367998146)))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976)}\nTree:  -(-163.24416045910954, -163.74416045910976, sin(x17))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.27418850543370166), 3: np.float64(0.4040896736230666)}\nTree:  +(-0.500000000000083, (cos(1.4416922241262404e-08))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))), (0.4040896736230666 - x35))', 'Equation constants: {0: np.float64(-326.66113794612795), 1: np.float64(-327.16113794612835), 2: np.float64(-0.6896594616770626)}\nTree:  -(-326.66113794612795, const((x2((x69((x10 - -0.6896594616770626)) + x66)) / x17)), sin(x17))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342)}\nTree:  -(-163.24416045910954, (/(x2((x38 * 0.10684533015999342)), -1.527546221146158, (x95)**(x57)) const (1.254046649674836 - 1.254046649674836)), sin(x17))', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552)}\nTree:  (-653.2783265049544 - -653.7783265049552)', 'Equation constants: {0: np.float64(-653.0922137782561), 1: np.float64(653.5922137782566)}\nTree:  (-653.0922137782561 + 653.5922137782566)', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  -(const((1.0)**(x4)), const((x2((x38 * x80(cos(x85)))) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(1.0)), sin(x17))', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736), 2: np.float64(-1.3314242466117232)}\nTree:  -(-326.7500173403731, const((x2 / x17)), (x17((x75)**(x40)) sin (x71 / -1.3314242466117232)))', 'Equation constants: {0: np.float64(-0.5000000000000852), 1: np.float64(1.1622566660013404e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(1.7660647427181213), 9: np.float64(-0.4447847075166367)}\nTree:  (const(sin(const(sin(-0.4447847075166367)))) + pow(cos(1.1622566660013404e-08), (x11)**(x21), (0.8669610034707098 / const((((x3)**(((x21(cos(1.7660647427181213)) - x45) const sin(x80))) const (x91)**(1.1108933922237667)) * x31)))))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37625977139044897), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0), 9: np.float64(1.0)}\nTree:  (const((-0.37625977139044897 sin (x59 - 1.0))) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53 + const((x21 - x45((1.0 - 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(0.5018153663680667), 1: np.float64(-1.613391874510366)}\nTree:  (0.5018153663680667 + (cos(-1.613391874510366) / (x11)**(x21)))', 'Equation constants: {0: np.float64(-2612.575584490587), 1: np.float64(-2613.0755844905902)}\nTree:  (-2612.575584490587 - -2613.0755844905902)', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762)}\nTree:  -(-653.5189680101753, const(cos(x81)), sin(x54, (x59)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 5: np.float64(1.0)}\nTree:  -(-163.24416045910954, const((x2((x38 * x80)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(1.0)), sin(x17))', 'Equation constants: {0: np.float64(-2612.4853772601696), 1: np.float64(-2612.985377260173)}\nTree:  (-2612.4853772601696 - -2612.985377260173)', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736), 2: np.float64(-0.8922118980599971)}\nTree:  -(-326.7500173403731, const((x2((x66 * x0)) / x17(cos(-0.8922118980599971)))), sin(x17((x75)**(x40))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342), 5: np.float64(-1.570584159936034), 6: np.float64(0.43759148136028125)}\nTree:  -(const((0.43759148136028125)**(x4)), const((x2((x38 * 0.10684533015999342)) / -1.527546221146158), (const((x95 - x49)) - 1.254046649674836), (x67)**(-1.570584159936034)), sin(x17(cos(x50))))', 'Equation constants: {0: np.float64(-0.4258796206706147), 1: np.float64(-0.38747159489906896), 2: np.float64(-1.1761013265484048), 6: np.float64(1.0001281217540685), 7: np.float64(1.0)}\nTree:  +(-0.4258796206706147, (cos(-0.38747159489906896))**((1.0001281217540685)**(-1.1761013265484048)), (1.0)**(x42))', 'Equation constants: {0: np.float64(0.5000000008581617), 1: np.float64(1.5707962725333922), 2: np.float64(1.7759195456326369), 3: np.float64(1.0199945535472508)}\nTree:  (0.5000000008581617 * ((1.5707962725333922 sin sin(1.7759195456326369)))**(pow(x11, x21, (1.0199945535472508 - 1.0199945535472508))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  -(const((1.0)**(x4)), const((x2((x38 * x91)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(1.0)), sin(x17(cos(x50))))', 'Equation constants: {0: np.float64(-0.42403354506961566), 1: np.float64(-0.3945895619905164), 2: np.float64(-1.1844575625962135), 6: np.float64(1.010144354129951)}\nTree:  (-0.42403354506961566 + (cos(-0.3945895619905164))**((1.010144354129951)**(-1.1844575625962135)))']
MSE: [np.float64(0.25000000000020384), np.float64(0.2495138662978218), np.float64(0.25), np.float64(0.25), np.float64(2.7878299987674688e+23), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.24995068199749365), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(321818713.7701798), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000000015), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000020384)]
Generators: ['Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.3520337182792378)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.43026343345240176)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.39114857586581975)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.5817998227983588, 2.490200177201641), n_g=335, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-4.771610004862284, 4.828389995137716), n_g=660, sigma_y=0.04237128402454802, unit=0.7224917335920533)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.009157284322594557, unit=0.6492315182409354)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.5843083664168419)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-0.5817998227983588, 2.490200177201641), n_g=399, sigma_y=0.006359225224023999, unit=0.4302634334524017)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.38723709010716156)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=399, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-2.6506451678304925, 4.261354832169507), n_g=303, sigma_y=0.004883884972050431, unit=0.6492315182409354)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-1.0557307149111312, 2.7842692850888686), n_g=367, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=271, sigma_y=0.011446605403243196, unit=0.39114857586581975)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007631070268828798, unit=0.636311811027941)', 'Generator(mode=real, range=(-0.5203598227983588, 2.428760177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.3520337182792378)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.011446605403243196, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.6506451678304925, 4.261354832169507), n_g=303, sigma_y=0.004883884972050431, unit=0.5843083664168419)', 'Generator(mode=real, range=(-4.771610004862284, 4.828389995137716), n_g=628, sigma_y=0.04237128402454802, unit=0.7224917335920533)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.43026343345240176)', 'Generator(mode=real, range=(-2.4098658165919966, 4.502134183408003), n_g=335, sigma_y=0.007631070268828798, unit=0.5843083664168419)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.009157284322594557, unit=0.6492315182409354)', 'Generator(mode=real, range=(-2.6506451678304925, 4.261354832169507), n_g=303, sigma_y=0.004883884972050431, unit=0.714154670065029)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.316830346451314)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.009157284322594557, unit=0.5843083664168419)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.42596079911787776)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.5843083664168419)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.43026343345240176)', 'Generator(mode=real, range=(-2.6506451678304925, 4.261354832169507), n_g=303, sigma_y=0.004883884972050431, unit=0.714154670065029)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.006104856215063039, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-0.5817998227983588, 2.490200177201641), n_g=399, sigma_y=0.009538837836035997, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)']
Gen 33: 23 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552)}\nTree:  (-653.2783265049544 - -653.7783265049552)', 'Equation constants: {0: np.float64(-653.0922137782561), 1: np.float64(653.5922137782566)}\nTree:  (-653.0922137782561 + 653.5922137782566)', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  -(const((1.0)**(x4)), const((x2((x38 * x80(cos(x85)))) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(1.0)), sin(x17))', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736), 2: np.float64(-1.3314242466117232)}\nTree:  -(-326.7500173403731, const((x2 / x17)), (x17((x75)**(x40)) sin (x71 / -1.3314242466117232)))', 'Equation constants: {0: np.float64(-0.5000000000000852), 1: np.float64(1.1622566660013404e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 8: np.float64(1.7660647427181213), 9: np.float64(-0.4447847075166367)}\nTree:  (const(sin(const(sin(-0.4447847075166367)))) + pow(cos(1.1622566660013404e-08), (x11)**(x21), (0.8669610034707098 / const((((x3)**(((x21(cos(1.7660647427181213)) - x45) const sin(x80))) const (x91)**(1.1108933922237667)) * x31)))))', 'Equation constants: {0: np.float64(-0.4999999991503631), 1: np.float64(1.8851751868595924e-08), 2: np.float64(-0.6628196431947454), 3: np.float64(1.6487086928786074), 4: np.float64(-0.37625977139044897), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0), 9: np.float64(1.0)}\nTree:  (const((-0.37625977139044897 sin (x59 - 1.0))) + pow(cos(1.8851751868595924e-08), (x11)**(x21), (0.8669610034707098 / const((const((x53 + const((x21 - x45((1.0 - 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(0.5018153663680667), 1: np.float64(-1.613391874510366)}\nTree:  (0.5018153663680667 + (cos(-1.613391874510366) / (x11)**(x21)))', 'Equation constants: {0: np.float64(-2612.575584490587), 1: np.float64(-2613.0755844905902)}\nTree:  (-2612.575584490587 - -2613.0755844905902)', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762)}\nTree:  -(-653.5189680101753, const(cos(x81)), sin(x54, (x59)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 5: np.float64(1.0)}\nTree:  -(-163.24416045910954, const((x2((x38 * x80)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(1.0)), sin(x17))', 'Equation constants: {0: np.float64(-2612.4853772601696), 1: np.float64(-2612.985377260173)}\nTree:  (-2612.4853772601696 - -2612.985377260173)', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736), 2: np.float64(-0.8922118980599971)}\nTree:  -(-326.7500173403731, const((x2((x66 * x0)) / x17(cos(-0.8922118980599971)))), sin(x17((x75)**(x40))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342), 5: np.float64(-1.570584159936034), 6: np.float64(0.43759148136028125)}\nTree:  -(const((0.43759148136028125)**(x4)), const((x2((x38 * 0.10684533015999342)) / -1.527546221146158), (const((x95 - x49)) - 1.254046649674836), (x67)**(-1.570584159936034)), sin(x17(cos(x50))))', 'Equation constants: {0: np.float64(-0.4258796206706147), 1: np.float64(-0.38747159489906896), 2: np.float64(-1.1761013265484048), 6: np.float64(1.0001281217540685), 7: np.float64(1.0)}\nTree:  +(-0.4258796206706147, (cos(-0.38747159489906896))**((1.0001281217540685)**(-1.1761013265484048)), (1.0)**(x42))', 'Equation constants: {0: np.float64(0.5000000008581617), 1: np.float64(1.5707962725333922), 2: np.float64(1.7759195456326369), 3: np.float64(1.0199945535472508)}\nTree:  (0.5000000008581617 * ((1.5707962725333922 sin sin(1.7759195456326369)))**(pow(x11, x21, (1.0199945535472508 - 1.0199945535472508))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  -(const((1.0)**(x4)), const((x2((x38 * x91)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(1.0)), sin(x17(cos(x50))))', 'Equation constants: {0: np.float64(-0.42403354506961566), 1: np.float64(-0.3945895619905164), 2: np.float64(-1.1844575625962135), 6: np.float64(1.010144354129951)}\nTree:  (-0.42403354506961566 + (cos(-0.3945895619905164))**((1.010144354129951)**(-1.1844575625962135)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0), 9: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(const((x21 - x45((1.0 + 1.0)))))) / x31((1.0 + x13)))))))', 'Equation constants: {0: np.float64(-1306.6928482707015), 1: np.float64(1307.192848270703)}\nTree:  (-1306.6928482707015 + 1307.192848270703)', 'Equation constants: {0: np.float64(0.4999999960005018), 1: np.float64(1.570801084342353)}\nTree:  (0.4999999960005018 * (sin(1.570801084342353))**((x11)**(x21)))', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736), 2: np.float64(-1.3314242466117232)}\nTree:  -(-326.7500173403731, const(/(x2, x17, (x34)**(x30))), (x17((x75)**(x40)) sin (x71 / -1.3314242466117232)))', 'Equation constants: {0: np.float64(-0.5446598094582913), 1: np.float64(-0.10660840589985367), 2: np.float64(-4.1848147435005565)}\nTree:  (-0.5446598094582913 + (cos(-0.10660840589985367))**((x61 / -4.1848147435005565)))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.4385357800874947), 3: np.float64(1.254046649674836), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  -(const((1.0)**(x4)), const((x2((x38 * x80(cos(x85)))) / -1.4385357800874947), (1.254046649674836 - 1.254046649674836), (x67)**(1.0)), sin(x17))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762)}\nTree:  -(-653.5189680101753, const(cos(x81)), sin(x54, (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.27418850543370166)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  -(-163.24416045910954, const((x2((x38 * x80)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(1.0)), sin(x17), sin(1.0))', 'Equation constants: {0: np.float64(-5225.1779623284565), 1: np.float64(-5225.677962328464)}\nTree:  (-5225.1779623284565 - -5225.677962328464)', 'Equation constants: {0: np.float64(-0.4403439116302439), 1: np.float64(-0.34734571764765704), 2: np.float64(-1.1764431855882127), 6: np.float64(1.0008966626318196)}\nTree:  (-0.4403439116302439 + (cos(-0.34734571764765704))**((1.0008966626318196)**(-1.1764431855882127)))', 'Equation constants: {0: np.float64(-2612.575584490587), 1: np.float64(-2613.0755844905902)}\nTree:  (-2612.575584490587 - -2613.0755844905902)', 'Equation constants: {0: np.float64(-5225.419163243278), 1: np.float64(-5225.919163243285)}\nTree:  (-5225.419163243278 - -5225.919163243285)', 'Equation constants: {0: np.float64(-0.4403439116302439), 1: np.float64(-0.34734571764765704), 2: np.float64(-1.1764431855882127), 6: np.float64(1.0008966626318196)}\nTree:  (-0.4403439116302439 + (cos(-0.34734571764765704))**((1.0008966626318196)**(-1.1764431855882127)))', 'Equation constants: {0: np.float64(-2612.4853772601696), 1: np.float64(-2612.985377260173), 2: np.float64(1.2469538370303153)}\nTree:  (const((1.2469538370303153 / 1.2469538370303153)) - -2612.985377260173)', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.37464568828526557), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(const((x21 - x45((1.0 + 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-1306.144483439946), 1: np.float64(-1306.6444834399476)}\nTree:  (-1306.144483439946 - -1306.6444834399476)', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376)}\nTree:  -(-326.7500173403731, const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-0.8922118980599971)))), sin(x17((x75)**(x40))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(const((x21 * x45((1.0 + 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 9: np.float64(1.0)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(0.3338681438332669), (1.1108933922237667 * x84), cos(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 5: np.float64(1.0)}\nTree:  -(-163.24416045910954, const((x2((x38 * x91)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(1.0)), sin(x17(cos(x50))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342), 5: np.float64(-0.0892630081375132)}\nTree:  -(-163.24416045910954, (/(x2((x38 * 0.10684533015999342)), -1.527546221146158, (x95((-0.0892630081375132 + -0.0892630081375132)))**(x57)) const (1.254046649674836 - 1.254046649674836)), sin(x17))', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552), 2: np.float64(1.7054755517043807)}\nTree:  (-653.2783265049544 - const((1.7054755517043807 / x37)))']
MSE: [np.float64(0.25), np.float64(0.25), np.float64(0.250000000006118), np.float64(0.25), np.float64(0.2495138661215224), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000443843), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000443843), np.float64(324621435.6121799), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.7706165453850069), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.009157284322594557, unit=0.6492315182409354)', 'Generator(mode=real, range=(-2.6506451678304925, 4.261354832169507), n_g=303, sigma_y=0.004883884972050431, unit=0.714154670065029)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.316830346451314)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.009157284322594557, unit=0.5843083664168419)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.42596079911787776)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.5843083664168419)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.6492315182409354)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.43026343345240176)', 'Generator(mode=real, range=(-2.6506451678304925, 4.261354832169507), n_g=303, sigma_y=0.004883884972050431, unit=0.714154670065029)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.006104856215063039, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-0.5817998227983588, 2.490200177201641), n_g=399, sigma_y=0.009538837836035997, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-4.771610004862284, 4.828389995137716), n_g=660, sigma_y=0.04237128402454802, unit=0.7224917335920533)', 'Generator(mode=real, range=(-0.5817998227983588, 2.490200177201641), n_g=335, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.6506451678304925, 4.261354832169507), n_g=271, sigma_y=0.004883884972050431, unit=0.714154670065029)', 'Generator(mode=real, range=(-2.6506451678304925, 4.261354832169507), n_g=303, sigma_y=0.003907107977640345, unit=0.714154670065029)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.0557307149111312, 2.7842692850888686), n_g=367, sigma_y=0.006359225224023999, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-0.5817998227983588, 2.490200177201641), n_g=399, sigma_y=0.009538837836035997, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.316830346451314)', 'Generator(mode=real, range=(-1.219570645606776, 2.466829354393224), n_g=239, sigma_y=0.009538837836035997, unit=0.42596079911787776)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=399, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-0.8152718227983589, 2.723672177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.3520337182792378)', 'Generator(mode=real, range=(-4.771610004862284, 4.828389995137716), n_g=628, sigma_y=0.04237128402454802, unit=0.7224917335920533)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=367, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-4.771610004862284, 4.828389995137716), n_g=628, sigma_y=0.04237128402454802, unit=0.7224917335920533)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.013735926483891835, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.43026343345240176)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.9594451678304925, 3.570154832169507), n_g=303, sigma_y=0.004883884972050431, unit=0.5843083664168419)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.009157284322594557, unit=0.4780704816137797)', 'Generator(mode=real, range=(-4.771610004862284, 4.828389995137716), n_g=628, sigma_y=0.033897027219638415, unit=0.7224917335920533)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7070131233643788)']
Gen 34: 25 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  -(-163.24416045910954, const((x2((x38 * x80)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(1.0)), sin(x17), sin(1.0))', 'Equation constants: {0: np.float64(-5225.1779623284565), 1: np.float64(-5225.677962328464)}\nTree:  (-5225.1779623284565 - -5225.677962328464)', 'Equation constants: {0: np.float64(-0.4403439116302439), 1: np.float64(-0.34734571764765704), 2: np.float64(-1.1764431855882127), 6: np.float64(1.0008966626318196)}\nTree:  (-0.4403439116302439 + (cos(-0.34734571764765704))**((1.0008966626318196)**(-1.1764431855882127)))', 'Equation constants: {0: np.float64(-2612.575584490587), 1: np.float64(-2613.0755844905902)}\nTree:  (-2612.575584490587 - -2613.0755844905902)', 'Equation constants: {0: np.float64(-5225.419163243278), 1: np.float64(-5225.919163243285)}\nTree:  (-5225.419163243278 - -5225.919163243285)', 'Equation constants: {0: np.float64(-0.4403439116302439), 1: np.float64(-0.34734571764765704), 2: np.float64(-1.1764431855882127), 6: np.float64(1.0008966626318196)}\nTree:  (-0.4403439116302439 + (cos(-0.34734571764765704))**((1.0008966626318196)**(-1.1764431855882127)))', 'Equation constants: {0: np.float64(-2612.4853772601696), 1: np.float64(-2612.985377260173), 2: np.float64(1.2469538370303153)}\nTree:  (const((1.2469538370303153 / 1.2469538370303153)) - -2612.985377260173)', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.37464568828526557), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(const((x21 - x45((1.0 + 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-1306.144483439946), 1: np.float64(-1306.6444834399476)}\nTree:  (-1306.144483439946 - -1306.6444834399476)', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376)}\nTree:  -(-326.7500173403731, const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-0.8922118980599971)))), sin(x17((x75)**(x40))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(const((x21 * x45((1.0 + 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 9: np.float64(1.0)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(0.3338681438332669), (1.1108933922237667 * x84), cos(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 5: np.float64(1.0)}\nTree:  -(-163.24416045910954, const((x2((x38 * x91)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(1.0)), sin(x17(cos(x50))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.10684533015999342), 5: np.float64(-0.0892630081375132)}\nTree:  -(-163.24416045910954, (/(x2((x38 * 0.10684533015999342)), -1.527546221146158, (x95((-0.0892630081375132 + -0.0892630081375132)))**(x57)) const (1.254046649674836 - 1.254046649674836)), sin(x17))', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552), 2: np.float64(1.7054755517043807)}\nTree:  (-653.2783265049544 - const((1.7054755517043807 / x37)))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.4385357800874947), 3: np.float64(1.254046649674836), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(1.0)}\nTree:  -(const((1.0)**(x4)), const((((x38 * x80(cos(x85))) x2 (1.0)**(1.0)) / -1.4385357800874947), (1.254046649674836 - 1.254046649674836), (x67)**(1.0)), sin(x17))', 'Equation constants: {0: np.float64(-0.5620560150566464), 7: np.float64(1.006869191930758)}\nTree:  (-0.5620560150566464 + (1.006869191930758)**(x42))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0), 9: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / ((const((x3)**(const((x21 - x45((1.0 + 1.0)))))) / x31((1.0 + x13))) const (x32 + x74)))))', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736), 2: np.float64(-0.8922118980599971)}\nTree:  -(-326.7500173403731, const((x2((x66 * x0)) / x17(cos(-0.8922118980599971)))), sin(x17((x75 + x40))))', 'Equation constants: {0: np.float64(1.4049395434676186), 1: np.float64(-0.32378823701577353), 2: np.float64(-1.1721113612321787), 6: np.float64(0.5857278039209788)}\nTree:  (1.4049395434676186 - (cos(-0.32378823701577353))**((0.5857278039209788)**(-1.1721113612321787)))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-0.3602325130591728)}\nTree:  -(-653.5189680101753, const(cos(x81)), sin(x54, (x2)**(x67), cos(x81)), cos(x40((x48)**(-0.3602325130591728))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.27418850543370166), 3: np.float64(0.5512602348579452)}\nTree:  (-0.500000000000083 + (cos(const(cos(0.5512602348579452))))**((x11)**((-0.27418850543370166)**(-0.27418850543370166))))', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552), 2: np.float64(1.7054755517043807), 3: np.float64(-0.8131104543242791)}\nTree:  (-653.2783265049544 - const((1.7054755517043807 / x37((-0.8131104543242791 + -0.8131104543242791)))))', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376)}\nTree:  -(-326.7500173403731, const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-0.8922118980599971)))), sin(x17))', 'Equation constants: {0: np.float64(-0.5000000767173354), 1: np.float64(-1.4897214757656394e-06), 2: np.float64(-2.6116884419595903)}\nTree:  (-0.5000000767173354 + (cos(-1.4897214757656394e-06))**((x61 + -2.6116884419595903)))', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552)}\nTree:  (-653.2783265049544 - -653.7783265049552)', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762)}\nTree:  -(-653.5189680101753, -654.0189680101762, sin(x54, (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552), 2: np.float64(1.7054755517043807), 3: np.float64(0.45180320364038584)}\nTree:  -(-653.2783265049544, const((1.7054755517043807 / x37)), (0.45180320364038584 * x42))', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457)}\nTree:  (-5225.13455008745 - -5225.634550087457)', 'Equation constants: {0: np.float64(-0.42455536393030635), 1: np.float64(-0.390981131566128), 2: np.float64(-1.1761013265484048), 6: np.float64(1.0002168477312463), 7: np.float64(1.0)}\nTree:  +(-0.42455536393030635, (cos(-0.390981131566128))**((1.0002168477312463)**(-1.1761013265484048)), (1.0)**(x42))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762)}\nTree:  -(-653.5189680101753, const(cos(x81)), (x54 sin cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376)}\nTree:  -(-326.7500173403731, const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-0.8922118980599971)))), sin(x17((x75)**(x40))))', 'Equation constants: {0: np.float64(-0.5446566819828557), 1: np.float64(-0.10660634798447012), 2: np.float64(-4.185982519760077)}\nTree:  (-0.5446566819828557 + (cos(-0.10660634798447012))**((x61 / -4.185982519760077)))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.2026258696700648), 5: np.float64(-1.570584159936034), 6: np.float64(0.43759148136028125)}\nTree:  -(const((0.43759148136028125)**(x4)), const((x2((x38 * 0.2026258696700648)) / -1.527546221146158), (const((x95 - x49)) - 1.254046649674836), (x67)**(-1.570584159936034)), sin(x17(cos(x50))))', 'Equation constants: {0: np.float64(-0.41102044936752125), 1: np.float64(-0.41986692008685966), 2: np.float64(-1.1301362992299913), 6: np.float64(0.9777553162585285), 7: np.float64(1.0)}\nTree:  +(-0.41102044936752125, (cos(-0.41986692008685966))**((0.9777553162585285)**(-1.1301362992299913)), (1.0)**(x42))', 'Equation constants: {0: np.float64(-1307.2402675309622), 1: np.float64(-1307.740267530964)}\nTree:  -(-1307.2402675309622, const(cos(x81)), sin(x54, (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(const((x21 * x45((x22 + 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(0.49999999999467615), 1: np.float64(1.570796890490015), 2: np.float64(1.455072873885098)}\nTree:  (0.49999999999467615 * pow(sin(1.570796890490015), (x11)**(x21), sin(1.455072873885098)))', 'Equation constants: {0: np.float64(-5225.152488118494), 1: np.float64(-5225.652488118501)}\nTree:  (-5225.152488118494 - -5225.652488118501)', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 9: np.float64(1.0), 10: np.float64(1.0)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(0.3338681438332669), (1.1108933922237667 * x84), cos(1.0)) / x31((1.0 / x27)))))))']
MSE: [np.float64(0.25), np.float64(0.24963395008195766), np.float64(0.25), np.float64(0.25), np.float64(0.2500000001342918), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000700684), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000192263), np.float64(0.25), np.float64(0.25), np.float64(0.24951386553828922), np.float64(0.25), np.float64(0.2500000000223242), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000001593), np.float64(0.25), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-1.219570645606776, 2.466829354393224), n_g=239, sigma_y=0.009538837836035997, unit=0.42596079911787776)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=399, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-0.8152718227983589, 2.723672177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.3520337182792378)', 'Generator(mode=real, range=(-4.771610004862284, 4.828389995137716), n_g=628, sigma_y=0.04237128402454802, unit=0.7224917335920533)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=367, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-4.771610004862284, 4.828389995137716), n_g=628, sigma_y=0.04237128402454802, unit=0.7224917335920533)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.013735926483891835, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.43026343345240176)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.9594451678304925, 3.570154832169507), n_g=303, sigma_y=0.004883884972050431, unit=0.5843083664168419)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.009157284322594557, unit=0.4780704816137797)', 'Generator(mode=real, range=(-4.771610004862284, 4.828389995137716), n_g=628, sigma_y=0.033897027219638415, unit=0.7224917335920533)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7070131233643788)', 'Generator(mode=real, range=(-2.197743398835314, 3.5622566011646857), n_g=303, sigma_y=0.006104856215063039, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.0557307149111312, 2.7842692850888686), n_g=367, sigma_y=0.006359225224023999, unit=0.5258775297751577)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.43026343345240176)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.7777144357008168)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=367, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.6506451678304925, 4.261354832169507), n_g=303, sigma_y=0.004688529573168414, unit=0.714154670065029)', 'Generator(mode=real, range=(-1.1891728823819778, 2.650827117618022), n_g=399, sigma_y=0.006359225224023999, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.007325827458075646, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.011446605403243196, unit=0.316830346451314)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-0.8466116357781602, 2.9933883642218397), n_g=367, sigma_y=0.006359225224023999, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=303, sigma_y=0.009157284322594557, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.006104856215063039, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.5843083664168419)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.316830346451314)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.004883884972050431, unit=0.5843083664168419)', 'Generator(mode=real, range=(-1.219570645606776, 2.466829354393224), n_g=239, sigma_y=0.009538837836035997, unit=0.42596079911787776)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.013735926483891835, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.5843083664168419)', 'Generator(mode=real, range=(-1.9594451678304925, 3.570154832169507), n_g=271, sigma_y=0.004883884972050431, unit=0.714154670065029)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=335, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.006359225224023999, unit=0.5258775297751577)', 'Generator(mode=real, range=(-0.9226527974713741, 2.763747202528626), n_g=271, sigma_y=0.009538837836035997, unit=0.316830346451314)']
Gen 35: 23 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376)}\nTree:  -(-326.7500173403731, const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-0.8922118980599971)))), sin(x17))', 'Equation constants: {0: np.float64(-0.5000000767173354), 1: np.float64(-1.4897214757656394e-06), 2: np.float64(-2.6116884419595903)}\nTree:  (-0.5000000767173354 + (cos(-1.4897214757656394e-06))**((x61 + -2.6116884419595903)))', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552)}\nTree:  (-653.2783265049544 - -653.7783265049552)', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762)}\nTree:  -(-653.5189680101753, -654.0189680101762, sin(x54, (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552), 2: np.float64(1.7054755517043807), 3: np.float64(0.45180320364038584)}\nTree:  -(-653.2783265049544, const((1.7054755517043807 / x37)), (0.45180320364038584 * x42))', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457)}\nTree:  (-5225.13455008745 - -5225.634550087457)', 'Equation constants: {0: np.float64(-0.42455536393030635), 1: np.float64(-0.390981131566128), 2: np.float64(-1.1761013265484048), 6: np.float64(1.0002168477312463), 7: np.float64(1.0)}\nTree:  +(-0.42455536393030635, (cos(-0.390981131566128))**((1.0002168477312463)**(-1.1761013265484048)), (1.0)**(x42))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762)}\nTree:  -(-653.5189680101753, const(cos(x81)), (x54 sin cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376)}\nTree:  -(-326.7500173403731, const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-0.8922118980599971)))), sin(x17((x75)**(x40))))', 'Equation constants: {0: np.float64(-0.5446566819828557), 1: np.float64(-0.10660634798447012), 2: np.float64(-4.185982519760077)}\nTree:  (-0.5446566819828557 + (cos(-0.10660634798447012))**((x61 / -4.185982519760077)))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.2026258696700648), 5: np.float64(-1.570584159936034), 6: np.float64(0.43759148136028125)}\nTree:  -(const((0.43759148136028125)**(x4)), const((x2((x38 * 0.2026258696700648)) / -1.527546221146158), (const((x95 - x49)) - 1.254046649674836), (x67)**(-1.570584159936034)), sin(x17(cos(x50))))', 'Equation constants: {0: np.float64(-0.41102044936752125), 1: np.float64(-0.41986692008685966), 2: np.float64(-1.1301362992299913), 6: np.float64(0.9777553162585285), 7: np.float64(1.0)}\nTree:  +(-0.41102044936752125, (cos(-0.41986692008685966))**((0.9777553162585285)**(-1.1301362992299913)), (1.0)**(x42))', 'Equation constants: {0: np.float64(-1307.2402675309622), 1: np.float64(-1307.740267530964)}\nTree:  -(-1307.2402675309622, const(cos(x81)), sin(x54, (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(const((x21 * x45((x22 + 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(0.49999999999467615), 1: np.float64(1.570796890490015), 2: np.float64(1.455072873885098)}\nTree:  (0.49999999999467615 * pow(sin(1.570796890490015), (x11)**(x21), sin(1.455072873885098)))', 'Equation constants: {0: np.float64(-5225.152488118494), 1: np.float64(-5225.652488118501)}\nTree:  (-5225.152488118494 - -5225.652488118501)', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 9: np.float64(1.0), 10: np.float64(1.0)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(0.3338681438332669), (1.1108933922237667 * x84), cos(1.0)) / x31((1.0 / x27)))))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 9: np.float64(1.0), 10: np.float64(1.0)}\nTree:  +(const(sin(-0.2435195169519689)), (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(0.3338681438332669), (1.1108933922237667 * x84), cos(1.0)) / x31)))), (1.0 + 1.0))', 'Equation constants: {0: np.float64(-13299.900204780966), 1: np.float64(-26599.668527405287)}\nTree:  (-13299.900204780966 / -26599.668527405287)', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376)}\nTree:  (-326.7500173403731 - const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-0.8922118980599971)))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(const((x21 * x45((1.0 + 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  -(-163.24416045910954, const((x2((x38 * x91((1.0 / 1.0)))) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(1.0)), sin(x17(cos(x50))))', 'Equation constants: {0: np.float64(-999999.5296443929), 1: np.float64(-0.2539080743099701), 2: np.float64(-4.185982519760077)}\nTree:  (-999999.5296443929 + (sin(-0.2539080743099701))**((x61 / -4.185982519760077)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 10: np.float64(1.0)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(0.3338681438332669) const (1.1108933922237667 * x84)) / x31((1.0 / x27)))))))', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376)}\nTree:  -(-326.7500173403731, const((x2((x66((-1.115757916470376 / x5)) * x0)) / x17(cos(-0.8922118980599971)))), sin(x17((x75)**(x40))))', 'Equation constants: {0: np.float64(-1306.707549179539), 1: np.float64(-1307.2075491795408), 2: np.float64(1.7054755517043807)}\nTree:  (-1306.707549179539 - const((1.7054755517043807 / x37)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(0.3338681438332669), 9: np.float64(0.8669610034707098)}\nTree:  (-0.49999999999837963 + (cos(-3.6232771373581303e-05))**((1.0 / const((const((x3)**(1.0), (0.3338681438332669 * x84), cos(0.8669610034707098)) / x31)))))', 'Equation constants: {0: np.float64(-0.5483661947991182), 1: np.float64(-0.10898343306889736), 2: np.float64(-3.0290098146282474)}\nTree:  (-0.5483661947991182 + (cos(-0.10898343306889736))**((x61 / -3.0290098146282474)))', 'Equation constants: {0: np.float64(-2612.4853772601696), 1: np.float64(-2612.985377260173)}\nTree:  (-2612.4853772601696 - -2612.985377260173)', 'Equation constants: {0: np.float64(-0.42323013403747334), 1: np.float64(-0.3944672145775155), 2: np.float64(-1.1761013265484048), 6: np.float64(1.0003169749492002), 7: np.float64(1.0)}\nTree:  +(-0.42323013403747334, (cos(-0.3944672145775155))**((1.0003169749492002)**(-1.1761013265484048)), (1.0)**(x42))', 'Equation constants: {0: np.float64(-10450.39168236431), 1: np.float64(-10450.891682364323)}\nTree:  (-10450.39168236431 - -10450.891682364323)', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 5: np.float64(1.0)}\nTree:  -(-163.24416045910954, const((x2((x38 * x91)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(1.0)), sin(x17(cos(x50((x38 * x9))))))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762)}\nTree:  -(-653.5189680101753, -654.0189680101762, cos(x40))', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552)}\nTree:  (const((x71 * x22)) - -653.7783265049552)', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762)}\nTree:  -(-653.5189680101753, -654.0189680101762, sin(x54, (x2)**(x67), cos(x81)), sin(x40))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.2026258696700648), 5: np.float64(-1.570584159936034), 6: np.float64(0.43759148136028125)}\nTree:  -(const((0.43759148136028125)**(x4)), const((x2((x38 * 0.2026258696700648)) / -1.527546221146158), (const((x95 - x49)) - 1.254046649674836), (x67)**(const((x49 + x62)))), sin(x17(cos(x50))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376)}\nTree:  -(-653.7726600211632, const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-0.8922118980599971)))), sin(x17))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.284255522423166), 3: np.float64(0.5512602348579452)}\nTree:  (-0.500000000000083 + (cos(const(cos(0.5512602348579452))))**((x11)**((-0.284255522423166)**(-0.284255522423166))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0), 9: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / ((const((x3)**(const((x21 - x45((1.0 + 1.0)))))) / x31((1.0 + x13))) const (x32 + x74((x86 - x64)))))))', 'Equation constants: {0: np.float64(-2612.575584490587), 1: np.float64(-2613.0755844905902)}\nTree:  (-2612.575584490587 - -2613.0755844905902)']
MSE: [np.float64(0.25), np.float64(0.2500000000246452), np.float64(0.25), np.float64(328713078.6355189), np.float64(0.25), np.float64(0.25), np.float64(0.2496038465670565), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.24951854941442508), np.float64(0.5), np.float64(0.25), np.float64(0.25000000000233796), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-0.8466116357781602, 2.9933883642218397), n_g=367, sigma_y=0.006359225224023999, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=303, sigma_y=0.009157284322594557, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.006104856215063039, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.5843083664168419)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=271, sigma_y=0.009538837836035997, unit=0.316830346451314)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.004883884972050431, unit=0.5843083664168419)', 'Generator(mode=real, range=(-1.219570645606776, 2.466829354393224), n_g=239, sigma_y=0.009538837836035997, unit=0.42596079911787776)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.013735926483891835, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.5843083664168419)', 'Generator(mode=real, range=(-1.9594451678304925, 3.570154832169507), n_g=271, sigma_y=0.004883884972050431, unit=0.714154670065029)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=335, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.006359225224023999, unit=0.5258775297751577)', 'Generator(mode=real, range=(-0.9226527974713741, 2.763747202528626), n_g=271, sigma_y=0.009538837836035997, unit=0.316830346451314)', 'Generator(mode=real, range=(-2.197743398835314, 3.5622566011646857), n_g=303, sigma_y=0.006104856215063039, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.0164831117806702, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.3030258434904778, 2.536974156509522), n_g=399, sigma_y=0.006359225224023999, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.009157284322594557, unit=0.7070131233643788)', 'Generator(mode=real, range=(-0.9767541686859571, 2.709645831314043), n_g=239, sigma_y=0.009538837836035997, unit=0.42596079911787776)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.0164831117806702, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.5843083664168419)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.6427392030585262)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.8466116357781602, 2.9933883642218397), n_g=367, sigma_y=0.006359225224023999, unit=0.5258775297751577)', 'Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.43026343345240176)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.7459688175044032, 3.0540311824955966), n_g=335, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.5843083664168419)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.005087380179219199, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.006359225224023999, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-4.771610004862284, 4.828389995137716), n_g=628, sigma_y=0.033897027219638415, unit=0.650242560232848)', 'Generator(mode=real, range=(-0.8466116357781602, 2.9933883642218397), n_g=367, sigma_y=0.006359225224023999, unit=0.4732897767976419)', 'Generator(mode=real, range=(-1.219570645606776, 2.466829354393224), n_g=239, sigma_y=0.009538837836035997, unit=0.38336471920609)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=239, sigma_y=0.011446605403243196, unit=0.316830346451314)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.007325827458075646, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=335, sigma_y=0.007325827458075646, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=399, sigma_y=0.006104856215063039, unit=0.7070131233643788)']
Gen 36: 20 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(const((x21 * x45((1.0 + 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  -(-163.24416045910954, const((x2((x38 * x91((1.0 / 1.0)))) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(1.0)), sin(x17(cos(x50))))', 'Equation constants: {0: np.float64(-999999.5296443929), 1: np.float64(-0.2539080743099701), 2: np.float64(-4.185982519760077)}\nTree:  (-999999.5296443929 + (sin(-0.2539080743099701))**((x61 / -4.185982519760077)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 10: np.float64(1.0)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(0.3338681438332669) const (1.1108933922237667 * x84)) / x31((1.0 / x27)))))))', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376)}\nTree:  -(-326.7500173403731, const((x2((x66((-1.115757916470376 / x5)) * x0)) / x17(cos(-0.8922118980599971)))), sin(x17((x75)**(x40))))', 'Equation constants: {0: np.float64(-1306.707549179539), 1: np.float64(-1307.2075491795408), 2: np.float64(1.7054755517043807)}\nTree:  (-1306.707549179539 - const((1.7054755517043807 / x37)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(0.3338681438332669), 9: np.float64(0.8669610034707098)}\nTree:  (-0.49999999999837963 + (cos(-3.6232771373581303e-05))**((1.0 / const((const((x3)**(1.0), (0.3338681438332669 * x84), cos(0.8669610034707098)) / x31)))))', 'Equation constants: {0: np.float64(-0.5483661947991182), 1: np.float64(-0.10898343306889736), 2: np.float64(-3.0290098146282474)}\nTree:  (-0.5483661947991182 + (cos(-0.10898343306889736))**((x61 / -3.0290098146282474)))', 'Equation constants: {0: np.float64(-2612.4853772601696), 1: np.float64(-2612.985377260173)}\nTree:  (-2612.4853772601696 - -2612.985377260173)', 'Equation constants: {0: np.float64(-0.42323013403747334), 1: np.float64(-0.3944672145775155), 2: np.float64(-1.1761013265484048), 6: np.float64(1.0003169749492002), 7: np.float64(1.0)}\nTree:  +(-0.42323013403747334, (cos(-0.3944672145775155))**((1.0003169749492002)**(-1.1761013265484048)), (1.0)**(x42))', 'Equation constants: {0: np.float64(-10450.39168236431), 1: np.float64(-10450.891682364323)}\nTree:  (-10450.39168236431 - -10450.891682364323)', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 5: np.float64(1.0)}\nTree:  -(-163.24416045910954, const((x2((x38 * x91)) / -1.527546221146158), (1.254046649674836 - 1.254046649674836), (x67)**(1.0)), sin(x17(cos(x50((x38 * x9))))))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762)}\nTree:  -(-653.5189680101753, -654.0189680101762, cos(x40))', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552)}\nTree:  (const((x71 * x22)) - -653.7783265049552)', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762)}\nTree:  -(-653.5189680101753, -654.0189680101762, sin(x54, (x2)**(x67), cos(x81)), sin(x40))', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 2: np.float64(-1.527546221146158), 3: np.float64(1.254046649674836), 4: np.float64(0.2026258696700648), 5: np.float64(-1.570584159936034), 6: np.float64(0.43759148136028125)}\nTree:  -(const((0.43759148136028125)**(x4)), const((x2((x38 * 0.2026258696700648)) / -1.527546221146158), (const((x95 - x49)) - 1.254046649674836), (x67)**(const((x49 + x62)))), sin(x17(cos(x50))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376)}\nTree:  -(-653.7726600211632, const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-0.8922118980599971)))), sin(x17))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.284255522423166), 3: np.float64(0.5512602348579452)}\nTree:  (-0.500000000000083 + (cos(const(cos(0.5512602348579452))))**((x11)**((-0.284255522423166)**(-0.284255522423166))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0), 9: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / ((const((x3)**(const((x21 - x45((1.0 + 1.0)))))) / x31((1.0 + x13))) const (x32 + x74((x86 - x64)))))))', 'Equation constants: {0: np.float64(-2612.575584490587), 1: np.float64(-2613.0755844905902)}\nTree:  (-2612.575584490587 - -2613.0755844905902)', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552), 2: np.float64(1.7054755517043807), 3: np.float64(0.45180320364038584)}\nTree:  -(-653.2783265049544, const((1.7054755517043807 / x16)), (0.45180320364038584 * x42))', 'Equation constants: {0: np.float64(-653.6797205670331), 1: np.float64(-654.179720567034), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376)}\nTree:  -(-653.6797205670331, const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-0.8922118980599971)))), sin(x17))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762)}\nTree:  -(-653.5189680101753, -654.0189680101762, sin(x54, (x2)**(x67), cos(x81)))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(-1.115757916470376)}\nTree:  -(-653.7726600211632, const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-0.0002899066885709095), 1: np.float64(-1724.691267818626), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376)}\nTree:  (-0.0002899066885709095 * const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-0.8922118980599971)))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.284255522423166)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**((x11)**((-0.284255522423166)**(-0.284255522423166))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 9: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / ((const((x3)**(0.3338681438332669)) / x31((1.0 + x13))) const (x32 + x74((x86 - x64)))))))', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552), 2: np.float64(1.7054755517043807), 3: np.float64(0.45180320364038584), 4: np.float64(-0.27911254225611026)}\nTree:  -(-653.2783265049544, const((1.7054755517043807 / x37((-0.27911254225611026 / x70)))), (0.45180320364038584 * x42))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762)}\nTree:  -(-653.5189680101753, -654.0189680101762, sin(x54, (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-1307.3229023526292), 1: np.float64(-1307.822902352631)}\nTree:  -(-1307.3229023526292, -1307.822902352631, cos(x40))', 'Equation constants: {0: np.float64(-10450.369425538938), 1: np.float64(-10450.869425538953)}\nTree:  (-10450.369425538938 - -10450.869425538953)', 'Equation constants: {0: np.float64(-0.4277401025714011), 1: np.float64(-0.38243152902614536), 2: np.float64(-1.1761013265484048), 6: np.float64(0.9995641086457177)}\nTree:  (-0.4277401025714011 + (cos(-0.38243152902614536))**((0.9995641086457177)**(-1.1761013265484048)))', 'Equation constants: {0: np.float64(-1307.1971520838074), 1: np.float64(-1307.697152083809)}\nTree:  -(-1307.1971520838074, -1307.697152083809, sin(x54, (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736), 2: np.float64(-0.8922118980599971)}\nTree:  -(-326.7500173403731, const((x2 / x17(cos(-0.8922118980599971)))), sin(x17((x75)**(x40))))', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552), 2: np.float64(1.7054755517043807), 3: np.float64(0.45180320364038584)}\nTree:  -(-653.2783265049544, const((1.7054755517043807 / x37)), (0.45180320364038584 * x42))', 'Equation constants: {0: np.float64(-17456.051420279437), 1: np.float64(-34912.09874218592)}\nTree:  (-17456.051420279437 / -34912.09874218592)', 'Equation constants: {0: np.float64(-0.5479861120280777), 1: np.float64(-0.10873053799634805), 2: np.float64(-3.122188503589413)}\nTree:  (-0.5479861120280777 + (cos(-0.10873053799634805))**((x61 / -3.122188503589413)))', 'Equation constants: {0: np.float64(-653.4471848966894), 1: np.float64(-653.94718489669), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376)}\nTree:  (-653.4471848966894 - const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-0.8922118980599971)))))', 'Equation constants: {0: np.float64(-1307.2402675309622), 1: np.float64(-1307.740267530964)}\nTree:  -(-1307.2402675309622, const(cos(x81)), sin(x54, (x2)**(x67), cos(x81)))', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(0.18027115960047002)}\nTree:  (const((x95 * 0.18027115960047002)) - -5225.634550087457)']
MSE: [np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25000000007716844), np.float64(0.7299044114997227), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.770616545429133), np.float64(999999000000.5), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.2500000003054716), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(315454284.41854566), np.float64(0.2500000000006823), np.float64(0.24951854932965795), np.float64(0.25), np.float64(320523690.39419085), np.float64(0.25), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-1.2576398227983587, 3.166040177201641), n_g=239, sigma_y=0.009538837836035997, unit=0.43026343345240176)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.7459688175044032, 3.0540311824955966), n_g=335, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.5843083664168419)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.005087380179219199, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.006359225224023999, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-4.771610004862284, 4.828389995137716), n_g=628, sigma_y=0.033897027219638415, unit=0.650242560232848)', 'Generator(mode=real, range=(-0.8466116357781602, 2.9933883642218397), n_g=367, sigma_y=0.006359225224023999, unit=0.4732897767976419)', 'Generator(mode=real, range=(-1.219570645606776, 2.466829354393224), n_g=239, sigma_y=0.009538837836035997, unit=0.38336471920609)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=239, sigma_y=0.011446605403243196, unit=0.316830346451314)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=303, sigma_y=0.007325827458075646, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.7177433988353141, 3.0822566011646857), n_g=335, sigma_y=0.007325827458075646, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=399, sigma_y=0.006104856215063039, unit=0.7070131233643788)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007325827458075647, unit=0.6427392030585262)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.197743398835314, 3.5622566011646857), n_g=303, sigma_y=0.007325827458075647, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.2377433988353141, 2.6022566011646857), n_g=303, sigma_y=0.007325827458075646, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.8466116357781602, 2.9933883642218397), n_g=367, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-0.8466116357781602, 2.9933883642218397), n_g=367, sigma_y=0.006359225224023999, unit=0.4259607991178777)', 'Generator(mode=real, range=(-1.9594451678304925, 3.570154832169507), n_g=271, sigma_y=0.005860661966460517, unit=0.714154670065029)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=335, sigma_y=0.006104856215063039, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.0164831117806702, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=367, sigma_y=0.0164831117806702, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=335, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.013735926483891835, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.009157284322594557, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.5843083664168419)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.0164831117806702, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.3030258434904778, 2.536974156509522), n_g=399, sigma_y=0.006359225224023999, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)']
Gen 37: 22 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762)}\nTree:  -(-653.5189680101753, -654.0189680101762, sin(x54, (x2)**(x67), cos(x81)))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(-1.115757916470376)}\nTree:  -(-653.7726600211632, const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-0.0002899066885709095), 1: np.float64(-1724.691267818626), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376)}\nTree:  (-0.0002899066885709095 * const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-0.8922118980599971)))))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.284255522423166)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**((x11)**((-0.284255522423166)**(-0.284255522423166))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 9: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / ((const((x3)**(0.3338681438332669)) / x31((1.0 + x13))) const (x32 + x74((x86 - x64)))))))', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552), 2: np.float64(1.7054755517043807), 3: np.float64(0.45180320364038584), 4: np.float64(-0.27911254225611026)}\nTree:  -(-653.2783265049544, const((1.7054755517043807 / x37((-0.27911254225611026 / x70)))), (0.45180320364038584 * x42))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762)}\nTree:  -(-653.5189680101753, -654.0189680101762, sin(x54, (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-1307.3229023526292), 1: np.float64(-1307.822902352631)}\nTree:  -(-1307.3229023526292, -1307.822902352631, cos(x40))', 'Equation constants: {0: np.float64(-10450.369425538938), 1: np.float64(-10450.869425538953)}\nTree:  (-10450.369425538938 - -10450.869425538953)', 'Equation constants: {0: np.float64(-0.4277401025714011), 1: np.float64(-0.38243152902614536), 2: np.float64(-1.1761013265484048), 6: np.float64(0.9995641086457177)}\nTree:  (-0.4277401025714011 + (cos(-0.38243152902614536))**((0.9995641086457177)**(-1.1761013265484048)))', 'Equation constants: {0: np.float64(-1307.1971520838074), 1: np.float64(-1307.697152083809)}\nTree:  -(-1307.1971520838074, -1307.697152083809, sin(x54, (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-326.7500173403731), 1: np.float64(-327.2500173403736), 2: np.float64(-0.8922118980599971)}\nTree:  -(-326.7500173403731, const((x2 / x17(cos(-0.8922118980599971)))), sin(x17((x75)**(x40))))', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552), 2: np.float64(1.7054755517043807), 3: np.float64(0.45180320364038584)}\nTree:  -(-653.2783265049544, const((1.7054755517043807 / x37)), (0.45180320364038584 * x42))', 'Equation constants: {0: np.float64(-17456.051420279437), 1: np.float64(-34912.09874218592)}\nTree:  (-17456.051420279437 / -34912.09874218592)', 'Equation constants: {0: np.float64(-0.5479861120280777), 1: np.float64(-0.10873053799634805), 2: np.float64(-3.122188503589413)}\nTree:  (-0.5479861120280777 + (cos(-0.10873053799634805))**((x61 / -3.122188503589413)))', 'Equation constants: {0: np.float64(-653.4471848966894), 1: np.float64(-653.94718489669), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376)}\nTree:  (-653.4471848966894 - const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-0.8922118980599971)))))', 'Equation constants: {0: np.float64(-1307.2402675309622), 1: np.float64(-1307.740267530964)}\nTree:  -(-1307.2402675309622, const(cos(x81)), sin(x54, (x2)**(x67), cos(x81)))', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(0.18027115960047002)}\nTree:  (const((x95 * 0.18027115960047002)) - -5225.634550087457)', 'Equation constants: {0: np.float64(-0.4257506632292143), 1: np.float64(-0.3862289765539133), 2: np.float64(-1.1761013265484048), 6: np.float64(0.9928825322573157), 7: np.float64(1.0)}\nTree:  (-0.4257506632292143 + (cos(-0.3862289765539133))**(pow(0.9928825322573157, -1.1761013265484048, (1.0 * x43))))', 'Equation constants: {0: np.float64(-1307.3229023526292), 1: np.float64(-1307.822902352631)}\nTree:  (-1307.3229023526292 - -1307.822902352631)', 'Equation constants: {0: np.float64(-10450.39168236431), 1: np.float64(-10450.891682364323)}\nTree:  (-10450.39168236431 - -10450.891682364323)', 'Equation constants: {0: np.float64(0.15597806171024323), 1: np.float64(7559.014328463149), 2: np.float64(-995785.4941658069)}\nTree:  (0.15597806171024323 + (sin(7559.014328463149) - (x61 / -995785.4941658069)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(1.0), 9: np.float64(1.0)}\nTree:  (-0.49999999999837963 + (cos(-3.6232771373581303e-05))**((1.0 / const((const((x3)**(1.0), (1.0 * x84), cos(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(0.18027115960047002), 3: np.float64(-0.35145860125814465)}\nTree:  (const((x95 * 0.18027115960047002)) - const(sin(-0.35145860125814465)))', 'Equation constants: {0: np.float64(-2612.575584490587), 1: np.float64(-2613.0755844905902)}\nTree:  (-2612.575584490587 - -2613.0755844905902)', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.951973586078645), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(const((x21 * x45((1.0 + 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0), 9: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(const((x21 - x45((1.0 + 1.0)))))) / x31((1.0 + x13)))))))', 'Equation constants: {0: np.float64(-653.6797205670331), 1: np.float64(-654.179720567034), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376)}\nTree:  -(-653.6797205670331, const((x2((x66((-1.115757916470376 / x34)) * x0)) / x17(cos(-0.8922118980599971)))), sin(x17))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.24244257540725947), 6: np.float64(0.8669610034707098), 9: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / ((const((x3)**(0.24244257540725947)) / x31((1.0 + x13))) const (x32 + x74((x86 - x64)))))))', 'Equation constants: {0: np.float64(-1307.1971520838074), 1: np.float64(-1307.697152083809)}\nTree:  -(-1307.1971520838074, -1307.697152083809, (x54 sin cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078)}\nTree:  -(-653.7726600211632, const((x2((x66((x47 / x80)) * x0)) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-0.00028999545282661743), 1: np.float64(-1724.1649593553357), 2: np.float64(-0.7364257147562139), 3: np.float64(-1.115757916470376)}\nTree:  (-0.00028999545282661743 * const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-0.7364257147562139)))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 10: np.float64(1.0)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(0.3338681438332669) const (1.1108933922237667 * x84)) / x31((1.0 / x27)))))))', 'Equation constants: {0: np.float64(-5225.497335253685), 1: np.float64(-5225.997335253692)}\nTree:  (-5225.497335253685 - -5225.997335253692)', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 3: np.float64(1.0), 5: np.float64(1.0)}\nTree:  -(-163.24416045910954, ((1.0 - 1.0) const (x67)**(1.0)), sin(x17(cos(x50))))', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552), 2: np.float64(1.7054755517043807), 3: np.float64(0.45180320364038584)}\nTree:  -(-653.2783265049544, const((const((x23)**(x84)) / x37)), (0.45180320364038584 * x42))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 9: np.float64(1.0), 10: np.float64(1.0)}\nTree:  (const(sin(const((1.0 - 1.0)))) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / ((const((x3)**(0.3338681438332669)) / x31((1.0 + x13))) const (x32 + x74((x86 - x64)))))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(-1.115757916470376)}\nTree:  -(-653.7726600211632, const((x2((x66((-1.115757916470376 / x99)) * x0)) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762)}\nTree:  -(-653.5189680101753, -654.0189680101762, cos(x40), sin(x10))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0), 9: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / ((const((x3)**(const((x97 - x45((1.0 + 1.0)))))) / x31((1.0 + x13))) const (x32 + x74((x86 - x64)))))))']
MSE: [np.float64(0.25000000000170336), np.float64(0.25), np.float64(0.25), np.float64(0.24970726808196478), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.7368613586869623), np.float64(0.46254590267709217), np.float64(0.25), np.float64(0.4526195362625563), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000000009), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-0.8466116357781602, 2.9933883642218397), n_g=367, sigma_y=0.006359225224023999, unit=0.4259607991178777)', 'Generator(mode=real, range=(-1.9594451678304925, 3.570154832169507), n_g=271, sigma_y=0.005860661966460517, unit=0.714154670065029)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=335, sigma_y=0.006104856215063039, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.0164831117806702, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=367, sigma_y=0.0164831117806702, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=335, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.013735926483891835, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.009157284322594557, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.5843083664168419)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.0164831117806702, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.3030258434904778, 2.536974156509522), n_g=399, sigma_y=0.006359225224023999, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.8554858792708985)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=335, sigma_y=0.006104856215063039, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=335, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5843083664168419)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=271, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=335, sigma_y=0.004883884972050431, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.7459688175044032, 3.0540311824955966), n_g=335, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.8466116357781602, 2.9933883642218397), n_g=367, sigma_y=0.009157284322594557, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.007325827458075647, unit=0.6427392030585262)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=335, sigma_y=0.004883884972050431, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.007325827458075647, unit=0.6427392030585262)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.0062104733639252, 2.8337895266360746), n_g=367, sigma_y=0.0164831117806702, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.009157284322594557, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.007325827458075647, unit=0.6427392030585262)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.0164831117806702, unit=0.4302634334524017)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.006104856215063039, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=239, sigma_y=0.013735926483891835, unit=0.316830346451314)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=399, sigma_y=0.006104856215063039, unit=0.7070131233643788)']
Gen 38: 23 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(0.18027115960047002), 3: np.float64(-0.35145860125814465)}\nTree:  (const((x95 * 0.18027115960047002)) - const(sin(-0.35145860125814465)))', 'Equation constants: {0: np.float64(-2612.575584490587), 1: np.float64(-2613.0755844905902)}\nTree:  (-2612.575584490587 - -2613.0755844905902)', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.951973586078645), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(const((x21 * x45((1.0 + 1.0)))))) / x31)))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0), 9: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(const((x21 - x45((1.0 + 1.0)))))) / x31((1.0 + x13)))))))', 'Equation constants: {0: np.float64(-653.6797205670331), 1: np.float64(-654.179720567034), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376)}\nTree:  -(-653.6797205670331, const((x2((x66((-1.115757916470376 / x34)) * x0)) / x17(cos(-0.8922118980599971)))), sin(x17))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.24244257540725947), 6: np.float64(0.8669610034707098), 9: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / ((const((x3)**(0.24244257540725947)) / x31((1.0 + x13))) const (x32 + x74((x86 - x64)))))))', 'Equation constants: {0: np.float64(-1307.1971520838074), 1: np.float64(-1307.697152083809)}\nTree:  -(-1307.1971520838074, -1307.697152083809, (x54 sin cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078)}\nTree:  -(-653.7726600211632, const((x2((x66((x47 / x80)) * x0)) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-0.00028999545282661743), 1: np.float64(-1724.1649593553357), 2: np.float64(-0.7364257147562139), 3: np.float64(-1.115757916470376)}\nTree:  (-0.00028999545282661743 * const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-0.7364257147562139)))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 10: np.float64(1.0)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(0.3338681438332669) const (1.1108933922237667 * x84)) / x31((1.0 / x27)))))))', 'Equation constants: {0: np.float64(-5225.497335253685), 1: np.float64(-5225.997335253692)}\nTree:  (-5225.497335253685 - -5225.997335253692)', 'Equation constants: {0: np.float64(-163.24416045910954), 1: np.float64(-163.74416045910976), 3: np.float64(1.0), 5: np.float64(1.0)}\nTree:  -(-163.24416045910954, ((1.0 - 1.0) const (x67)**(1.0)), sin(x17(cos(x50))))', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552), 2: np.float64(1.7054755517043807), 3: np.float64(0.45180320364038584)}\nTree:  -(-653.2783265049544, const((const((x23)**(x84)) / x37)), (0.45180320364038584 * x42))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 9: np.float64(1.0), 10: np.float64(1.0)}\nTree:  (const(sin(const((1.0 - 1.0)))) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / ((const((x3)**(0.3338681438332669)) / x31((1.0 + x13))) const (x32 + x74((x86 - x64)))))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(-1.115757916470376)}\nTree:  -(-653.7726600211632, const((x2((x66((-1.115757916470376 / x99)) * x0)) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762)}\nTree:  -(-653.5189680101753, -654.0189680101762, cos(x40), sin(x10))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 8: np.float64(1.0), 9: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / ((const((x3)**(const((x97 - x45((1.0 + 1.0)))))) / x31((1.0 + x13))) const (x32 + x74((x86 - x64)))))))', 'Equation constants: {1: np.float64(0.4923117328155139), 2: np.float64(1308.0507716452992), 3: np.float64(-9.458359986702723e-07)}\nTree:  (const((const((x23)**(x84)) / x37)) - (-9.458359986702723e-07 * x42))', 'Equation constants: {0: np.float64(-1307.309921921283), 1: np.float64(-1307.8099219212845)}\nTree:  -(-1307.309921921283, -1307.8099219212845, sin(x54, (x2)**(x67), cos(x81)))', 'Equation constants: {0: np.float64(-2614.6945930897227), 1: np.float64(-2615.1945930897264)}\nTree:  -(-2614.6945930897227, -2615.1945930897264, sin(x54, (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.284255522423166)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**((x11)**((-0.284255522423166)**(-0.284255522423166))))', 'Equation constants: {0: np.float64(-653.4471848966894), 1: np.float64(-653.94718489669), 2: np.float64(-1.0934763039303135), 3: np.float64(-1.115757916470376)}\nTree:  (-653.4471848966894 - const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-1.0934763039303135)))))', 'Equation constants: {0: np.float64(-1307.2402675309622), 1: np.float64(-1307.740267530964), 2: np.float64(-0.031290200392031675)}\nTree:  -(-1307.2402675309622, const(cos(x81)), sin(x54, (x2)**(x67), cos(x81)), (-0.031290200392031675 - -0.031290200392031675))', 'Equation constants: {0: np.float64(-1307.2402675309622), 1: np.float64(-1307.740267530964)}\nTree:  -(-1307.2402675309622, const(cos(x81)), sin(x54, (x2)**(x67), cos(x81)))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078)}\nTree:  -(-653.7726600211632, const((x2((x66((x47 / x80)) * x0)) / x17(cos(-0.8567654379486078)))), sin(x22))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078)}\nTree:  -(-653.7726600211632, const((x2((x66((x95 / x80)) * x0)) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(1.0), 9: np.float64(1.0)}\nTree:  (-0.49999999999837963 + (cos(-3.6232771373581303e-05))**((1.0 / const((const((x3)**(1.0), (1.0 * x84), cos(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-169.54879450123906), 1: np.float64(-339.0985145065244)}\nTree:  /(-169.54879450123906, -339.0985145065244, sin(x54, (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(0.18027115960047002)}\nTree:  (const((x95 * 0.18027115960047002)) - -5225.634550087457)', 'Equation constants: {0: np.float64(-0.500000005406942), 1: np.float64(1.585291557688684e-05), 2: np.float64(-0.284255522423166)}\nTree:  (-0.500000005406942 + (cos(1.585291557688684e-05))**((x11)**((-0.284255522423166)**(-0.284255522423166))))', 'Equation constants: {0: np.float64(-0.5479870635729579), 1: np.float64(-0.10873126306729002), 2: np.float64(-3.1220113449173197)}\nTree:  (-0.5479870635729579 + (cos(-0.10873126306729002))**((x61 / -3.1220113449173197)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 10: np.float64(1.0), 11: np.float64(1.0)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const(((pow(x3, 0.3338681438332669, sin(1.0)) const (1.1108933922237667 * x84)) / x31((1.0 / x27)))))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 9: np.float64(1.0), 10: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / ((const((x3)**(0.3338681438332669)) / ((1.0 + x13) x31 (1.0 / 1.0))) const (x32 + x74((x86 - x64)))))))', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(0.18027115960047002)}\nTree:  (const((x83 * 0.18027115960047002)) - -5225.634550087457)', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.5898637271579852)}\nTree:  -(-653.5189680101753, -654.0189680101762, sin(x54, (x2)**(x67), (x81 cos (-1.5898637271579852 + x59))), cos(x40))', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(0.18027115960047002)}\nTree:  (const((x95 * 0.18027115960047002)) - const(sin(x96)))', 'Equation constants: {0: np.float64(-0.00028988928568820843), 1: np.float64(-1724.7964061606153), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376), 4: np.float64(-0.4972014658867021)}\nTree:  (-0.00028988928568820843 * const(/(x2((x66((-1.115757916470376 / x80)) * x0)), x17(cos(-0.8922118980599971)), (-0.4972014658867021 * -0.4972014658867021))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(-1.115757916470376), 4: np.float64(1.2749710659417879)}\nTree:  -(-653.7726600211632, const((x2((x66((-1.115757916470376 / x80)) * x0((x62 * 1.2749710659417879)))) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078)}\nTree:  -(-653.7726600211632, const((x2((x66((x72 / x80)) * x0)) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552), 2: np.float64(1.7760640531405718), 3: np.float64(0.45180320364038584)}\nTree:  -(-653.2783265049544, const((1.7760640531405718 / x37)), (0.45180320364038584 * x42))']
MSE: [np.float64(0.24971437214529366), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.4626374577459021), np.float64(0.25000000001688916), np.float64(0.25), np.float64(119636725317.88), np.float64(0.2500000000394829), np.float64(0.24951820714540818), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000000094), np.float64(0.25), np.float64(0.25), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.007325827458075647, unit=0.6427392030585262)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=335, sigma_y=0.004883884972050431, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.007325827458075647, unit=0.6427392030585262)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.0062104733639252, 2.8337895266360746), n_g=367, sigma_y=0.0164831117806702, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.009157284322594557, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=303, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.007325827458075647, unit=0.6427392030585262)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.0164831117806702, unit=0.4302634334524017)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.006104856215063039, unit=0.4780704816137797)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=239, sigma_y=0.013735926483891835, unit=0.316830346451314)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=399, sigma_y=0.006104856215063039, unit=0.7070131233643788)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=335, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=367, sigma_y=0.013735926483891835, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007325827458075647, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.6814558866575093, 2.1585441133424905), n_g=399, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-0.8889998227983588, 2.797400177201641), n_g=271, sigma_y=0.013735926483891835, unit=0.316830346451314)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.007325827458075647, unit=0.6427392030585262)', 'Generator(mode=real, range=(-2.0432929615583197, 2.75670703844168), n_g=335, sigma_y=0.004883884972050431, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.007325827458075647, unit=0.5784652827526736)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=335, sigma_y=0.004883884972050431, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=335, sigma_y=0.006104856215063039, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.9594451678304925, 3.570154832169507), n_g=271, sigma_y=0.005860661966460517, unit=0.7855701370715319)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5258775297751578)', 'Generator(mode=real, range=(-1.0062104733639252, 2.8337895266360746), n_g=367, sigma_y=0.0164831117806702, unit=0.4302634334524017)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.0164831117806702, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=335, sigma_y=0.003907107977640345, unit=0.4780704816137797)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=335, sigma_y=0.009157284322594557, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=399, sigma_y=0.006104856215063039, unit=0.7070131233643788)', 'Generator(mode=real, range=(-1.2306116357781602, 3.3773883642218396), n_g=367, sigma_y=0.009157284322594557, unit=0.5258775297751577)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=335, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.01318648942453616, unit=0.4302634334524017)']
Gen 39: 25 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078)}\nTree:  -(-653.7726600211632, const((x2((x66((x95 / x80)) * x0)) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(1.0), 9: np.float64(1.0)}\nTree:  (-0.49999999999837963 + (cos(-3.6232771373581303e-05))**((1.0 / const((const((x3)**(1.0), (1.0 * x84), cos(1.0)) / x31)))))', 'Equation constants: {0: np.float64(-169.54879450123906), 1: np.float64(-339.0985145065244)}\nTree:  /(-169.54879450123906, -339.0985145065244, sin(x54, (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(0.18027115960047002)}\nTree:  (const((x95 * 0.18027115960047002)) - -5225.634550087457)', 'Equation constants: {0: np.float64(-0.500000005406942), 1: np.float64(1.585291557688684e-05), 2: np.float64(-0.284255522423166)}\nTree:  (-0.500000005406942 + (cos(1.585291557688684e-05))**((x11)**((-0.284255522423166)**(-0.284255522423166))))', 'Equation constants: {0: np.float64(-0.5479870635729579), 1: np.float64(-0.10873126306729002), 2: np.float64(-3.1220113449173197)}\nTree:  (-0.5479870635729579 + (cos(-0.10873126306729002))**((x61 / -3.1220113449173197)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 7: np.float64(1.1108933922237667), 10: np.float64(1.0), 11: np.float64(1.0)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const(((pow(x3, 0.3338681438332669, sin(1.0)) const (1.1108933922237667 * x84)) / x31((1.0 / x27)))))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.3338681438332669), 6: np.float64(0.8669610034707098), 9: np.float64(1.0), 10: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / ((const((x3)**(0.3338681438332669)) / ((1.0 + x13) x31 (1.0 / 1.0))) const (x32 + x74((x86 - x64)))))))', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(0.18027115960047002)}\nTree:  (const((x83 * 0.18027115960047002)) - -5225.634550087457)', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.5898637271579852)}\nTree:  -(-653.5189680101753, -654.0189680101762, sin(x54, (x2)**(x67), (x81 cos (-1.5898637271579852 + x59))), cos(x40))', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(0.18027115960047002)}\nTree:  (const((x95 * 0.18027115960047002)) - const(sin(x96)))', 'Equation constants: {0: np.float64(-0.00028988928568820843), 1: np.float64(-1724.7964061606153), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376), 4: np.float64(-0.4972014658867021)}\nTree:  (-0.00028988928568820843 * const(/(x2((x66((-1.115757916470376 / x80)) * x0)), x17(cos(-0.8922118980599971)), (-0.4972014658867021 * -0.4972014658867021))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(-1.115757916470376), 4: np.float64(1.2749710659417879)}\nTree:  -(-653.7726600211632, const((x2((x66((-1.115757916470376 / x80)) * x0((x62 * 1.2749710659417879)))) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078)}\nTree:  -(-653.7726600211632, const((x2((x66((x72 / x80)) * x0)) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552), 2: np.float64(1.7760640531405718), 3: np.float64(0.45180320364038584)}\nTree:  -(-653.2783265049544, const((1.7760640531405718 / x37)), (0.45180320364038584 * x42))', 'Equation constants: {0: np.float64(-1307.1971520838074), 1: np.float64(-1307.697152083809), 2: np.float64(0.5373172088672371)}\nTree:  -(-1307.1971520838074, -1307.697152083809, (x54 sin (x81 cos sin(0.5373172088672371))), cos(x40))', 'Equation constants: {0: np.float64(-286.11421381915034), 1: np.float64(-572.2284316821411)}\nTree:  /(-286.11421381915034, -572.2284316821411, (x54 sin (x2)**(x67)), cos(x40))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.5898637271579852), 3: np.float64(-1.5830548273306153)}\nTree:  -(-653.5189680101753, -654.0189680101762, sin(x54, (x2)**(x67), cos(x81, (-1.5898637271579852 + x59), (x62 / -1.5830548273306153))), cos(x40))', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(0.18027115960047002)}\nTree:  (const((x95((x91)**(x74)) * 0.18027115960047002)) - -5225.634550087457)', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(-1.115757916470376), 4: np.float64(1.2749710659417879)}\nTree:  -(-653.7726600211632, const((x2((x66((-1.115757916470376 / x80)) * x0((x62 * 1.2749710659417879)))) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-0.00028999545282661743), 1: np.float64(-1724.1649593553357), 2: np.float64(-0.7364257147562139), 3: np.float64(-1.115757916470376)}\nTree:  (-0.00028999545282661743 * const((x2((x66((-1.115757916470376 + x80)) * x0)) / x17(cos(-0.7364257147562139)))))', 'Equation constants: {0: np.float64(-0.5479871044733342), 1: np.float64(-0.10873128880512502), 2: np.float64(-3.1220007079800953)}\nTree:  (-0.5479871044733342 + (cos(-0.10873128880512502))**((x61 / -3.1220007079800953)))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078)}\nTree:  -(-653.7726600211632, const((x2((x66((x47((x25 / x61)) / x80)) * x0)) / x17(cos(-0.8567654379486078)))), sin(x22))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(0.8669610034707098)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-3.6232771373581303e-05))**((1.0 / const((const((1.0 * x84)) / x31((0.8669610034707098 / x27)))))))', 'Equation constants: {0: np.float64(-2614.90764390447), 1: np.float64(-2615.4076439044734)}\nTree:  -(-2614.90764390447, -2615.4076439044734, sin(x54, (x2)**(x67), cos(x81)))', 'Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.284255522423166), 3: np.float64(1.1114153680858538)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**((x11)**(pow(-0.284255522423166, -0.284255522423166, (x17 - 1.1114153680858538)))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4941791344067723)}\nTree:  -(-653.7726600211632, const((x2((x66(/(x47, x80, (x77 + 1.4941791344067723))) * x0)) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-326.7975909818624), 1: np.float64(-327.29759098186287), 3: np.float64(1.0), 5: np.float64(1.0)}\nTree:  -(-326.7975909818624, ((1.0 - 1.0) const (x67)**(1.0)), sin(x17(cos(x50))))', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552), 2: np.float64(1.7054755517043807), 3: np.float64(0.45180320364038584)}\nTree:  -(-653.2783265049544, const((const((x23 - x84)) / x37)), (0.45180320364038584 * x42))', 'Equation constants: {0: np.float64(-1307.6856465310393), 1: np.float64(-1308.1856465310407), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376)}\nTree:  -(-1307.6856465310393, const((x2((x66((-1.115757916470376 / x34)) * x0)) / x17(cos(-0.8922118980599971)))), sin(x17))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin(x54, (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(-1.115757916470376)}\nTree:  -(-653.7726600211632, const((x2((x66((-1.115757916470376 / x99)) * x0)) / x17(cos(-0.8567654379486078)))), sin(x76))', 'Equation constants: {0: np.float64(-653.4471848966894), 1: np.float64(-653.94718489669)}\nTree:  (-653.4471848966894 - -653.94718489669)', 'Equation constants: {0: np.float64(-0.5000000086744636), 1: np.float64(-9.774767625801389e-06), 2: np.float64(-0.284255522423166)}\nTree:  (-0.5000000086744636 + (cos(-9.774767625801389e-06))**((x11)**((-0.284255522423166)**(-0.284255522423166))))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762)}\nTree:  -(-653.5189680101753, -654.0189680101762, sin(x40), sin(x10))', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(0.18027115960047002), 3: np.float64(-0.08867826403323775)}\nTree:  (const((x95 * 0.18027115960047002)) - const((x96 sin (-0.08867826403323775 * x5))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.24244257540725947), 6: np.float64(0.8669610034707098), 9: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(0.24244257540725947)) / x31((1.0 + x13)))))))', 'Equation constants: {0: np.float64(-0.5479871044733342), 1: np.float64(-0.10873128880512502), 2: np.float64(-3.1220007079800953)}\nTree:  (-0.5479871044733342 + (cos(-0.10873128880512502))**((x61 / -3.1220007079800953)))', 'Equation constants: {0: np.float64(-286.11421381915034), 1: np.float64(-572.2284316821411)}\nTree:  /(-286.11421381915034, -572.2284316821411, sin(x54, (x2)**(x67), cos(x41)), cos(x40))', 'Equation constants: {0: np.float64(-1307.2402675309622), 1: np.float64(-1307.740267530964), 2: np.float64(0.4499223413931812)}\nTree:  -(-1307.2402675309622, const(cos(x81(cos(0.4499223413931812)))), sin(x54, (x2)**(x67), cos(x81)))']
MSE: [np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.24951820705737765), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25000000001015205), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.24951820705737765), np.float64(0.25), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-2.0432929615583197, 2.75670703844168), n_g=335, sigma_y=0.004883884972050431, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.007325827458075647, unit=0.5784652827526736)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=335, sigma_y=0.004883884972050431, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=335, sigma_y=0.006104856215063039, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.9594451678304925, 3.570154832169507), n_g=271, sigma_y=0.005860661966460517, unit=0.7855701370715319)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5258775297751578)', 'Generator(mode=real, range=(-1.0062104733639252, 2.8337895266360746), n_g=367, sigma_y=0.0164831117806702, unit=0.4302634334524017)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.0164831117806702, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=335, sigma_y=0.003907107977640345, unit=0.4780704816137797)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=335, sigma_y=0.009157284322594557, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=399, sigma_y=0.006104856215063039, unit=0.7070131233643788)', 'Generator(mode=real, range=(-1.2306116357781602, 3.3773883642218396), n_g=367, sigma_y=0.009157284322594557, unit=0.5258775297751577)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=335, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.01318648942453616, unit=0.4302634334524017)', 'Generator(mode=real, range=(-1.9594451678304925, 3.570154832169507), n_g=271, sigma_y=0.004688529573168414, unit=0.7855701370715319)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=335, sigma_y=0.010988741187113469, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.2306116357781602, 3.3773883642218396), n_g=367, sigma_y=0.007325827458075646, unit=0.5258775297751577)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.01318648942453616, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.0432929615583197, 2.75670703844168), n_g=335, sigma_y=0.004883884972050431, unit=0.4302634334524017)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.004883884972050431, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.2306116357781602, 3.3773883642218396), n_g=367, sigma_y=0.009157284322594557, unit=0.5784652827526735)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.007325827458075646, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.9207283297559066, 3.6088716702440933), n_g=335, sigma_y=0.007325827458075647, unit=0.5784652827526736)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.009157284322594557, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.0062104733639252, 2.8337895266360746), n_g=335, sigma_y=0.0164831117806702, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=335, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.006104856215063039, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.3635598227983587, 4.271960177201641), n_g=335, sigma_y=0.009157284322594557, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007325827458075647, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.004883884972050431, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=399, sigma_y=0.01318648942453616, unit=0.4302634334524017)']
Gen 40: 25 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.500000000000083), 1: np.float64(1.4416922241262404e-08), 2: np.float64(-0.284255522423166), 3: np.float64(1.1114153680858538)}\nTree:  (-0.500000000000083 + (cos(1.4416922241262404e-08))**((x11)**(pow(-0.284255522423166, -0.284255522423166, (x17 - 1.1114153680858538)))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4941791344067723)}\nTree:  -(-653.7726600211632, const((x2((x66(/(x47, x80, (x77 + 1.4941791344067723))) * x0)) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-326.7975909818624), 1: np.float64(-327.29759098186287), 3: np.float64(1.0), 5: np.float64(1.0)}\nTree:  -(-326.7975909818624, ((1.0 - 1.0) const (x67)**(1.0)), sin(x17(cos(x50))))', 'Equation constants: {0: np.float64(-653.2783265049544), 1: np.float64(-653.7783265049552), 2: np.float64(1.7054755517043807), 3: np.float64(0.45180320364038584)}\nTree:  -(-653.2783265049544, const((const((x23 - x84)) / x37)), (0.45180320364038584 * x42))', 'Equation constants: {0: np.float64(-1307.6856465310393), 1: np.float64(-1308.1856465310407), 2: np.float64(-0.8922118980599971), 3: np.float64(-1.115757916470376)}\nTree:  -(-1307.6856465310393, const((x2((x66((-1.115757916470376 / x34)) * x0)) / x17(cos(-0.8922118980599971)))), sin(x17))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin(x54, (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(-1.115757916470376)}\nTree:  -(-653.7726600211632, const((x2((x66((-1.115757916470376 / x99)) * x0)) / x17(cos(-0.8567654379486078)))), sin(x76))', 'Equation constants: {0: np.float64(-653.4471848966894), 1: np.float64(-653.94718489669)}\nTree:  (-653.4471848966894 - -653.94718489669)', 'Equation constants: {0: np.float64(-0.5000000086744636), 1: np.float64(-9.774767625801389e-06), 2: np.float64(-0.284255522423166)}\nTree:  (-0.5000000086744636 + (cos(-9.774767625801389e-06))**((x11)**((-0.284255522423166)**(-0.284255522423166))))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762)}\nTree:  -(-653.5189680101753, -654.0189680101762, sin(x40), sin(x10))', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(0.18027115960047002), 3: np.float64(-0.08867826403323775)}\nTree:  (const((x95 * 0.18027115960047002)) - const((x96 sin (-0.08867826403323775 * x5))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.24244257540725947), 6: np.float64(0.8669610034707098), 9: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(0.24244257540725947)) / x31((1.0 + x13)))))))', 'Equation constants: {0: np.float64(-0.5479871044733342), 1: np.float64(-0.10873128880512502), 2: np.float64(-3.1220007079800953)}\nTree:  (-0.5479871044733342 + (cos(-0.10873128880512502))**((x61 / -3.1220007079800953)))', 'Equation constants: {0: np.float64(-286.11421381915034), 1: np.float64(-572.2284316821411)}\nTree:  /(-286.11421381915034, -572.2284316821411, sin(x54, (x2)**(x67), cos(x41)), cos(x40))', 'Equation constants: {0: np.float64(-1307.2402675309622), 1: np.float64(-1307.740267530964), 2: np.float64(0.4499223413931812)}\nTree:  -(-1307.2402675309622, const(cos(x81(cos(0.4499223413931812)))), sin(x54, (x2)**(x67), cos(x81)))', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457)}\nTree:  (-5225.13455008745 - -5225.634550087457)', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(1.0), 9: np.float64(1.0), 10: np.float64(1.0)}\nTree:  (-0.49999999999837963 + (cos(-3.6232771373581303e-05))**((1.0 / const((const((x3)**(1.0), (1.0 * x84), cos(1.0)) / x31((1.0 / 1.0)))))))', 'Equation constants: {0: np.float64(-0.5000000026373702), 1: np.float64(-2.8859408928774444e-05), 2: np.float64(-0.284255522423166)}\nTree:  (-0.5000000026373702 + (cos(-2.8859408928774444e-05))**((x11)**((-0.284255522423166)**(-0.284255522423166))))', 'Equation constants: {0: np.float64(-1307.8606638444548), 1: np.float64(-1308.3606638444564), 2: np.float64(-0.8567654379486078)}\nTree:  -(-1307.8606638444548, const((x2((x66((x95 / x80)) * x0)) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078)}\nTree:  -(-653.7726600211632, const((x2 / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-10450.587165541994), 1: np.float64(-10451.087165542005), 2: np.float64(0.18027115960047002)}\nTree:  (const((x95 * 0.18027115960047002)) - -10451.087165542005)', 'Equation constants: {0: np.float64(-1307.6856465310393), 1: np.float64(-1308.1856465310407), 2: np.float64(-0.8922118980599971)}\nTree:  -(-1307.6856465310393, const((x2((x66((x4 / x34)) * x0)) / x17(cos(-0.8922118980599971)))), sin(x17))', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457)}\nTree:  (const((x83 * x35)) - -5225.634550087457)', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164)}\nTree:  -(-653.7726600211632, const((x2((x66((x47((x25 / x61)) / x80)) * x0)) / x17(cos(x76)))), sin(x22))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376), 4: np.float64(-0.4972014658867021)}\nTree:  (-0.00028989371012806307 * const(/(x2((x66((-1.115757916470376 / x80)) * x0)), x17(cos(-0.8773904480159094)), (-0.4972014658867021 * -0.4972014658867021))))', 'Equation constants: {0: np.float64(-268.24272043387305), 1: np.float64(-536.481422404589)}\nTree:  /(-268.24272043387305, -536.481422404589, (x54 sin (x2)**(x67)), cos(x40))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(1.0), 11: np.float64(1.0)}\nTree:  ((sin(-0.2435195169519689) const (x14)**(1.0)) + (cos(-3.6232771373581303e-05))**((1.0 / const((const((1.0 * x84)) / x31((1.0 / x27)))))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(-1.115757916470376), 4: np.float64(1.2749710659417879)}\nTree:  -(const(cos(x81)), const((x2((x66((-1.115757916470376 / x80)) * x0((x62 * 1.2749710659417879)))) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-653.4471848966894), 1: np.float64(-653.94718489669)}\nTree:  (-653.4471848966894 - const(cos(x22)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.24244257540725947), 6: np.float64(0.8669610034707098), 9: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(0.24244257540725947) const cos(x29)) / x31((1.0 + x13)))))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4941791344067723), 4: np.float64(-1.213853913250699)}\nTree:  -(-653.7726600211632, const((x2((x66(/(x47, x80, (x77 + 1.4941791344067723))) * x0)) / x17(cos(-0.8567654379486078)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-0.48550491330208734), 1: np.float64(0.10363776777673574), 2: np.float64(-0.1360276561866951), 3: np.float64(1.1114153680858538)}\nTree:  (-0.48550491330208734 + (cos(0.10363776777673574))**((x11)**((-0.1360276561866951)**((x17 - 1.1114153680858538)))))', 'Equation constants: {0: np.float64(-2614.90764390447), 1: np.float64(-2615.4076439044734)}\nTree:  -(-2614.90764390447, -2615.4076439044734, (x54 sin cos(x81)))', 'Equation constants: {0: np.float64(-0.00028999545282661743), 1: np.float64(-1724.1649593553357), 2: np.float64(-0.7364257147562139)}\nTree:  (-0.00028999545282661743 * const((x2((x66 * x0)) / x17(cos(-0.7364257147562139)))))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin(x54(cos(x50)), (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(-1.115757916470376), 4: np.float64(1.2749710659417879)}\nTree:  -(-653.7726600211632, const((x2((x66((-1.115757916470376 / x80(sin(x59)))) * x0((x62 * 1.2749710659417879)))) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164)}\nTree:  -(-653.7726600211632, const((x2((x66((x95 / x80)) * x0)) / x17(cos(x62)))), sin(x17))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(1.0), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-3.6232771373581303e-05))**((1.0 / const((const((1.0 * x84)) / x31((1.0 / x27)))))))', 'Equation constants: {0: np.float64(-1306.9084225196957), 1: np.float64(-1307.4084225196975), 2: np.float64(1.7054755517043807), 3: np.float64(0.45180320364038584)}\nTree:  -(-1306.9084225196957, const((const((x23 - x84)) / x37)), (0.45180320364038584 * x42))', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(0.18027115960047002), 3: np.float64(-0.08867826403323775)}\nTree:  (const((x8 * 0.18027115960047002)) - const((x96 sin (-0.08867826403323775 * x5))))']
MSE: [np.float64(0.25), np.float64(0.25), np.float64(0.25000000002874145), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25000000012600077), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.24965713391092154), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.007325827458075646, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.9207283297559066, 3.6088716702440933), n_g=335, sigma_y=0.007325827458075647, unit=0.5784652827526736)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.009157284322594557, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.0062104733639252, 2.8337895266360746), n_g=335, sigma_y=0.0164831117806702, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=335, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.006104856215063039, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.3635598227983587, 4.271960177201641), n_g=335, sigma_y=0.009157284322594557, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007325827458075647, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.004883884972050431, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=399, sigma_y=0.01318648942453616, unit=0.4302634334524017)', 'Generator(mode=real, range=(-0.7698116357781603, 2.9165883642218398), n_g=367, sigma_y=0.009157284322594557, unit=0.5784652827526735)', 'Generator(mode=real, range=(-1.2306116357781602, 3.3773883642218396), n_g=399, sigma_y=0.009157284322594557, unit=0.5784652827526735)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.007631070268828798, unit=0.4302634334524017)', 'Generator(mode=real, range=(-2.2917335650045842, 3.237866434995416), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.004883884972050431, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5258775297751578)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.009157284322594557, unit=0.4780704816137797)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=367, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.7427946593550057, 3.892725340644994), n_g=335, sigma_y=0.009157284322594557, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.2306116357781602, 3.3773883642218396), n_g=367, sigma_y=0.009157284322594557, unit=0.5784652827526735)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=399, sigma_y=0.01318648942453616, unit=0.4302634334524017)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.01318648942453616, unit=0.4302634334524017)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.01977973413680424, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.5632929615583198, 2.27670703844168), n_g=335, sigma_y=0.004883884972050431, unit=0.4302634334524017)', 'Generator(mode=real, range=(-2.6414558866575093, 3.1185441133424905), n_g=367, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007325827458075647, unit=0.5784652827526736)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=335, sigma_y=0.007631070268828798, unit=0.5784652827526735)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=303, sigma_y=0.007325827458075647, unit=0.5784652827526736)', 'Generator(mode=real, range=(-1.257639822798359, 3.1660401772016407), n_g=335, sigma_y=0.007325827458075647, unit=0.5784652827526736)', 'Generator(mode=real, range=(-2.0236520116220906, 4.888347988377909), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=367, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5258775297751578)']
Gen 41: 23 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164)}\nTree:  -(-653.7726600211632, const((x2((x66((x47((x25 / x61)) / x80)) * x0)) / x17(cos(x76)))), sin(x22))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376), 4: np.float64(-0.4972014658867021)}\nTree:  (-0.00028989371012806307 * const(/(x2((x66((-1.115757916470376 / x80)) * x0)), x17(cos(-0.8773904480159094)), (-0.4972014658867021 * -0.4972014658867021))))', 'Equation constants: {0: np.float64(-268.24272043387305), 1: np.float64(-536.481422404589)}\nTree:  /(-268.24272043387305, -536.481422404589, (x54 sin (x2)**(x67)), cos(x40))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(1.0), 11: np.float64(1.0)}\nTree:  ((sin(-0.2435195169519689) const (x14)**(1.0)) + (cos(-3.6232771373581303e-05))**((1.0 / const((const((1.0 * x84)) / x31((1.0 / x27)))))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(-1.115757916470376), 4: np.float64(1.2749710659417879)}\nTree:  -(const(cos(x81)), const((x2((x66((-1.115757916470376 / x80)) * x0((x62 * 1.2749710659417879)))) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-653.4471848966894), 1: np.float64(-653.94718489669)}\nTree:  (-653.4471848966894 - const(cos(x22)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.24244257540725947), 6: np.float64(0.8669610034707098), 9: np.float64(1.0)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(0.24244257540725947) const cos(x29)) / x31((1.0 + x13)))))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4941791344067723), 4: np.float64(-1.213853913250699)}\nTree:  -(-653.7726600211632, const((x2((x66(/(x47, x80, (x77 + 1.4941791344067723))) * x0)) / x17(cos(-0.8567654379486078)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-0.48550491330208734), 1: np.float64(0.10363776777673574), 2: np.float64(-0.1360276561866951), 3: np.float64(1.1114153680858538)}\nTree:  (-0.48550491330208734 + (cos(0.10363776777673574))**((x11)**((-0.1360276561866951)**((x17 - 1.1114153680858538)))))', 'Equation constants: {0: np.float64(-2614.90764390447), 1: np.float64(-2615.4076439044734)}\nTree:  -(-2614.90764390447, -2615.4076439044734, (x54 sin cos(x81)))', 'Equation constants: {0: np.float64(-0.00028999545282661743), 1: np.float64(-1724.1649593553357), 2: np.float64(-0.7364257147562139)}\nTree:  (-0.00028999545282661743 * const((x2((x66 * x0)) / x17(cos(-0.7364257147562139)))))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin(x54(cos(x50)), (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(-1.115757916470376), 4: np.float64(1.2749710659417879)}\nTree:  -(-653.7726600211632, const((x2((x66((-1.115757916470376 / x80(sin(x59)))) * x0((x62 * 1.2749710659417879)))) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164)}\nTree:  -(-653.7726600211632, const((x2((x66((x95 / x80)) * x0)) / x17(cos(x62)))), sin(x17))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(1.0), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-3.6232771373581303e-05))**((1.0 / const((const((1.0 * x84)) / x31((1.0 / x27)))))))', 'Equation constants: {0: np.float64(-1306.9084225196957), 1: np.float64(-1307.4084225196975), 2: np.float64(1.7054755517043807), 3: np.float64(0.45180320364038584)}\nTree:  -(-1306.9084225196957, const((const((x23 - x84)) / x37)), (0.45180320364038584 * x42))', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(0.18027115960047002), 3: np.float64(-0.08867826403323775)}\nTree:  (const((x8 * 0.18027115960047002)) - const((x96 sin (-0.08867826403323775 * x5))))', 'Equation constants: {0: np.float64(-0.5000000000042805), 1: np.float64(-4.501213765385144e-07), 2: np.float64(-0.284255522423166)}\nTree:  (-0.5000000000042805 + (cos(-4.501213765385144e-07))**((x11)**((-0.284255522423166)**(-0.284255522423166))))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376), 4: np.float64(-0.4972014658867021)}\nTree:  (-0.00028989371012806307 * const(/(x2((x66((-1.115757916470376 / x80)) * x0)), (cos(-0.8773904480159094) x17 cos(x54)), (-0.4972014658867021 * -0.4972014658867021))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(-1.115757916470376)}\nTree:  -(-653.7726600211632, const((x2((x66((-1.115757916470376 / x80(sin(x59)))) * x0((x62 * x86)))) / x17(cos(-0.8567654379486078)))), sin(x17))', 'Equation constants: {0: np.float64(-0.5479871065424108), 1: np.float64(-0.10873129069057469), 2: np.float64(-3.1220000432059574)}\nTree:  (-0.5479871065424108 + (cos(-0.10873129069057469))**((x61 / -3.1220000432059574)))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(-1.115757916470376), 4: np.float64(-0.7165147463536745)}\nTree:  -(-653.7726600211632, const((x2((x66((-1.115757916470376 / x99)) * x0)) / x17(cos(-0.8567654379486078)))), (x76 sin (-0.7165147463536745 / -0.7165147463536745)))', 'Equation constants: {0: np.float64(-653.4471848966894), 1: np.float64(-653.94718489669), 2: np.float64(1.676609868508102)}\nTree:  (const((x9 - 1.676609868508102)) - -653.94718489669)', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(-0.8336526150413812)}\nTree:  -(-5225.13455008745, -5225.634550087457, (x76 / -0.8336526150413812))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.1219521146675064)}\nTree:  -(const((x57)**(-1.1219521146675064)), -654.0189680101762, sin(x40), sin(x10))', 'Equation constants: {0: np.float64(-2614.90764390447), 1: np.float64(-2615.4076439044734), 2: np.float64(-0.8645170160381421)}\nTree:  -(const((x84 * -0.8645170160381421)), -2615.4076439044734, (x54 sin cos(x81)))', 'Equation constants: {0: np.float64(-1306.9084225196957), 1: np.float64(-1307.4084225196975), 2: np.float64(1.7054755517043807), 3: np.float64(0.45180320364038584), 4: np.float64(-1.238612858981191)}\nTree:  -(-1306.9084225196957, const((const((x23 - x84)) / x37)), (0.45180320364038584 * x42(cos(-1.238612858981191))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164)}\nTree:  -(-653.7726600211632, const((x2((x66((x47(/(x25, x61, (x75 * x28))) / x80)) * x0)) / x17(cos(x76)))), sin(x22))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(1.0), 11: np.float64(1.0)}\nTree:  (const((x14)**(1.0)) + (cos(-3.6232771373581303e-05))**((1.0 / const((const((1.0 * x84)) / x31((1.0 / x27)))))))', 'Equation constants: {0: np.float64(-653.4471848966894), 1: np.float64(-653.94718489669), 2: np.float64(-0.950273073576883)}\nTree:  (const((-0.950273073576883 - x42)) - const(cos(x22)))', 'Equation constants: {0: np.float64(-5230.080266547112), 1: np.float64(-5230.580266547118)}\nTree:  -(-5230.080266547112, -5230.580266547118, (x54 sin cos(x81)))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699)}\nTree:  -(-653.7726600211632, const((x2((x66(/(x47, x80, (x77 + 1.4676948390955316))) * x0)) / x17(cos(-0.8567654379486078)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-1307.8606638444548), 1: np.float64(-1308.3606638444564), 2: np.float64(-0.8567654379486078), 3: np.float64(-0.034114418336054)}\nTree:  -(-1307.8606638444548, const((x2((x66((x95 / x80)) * x0)) / x17(cos(const((-0.034114418336054 / -0.034114418336054)))))), sin(x17))', 'Equation constants: {0: np.float64(-1307.7649425546683), 1: np.float64(-1308.2649425546701)}\nTree:  -(-1307.7649425546683, const((x2((x66((x95 / x80)) * x0)) / x17(cos(x62)))), sin(x17))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164)}\nTree:  -(const(cos(x81)), -654.272660021164, sin(x17))', 'Equation constants: {0: np.float64(-286.11421381915034), 1: np.float64(-572.2284316821411), 2: np.float64(-0.5489676696762515)}\nTree:  /(const((-0.5489676696762515 / -0.5489676696762515)), -572.2284316821411, sin(x54, (x2)**(x67), cos(x41)), cos(x40))', 'Equation constants: {0: np.float64(-0.5479871065424108), 1: np.float64(-0.10873129069057469), 2: np.float64(-3.1220000432059574)}\nTree:  (-0.5479871065424108 + (cos(-0.10873129069057469))**((x61 / -3.1220000432059574)))', 'Equation constants: {0: np.float64(-1307.0951293179946), 1: np.float64(-1307.5951293179962)}\nTree:  -(-1307.0951293179946, -1307.5951293179962, sin(x40), sin(x10))', 'Equation constants: {0: np.float64(-1306.9084225196957), 1: np.float64(-1307.4084225196975), 2: np.float64(1.7054755517043807)}\nTree:  (-1306.9084225196957 - const((const((x23 - x84)) / x37)))', 'Equation constants: {0: np.float64(-0.5032161696724874), 1: np.float64(-0.07184368545349722), 2: np.float64(-0.8032688661677776), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(0.9999997577467394), 7: np.float64(0.999209014661909), 10: np.float64(1.0), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.07184368545349722))**((0.9999997577467394 / const((const((0.999209014661909 * x84)) / x31((1.0 / x27)))))))']
MSE: [np.float64(0.2500000000000049), np.float64(0.25), np.float64(0.25), np.float64(0.7706165453849364), np.float64(0.24951820704720867), np.float64(0.25), np.float64(0.25), np.float64(0.7706165453849364), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.24951820704720867), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000207894)]
Generators: ['Generator(mode=real, range=(-1.2306116357781602, 3.3773883642218396), n_g=367, sigma_y=0.009157284322594557, unit=0.5784652827526735)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=399, sigma_y=0.01318648942453616, unit=0.4302634334524017)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.01318648942453616, unit=0.4302634334524017)', 'Generator(mode=real, range=(-0.9657998227983589, 2.874200177201641), n_g=399, sigma_y=0.01977973413680424, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.5632929615583198, 2.27670703844168), n_g=335, sigma_y=0.004883884972050431, unit=0.4302634334524017)', 'Generator(mode=real, range=(-2.6414558866575093, 3.1185441133424905), n_g=367, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007325827458075647, unit=0.5784652827526736)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=335, sigma_y=0.007631070268828798, unit=0.5784652827526735)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=303, sigma_y=0.007325827458075647, unit=0.5784652827526736)', 'Generator(mode=real, range=(-1.257639822798359, 3.1660401772016407), n_g=335, sigma_y=0.007325827458075647, unit=0.5784652827526736)', 'Generator(mode=real, range=(-2.0236520116220906, 4.888347988377909), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=367, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5258775297751578)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.5258775297751578)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.009157284322594557, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=367, sigma_y=0.009157284322594557, unit=0.5258775297751577)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007325827458075647, unit=0.636311811027941)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=335, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.6929435622094278)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.007325827458075646, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.004883884972050431, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.006104856215063039, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.004883884972050431, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.0062104733639252, 2.8337895266360746), n_g=303, sigma_y=0.0164831117806702, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.2917335650045842, 3.237866434995416), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=367, sigma_y=0.009157284322594557, unit=0.5258775297751577)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=335, sigma_y=0.007631070268828798, unit=0.5206187544774061)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007325827458075647, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.007631070268828798, unit=0.4302634334524017)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.2917335650045842, 3.237866434995416), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5784652827526736)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.006104856215063039, unit=0.8554858792708985)']
Gen 42: 22 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-653.4471848966894), 1: np.float64(-653.94718489669), 2: np.float64(1.676609868508102)}\nTree:  (const((x9 - 1.676609868508102)) - -653.94718489669)', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(-0.8336526150413812)}\nTree:  -(-5225.13455008745, -5225.634550087457, (x76 / -0.8336526150413812))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.1219521146675064)}\nTree:  -(const((x57)**(-1.1219521146675064)), -654.0189680101762, sin(x40), sin(x10))', 'Equation constants: {0: np.float64(-2614.90764390447), 1: np.float64(-2615.4076439044734), 2: np.float64(-0.8645170160381421)}\nTree:  -(const((x84 * -0.8645170160381421)), -2615.4076439044734, (x54 sin cos(x81)))', 'Equation constants: {0: np.float64(-1306.9084225196957), 1: np.float64(-1307.4084225196975), 2: np.float64(1.7054755517043807), 3: np.float64(0.45180320364038584), 4: np.float64(-1.238612858981191)}\nTree:  -(-1306.9084225196957, const((const((x23 - x84)) / x37)), (0.45180320364038584 * x42(cos(-1.238612858981191))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164)}\nTree:  -(-653.7726600211632, const((x2((x66((x47(/(x25, x61, (x75 * x28))) / x80)) * x0)) / x17(cos(x76)))), sin(x22))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(1.0), 11: np.float64(1.0)}\nTree:  (const((x14)**(1.0)) + (cos(-3.6232771373581303e-05))**((1.0 / const((const((1.0 * x84)) / x31((1.0 / x27)))))))', 'Equation constants: {0: np.float64(-653.4471848966894), 1: np.float64(-653.94718489669), 2: np.float64(-0.950273073576883)}\nTree:  (const((-0.950273073576883 - x42)) - const(cos(x22)))', 'Equation constants: {0: np.float64(-5230.080266547112), 1: np.float64(-5230.580266547118)}\nTree:  -(-5230.080266547112, -5230.580266547118, (x54 sin cos(x81)))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699)}\nTree:  -(-653.7726600211632, const((x2((x66(/(x47, x80, (x77 + 1.4676948390955316))) * x0)) / x17(cos(-0.8567654379486078)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-1307.8606638444548), 1: np.float64(-1308.3606638444564), 2: np.float64(-0.8567654379486078), 3: np.float64(-0.034114418336054)}\nTree:  -(-1307.8606638444548, const((x2((x66((x95 / x80)) * x0)) / x17(cos(const((-0.034114418336054 / -0.034114418336054)))))), sin(x17))', 'Equation constants: {0: np.float64(-1307.7649425546683), 1: np.float64(-1308.2649425546701)}\nTree:  -(-1307.7649425546683, const((x2((x66((x95 / x80)) * x0)) / x17(cos(x62)))), sin(x17))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164)}\nTree:  -(const(cos(x81)), -654.272660021164, sin(x17))', 'Equation constants: {0: np.float64(-286.11421381915034), 1: np.float64(-572.2284316821411), 2: np.float64(-0.5489676696762515)}\nTree:  /(const((-0.5489676696762515 / -0.5489676696762515)), -572.2284316821411, sin(x54, (x2)**(x67), cos(x41)), cos(x40))', 'Equation constants: {0: np.float64(-0.5479871065424108), 1: np.float64(-0.10873129069057469), 2: np.float64(-3.1220000432059574)}\nTree:  (-0.5479871065424108 + (cos(-0.10873129069057469))**((x61 / -3.1220000432059574)))', 'Equation constants: {0: np.float64(-1307.0951293179946), 1: np.float64(-1307.5951293179962)}\nTree:  -(-1307.0951293179946, -1307.5951293179962, sin(x40), sin(x10))', 'Equation constants: {0: np.float64(-1306.9084225196957), 1: np.float64(-1307.4084225196975), 2: np.float64(1.7054755517043807)}\nTree:  (-1306.9084225196957 - const((const((x23 - x84)) / x37)))', 'Equation constants: {0: np.float64(-0.5032161696724874), 1: np.float64(-0.07184368545349722), 2: np.float64(-0.8032688661677776), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(0.9999997577467394), 7: np.float64(0.999209014661909), 10: np.float64(1.0), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.07184368545349722))**((0.9999997577467394 / const((const((0.999209014661909 * x84)) / x31((1.0 / x27)))))))', 'Equation constants: {0: np.float64(-0.5035118682701363), 1: np.float64(-0.07502475728838925), 2: np.float64(-0.8035861500831621), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0000550557993788), 7: np.float64(1.0001056387820964), 10: np.float64(0.9999997577467394), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.07502475728838925))**((1.0000550557993788 / const((const((1.0001056387820964 * x84)) / x31((0.9999997577467394 / x27)))))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.24244257540725947), 6: np.float64(0.8669610034707098)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(0.24244257540725947) const cos(x29)) / x31)))))', 'Equation constants: {0: np.float64(0.4923117288384474), 3: np.float64(-9.458359983006798e-07)}\nTree:  (0.4923117288384474 - (-9.458359983006798e-07 * x42))', 'Equation constants: {0: np.float64(-0.500000000000098), 1: np.float64(-3.8739751302417535e-08), 2: np.float64(-0.284255522423166)}\nTree:  (-0.500000000000098 + (cos(-3.8739751302417535e-08))**((x11)**((-0.284255522423166)**(-0.284255522423166))))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(1.8076635490036055)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin((cos(x50) x54 (x79 - 1.8076635490036055)), (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4941791344067723), 4: np.float64(-1.213853913250699), 5: np.float64(0.3766154869161027)}\nTree:  -(-653.7726600211632, const((x2((x66(/(x47, x80, (x77 + 1.4941791344067723))) * x0)) / x17((-0.8567654379486078 cos (x7 * 0.3766154869161027))))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699)}\nTree:  -(-653.7726600211632, const((x2((x66(/(x47, x80, (x20 + 1.4676948390955316))) * x0)) / x17(cos(-0.8567654379486078)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.1219521146675064)}\nTree:  -(const((x57)**(-1.1219521146675064)), -654.0189680101762, sin(x10))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376), 4: np.float64(-0.4972014658867021)}\nTree:  (-0.00028989371012806307 * const(/(x2((x66((-1.115757916470376 / x80)) * x1)), (cos(-0.8773904480159094) x17 cos(x54)), (-0.4972014658867021 * -0.4972014658867021))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(1.663502313791985)}\nTree:  -(-653.7726600211632, const((x2((x66((x95 / x80)) * x0)) / (cos(x62) x17 (1.663502313791985)**(1.663502313791985)))), sin(x17))', 'Equation constants: {0: np.float64(-2614.90764390447), 1: np.float64(-2615.4076439044734), 2: np.float64(-0.8645170160381421)}\nTree:  -(const((x84 * -0.8645170160381421)), -2615.4076439044734, sin(x54))', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(0.18027115960047002), 3: np.float64(-0.08867826403323775)}\nTree:  (const((x32 * 0.18027115960047002)) - const((x96 sin (-0.08867826403323775 * x5))))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726)}\nTree:  (-0.00028989371012806307 * -1724.7700878460726)', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376)}\nTree:  (-0.00028989371012806307 * const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-0.8773904480159094)))))', 'Equation constants: {0: np.float64(-0.547987106661865), 1: np.float64(-0.10873129080457955), 2: np.float64(-3.1219999950471884)}\nTree:  (-0.547987106661865 + (cos(-0.10873129080457955))**((x61 / -3.1219999950471884)))', 'Equation constants: {0: np.float64(-0.5462800729274702), 1: np.float64(-0.10796426295250945), 2: np.float64(-3.854056799558264)}\nTree:  (-0.5462800729274702 + (cos(-0.10796426295250945))**((x58 / -3.854056799558264)))', 'Equation constants: {0: np.float64(-1307.7021766415978), 1: np.float64(-1308.2021766415994), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699)}\nTree:  -(-1307.7021766415978, const((x2((x66(/(x47, x80, (x77 + 1.4676948390955316))) * x0)) / x17(cos(-0.8567654379486078)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-653.4471848966894), 1: np.float64(-653.94718489669), 2: np.float64(-0.950273073576883)}\nTree:  (const((-0.950273073576883 - x42)) - -653.94718489669)', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376), 4: np.float64(-0.3377851205346586)}\nTree:  (-0.00028989371012806307 * const(/(x2((x66((-1.115757916470376 / x80)) * x0)), (cos(-0.8773904480159094) x17 cos(x54)), (-0.3377851205346586 * -0.3377851205346586))))', 'Equation constants: {0: np.float64(-0.4896520346564379), 1: np.float64(0.08698824560879286), 2: np.float64(-0.1349183924286797), 3: np.float64(1.1114153680858538)}\nTree:  (-0.4896520346564379 + (cos(0.08698824560879286))**((x11)**((-0.1349183924286797)**((x4 - 1.1114153680858538)))))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(-0.3836312871679164)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin(x54(cos(x50)), (x2)**(x67), cos(x81), (x99)**(-0.3836312871679164)), cos(x40))', 'Equation constants: {0: np.float64(-1307.7649425546683), 1: np.float64(-1308.2649425546701)}\nTree:  -(-1307.7649425546683, const((x2(*(x66((x95 / x80)), x0, cos(x22))) / x17(cos(x62)))), sin(x17))']
MSE: [np.float64(0.2500000000000589), np.float64(0.25), np.float64(0.24971437214526915), np.float64(0.7377718992760758), np.float64(0.25000000000000006), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(334608433.2183182), np.float64(0.24951820704657313), np.float64(0.24949976347792457), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.2498253558775328), np.float64(0.25), np.float64(317621748.5208839), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.004883884972050431, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.0062104733639252, 2.8337895266360746), n_g=303, sigma_y=0.0164831117806702, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.2917335650045842, 3.237866434995416), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=367, sigma_y=0.009157284322594557, unit=0.5258775297751577)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=335, sigma_y=0.007631070268828798, unit=0.5206187544774061)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007325827458075647, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.007631070268828798, unit=0.4302634334524017)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.2917335650045842, 3.237866434995416), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5784652827526736)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.257639822798359, 3.1660401772016407), n_g=335, sigma_y=0.007325827458075647, unit=0.5784652827526736)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.6236492059884851)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=399, sigma_y=0.01318648942453616, unit=0.4302634334524017)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5784652827526736)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.004883884972050431, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007325827458075647, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007325827458075647, unit=0.636311811027941)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.007325827458075647, unit=0.636311811027941)', 'Generator(mode=real, range=(-1.257639822798359, 3.1660401772016407), n_g=303, sigma_y=0.007325827458075647, unit=0.5784652827526736)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=335, sigma_y=0.007631070268828798, unit=0.5206187544774061)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007325827458075647, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.006104856215063039, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=335, sigma_y=0.009157284322594557, unit=0.5206187544774061)', 'Generator(mode=real, range=(-2.8446935650045844, 3.790826434995416), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.7387735650045841, 2.684906434995416), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.6414558866575093, 3.1185441133424905), n_g=367, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.004883884972050431, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5258775297751578)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=303, sigma_y=0.005860661966460518, unit=0.5784652827526736)']
Gen 43: 22 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(1.8076635490036055)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin((cos(x50) x54 (x79 - 1.8076635490036055)), (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4941791344067723), 4: np.float64(-1.213853913250699), 5: np.float64(0.3766154869161027)}\nTree:  -(-653.7726600211632, const((x2((x66(/(x47, x80, (x77 + 1.4941791344067723))) * x0)) / x17((-0.8567654379486078 cos (x7 * 0.3766154869161027))))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699)}\nTree:  -(-653.7726600211632, const((x2((x66(/(x47, x80, (x20 + 1.4676948390955316))) * x0)) / x17(cos(-0.8567654379486078)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.1219521146675064)}\nTree:  -(const((x57)**(-1.1219521146675064)), -654.0189680101762, sin(x10))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376), 4: np.float64(-0.4972014658867021)}\nTree:  (-0.00028989371012806307 * const(/(x2((x66((-1.115757916470376 / x80)) * x1)), (cos(-0.8773904480159094) x17 cos(x54)), (-0.4972014658867021 * -0.4972014658867021))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(1.663502313791985)}\nTree:  -(-653.7726600211632, const((x2((x66((x95 / x80)) * x0)) / (cos(x62) x17 (1.663502313791985)**(1.663502313791985)))), sin(x17))', 'Equation constants: {0: np.float64(-2614.90764390447), 1: np.float64(-2615.4076439044734), 2: np.float64(-0.8645170160381421)}\nTree:  -(const((x84 * -0.8645170160381421)), -2615.4076439044734, sin(x54))', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(0.18027115960047002), 3: np.float64(-0.08867826403323775)}\nTree:  (const((x32 * 0.18027115960047002)) - const((x96 sin (-0.08867826403323775 * x5))))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726)}\nTree:  (-0.00028989371012806307 * -1724.7700878460726)', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376)}\nTree:  (-0.00028989371012806307 * const((x2((x66((-1.115757916470376 / x80)) * x0)) / x17(cos(-0.8773904480159094)))))', 'Equation constants: {0: np.float64(-0.547987106661865), 1: np.float64(-0.10873129080457955), 2: np.float64(-3.1219999950471884)}\nTree:  (-0.547987106661865 + (cos(-0.10873129080457955))**((x61 / -3.1219999950471884)))', 'Equation constants: {0: np.float64(-0.5462800729274702), 1: np.float64(-0.10796426295250945), 2: np.float64(-3.854056799558264)}\nTree:  (-0.5462800729274702 + (cos(-0.10796426295250945))**((x58 / -3.854056799558264)))', 'Equation constants: {0: np.float64(-1307.7021766415978), 1: np.float64(-1308.2021766415994), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699)}\nTree:  -(-1307.7021766415978, const((x2((x66(/(x47, x80, (x77 + 1.4676948390955316))) * x0)) / x17(cos(-0.8567654379486078)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-653.4471848966894), 1: np.float64(-653.94718489669), 2: np.float64(-0.950273073576883)}\nTree:  (const((-0.950273073576883 - x42)) - -653.94718489669)', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376), 4: np.float64(-0.3377851205346586)}\nTree:  (-0.00028989371012806307 * const(/(x2((x66((-1.115757916470376 / x80)) * x0)), (cos(-0.8773904480159094) x17 cos(x54)), (-0.3377851205346586 * -0.3377851205346586))))', 'Equation constants: {0: np.float64(-0.4896520346564379), 1: np.float64(0.08698824560879286), 2: np.float64(-0.1349183924286797), 3: np.float64(1.1114153680858538)}\nTree:  (-0.4896520346564379 + (cos(0.08698824560879286))**((x11)**((-0.1349183924286797)**((x4 - 1.1114153680858538)))))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(-0.3836312871679164)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin(x54(cos(x50)), (x2)**(x67), cos(x81), (x99)**(-0.3836312871679164)), cos(x40))', 'Equation constants: {0: np.float64(-1307.7649425546683), 1: np.float64(-1308.2649425546701)}\nTree:  -(-1307.7649425546683, const((x2(*(x66((x95 / x80)), x0, cos(x22))) / x17(cos(x62)))), sin(x17))', 'Equation constants: {0: np.float64(-1307.7021766415978), 1: np.float64(-1308.2021766415994), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699)}\nTree:  -(-1307.7021766415978, const((x2((x66(/(x47, x80, (x56 + 1.4676948390955316))) * x0)) / x17(cos(-0.8567654379486078)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-0.500000000000098), 1: np.float64(-3.8739751302417535e-08), 2: np.float64(-0.284255522423166)}\nTree:  (-0.500000000000098 + ((-3.8739751302417535e-08 cos (x98 - x46)))**((x11)**((-0.284255522423166)**(-0.284255522423166))))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.5768281549560915), 5: np.float64(0.24244257540725947), 6: np.float64(0.8669610034707098)}\nTree:  (const(sin(-0.5768281549560915)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((((x3)**(0.24244257540725947) const cos(x29)) / x31)))))', 'Equation constants: {0: np.float64(-0.19588405872447134), 1: np.float64(-2.552527069023082), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376), 4: np.float64(-0.4972014658867021)}\nTree:  (-0.19588405872447134 * const(/(x2((x66((-1.115757916470376 / x80)) * x1)), (cos(-0.8773904480159094) x17 cos(x54)), (-0.4972014658867021 * -0.4972014658867021))))', 'Equation constants: {0: np.float64(-0.4904682083553982), 1: np.float64(0.08355822334345632), 2: np.float64(-0.09831214157623036), 3: np.float64(1.0513217699666175)}\nTree:  (-0.4904682083553982 + (cos(0.08355822334345632))**((x11)**((-0.09831214157623036)**((x4 - 1.0513217699666175)))))', 'Equation constants: {0: np.float64(-0.48965202551425735), 1: np.float64(0.08698825797856914), 2: np.float64(-0.13491957889220757), 3: np.float64(1.1114153680858538)}\nTree:  (-0.48965202551425735 + (cos(0.08698825797856914))**((x11)**((-0.13491957889220757)**((x4 - 1.1114153680858538)))))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.1219521146675064), 3: np.float64(-1.8622677257342208)}\nTree:  -(const((x57)**(-1.1219521146675064)), -654.0189680101762, (x40 sin (-1.8622677257342208)**(-1.8622677257342208)), sin(x10))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 3: np.float64(1.0), 4: np.float64(1.0)}\nTree:  (-0.00028989371012806307 * const((x2((x66((1.0 / x80)) * x0)) / (1.0 * 1.0))))', 'Equation constants: {0: np.float64(-2614.4033035325583), 1: np.float64(-2614.9033035325615)}\nTree:  -(-2614.4033035325583, -2614.9033035325615, sin(x40), sin(x10))', 'Equation constants: {0: np.float64(-2614.90764390447), 1: np.float64(-2615.4076439044734), 2: np.float64(-0.8645170160381421), 3: np.float64(-0.7052380675496268)}\nTree:  -(const((x84 * -0.8645170160381421)), -2615.4076439044734, (x54 sin (x81 cos (-0.7052380675496268)**(x88))))', 'Equation constants: {0: np.float64(-0.5479871066631725), 1: np.float64(-0.10873129080580567), 2: np.float64(-3.1219999945249266), 3: np.float64(-0.7835507945571285)}\nTree:  (-0.5479871066631725 + (cos(const((-0.7835507945571285 + x67))))**((x61 / -3.1219999945249266)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.24244257540725947), 6: np.float64(0.8669610034707098)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(0.24244257540725947)) / x31)))))', 'Equation constants: {0: np.float64(-4052.5100964707603), 1: np.float64(-8104.984111038852)}\nTree:  (-4052.5100964707603 / -8104.984111038852)', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(-0.8336526150413812)}\nTree:  -(-5225.13455008745, -5225.634550087457, (x66 / -0.8336526150413812))', 'Equation constants: {0: np.float64(-0.5086057319267503), 1: np.float64(-0.11828433372808124), 2: np.float64(-0.8175436716949808), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(0.9995369816828602), 7: np.float64(0.9992547870717099), 10: np.float64(0.9999997577467394), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.11828433372808124))**((0.9995369816828602 / const((const((0.9992547870717099 * x84)) / x31((0.9999997577467394 / x27)))))))', 'Equation constants: {0: np.float64(-0.5035274602188314), 1: np.float64(-0.07519290343744017), 2: np.float64(-0.8035940734677132), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.000006443719626), 10: np.float64(1.0000550557993788), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.07519290343744017))**((1.0 / const((const((1.000006443719626 * x84)) / x31((1.0000550557993788 / x56)))))))', 'Equation constants: {0: np.float64(-0.5035263981497792), 1: np.float64(-0.07518158013406628), 2: np.float64(-0.8035935397855379), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0000060097855024), 10: np.float64(1.0000550557993788)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-0.07518158013406628))**((1.0 / const((const((1.0000060097855024 * x84)) / x31((1.0000550557993788 / x27)))))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699)}\nTree:  -(-653.7726600211632, const((x2((x66((x80 / (x20 + 1.4676948390955316))) * x0)) / x17(cos(-0.8567654379486078)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-5229.921422460446), 1: np.float64(-5230.421422460452), 2: np.float64(-0.8645170160381421)}\nTree:  -(const((x84 * -0.8645170160381421)), -5230.421422460452, (x54 sin cos(x81)))', 'Equation constants: {0: np.float64(-2614.549389145406), 1: np.float64(-2615.04938914541)}\nTree:  -(-2614.549389145406, -2615.04938914541, sin(x40), sin(x10))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376), 4: np.float64(-0.4972014658867021)}\nTree:  (-0.00028989371012806307 * const(/(x2((x66((-1.115757916470376 / x80)) * x1)), (cos(-0.8773904480159094) x17 cos(x54)), *(-0.4972014658867021, -0.4972014658867021, (x62 + x2)))))', 'Equation constants: {0: np.float64(-5230.080266547112), 1: np.float64(-5230.580266547118), 2: np.float64(1.1213808025836163)}\nTree:  -(-5230.080266547112, -5230.580266547118, sin(x54, cos(x81), (1.1213808025836163)**(1.1213808025836163)))']
MSE: [np.float64(0.25), np.float64(0.25000000000000006), np.float64(0.25), np.float64(0.7299044115002141), np.float64(0.2500000000108435), np.float64(317621749.8026136), np.float64(0.24985134547772628), np.float64(0.249825355859229), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(115511331684.14772), np.float64(0.24951820704657884), np.float64(0.25), np.float64(0.2500000000444869), np.float64(0.25), np.float64(0.25000000000457395), np.float64(0.2500000000000004), np.float64(0.2500000000000003), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.007325827458075647, unit=0.636311811027941)', 'Generator(mode=real, range=(-1.257639822798359, 3.1660401772016407), n_g=303, sigma_y=0.007325827458075647, unit=0.5784652827526736)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=335, sigma_y=0.007631070268828798, unit=0.5206187544774061)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.007325827458075647, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.006104856215063039, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=335, sigma_y=0.009157284322594557, unit=0.5206187544774061)', 'Generator(mode=real, range=(-2.8446935650045844, 3.790826434995416), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.7387735650045841, 2.684906434995416), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.6414558866575093, 3.1185441133424905), n_g=367, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.004883884972050431, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5258775297751578)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=303, sigma_y=0.005860661966460518, unit=0.5784652827526736)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.009157284322594557, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5206187544774062)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.004883884972050431, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.004883884972050431, unit=0.8469310204781896)', 'Generator(mode=real, range=(-2.6414558866575093, 3.1185441133424905), n_g=367, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8469310204781896)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.1811415650045842, 3.127274434995416), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.7387735650045841, 2.684906434995416), n_g=335, sigma_y=0.006104856215063039, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.2917335650045842, 3.237866434995416), n_g=335, sigma_y=0.007631070268828798, unit=0.6999429921307351)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.005860661966460518, unit=0.636311811027941)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007325827458075647, unit=0.636311811027941)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.9410344671979884)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.007325827458075647, unit=0.5258775297751578)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.004883884972050431, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.9410344671979884)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=303, sigma_y=0.005860661966460518, unit=0.5784652827526736)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=335, sigma_y=0.007631070268828798, unit=0.5206187544774061)', 'Generator(mode=real, range=(-1.257639822798359, 3.1660401772016407), n_g=335, sigma_y=0.007325827458075647, unit=0.636311811027941)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=399, sigma_y=0.015823787309443393, unit=0.4302634334524017)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.0062104733639252, 2.8337895266360746), n_g=303, sigma_y=0.01318648942453616, unit=0.4780704816137797)']
Gen 44: 24 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.1219521146675064), 3: np.float64(-1.8622677257342208)}\nTree:  -(const((x57)**(-1.1219521146675064)), -654.0189680101762, (x40 sin (-1.8622677257342208)**(-1.8622677257342208)), sin(x10))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 3: np.float64(1.0), 4: np.float64(1.0)}\nTree:  (-0.00028989371012806307 * const((x2((x66((1.0 / x80)) * x0)) / (1.0 * 1.0))))', 'Equation constants: {0: np.float64(-2614.4033035325583), 1: np.float64(-2614.9033035325615)}\nTree:  -(-2614.4033035325583, -2614.9033035325615, sin(x40), sin(x10))', 'Equation constants: {0: np.float64(-2614.90764390447), 1: np.float64(-2615.4076439044734), 2: np.float64(-0.8645170160381421), 3: np.float64(-0.7052380675496268)}\nTree:  -(const((x84 * -0.8645170160381421)), -2615.4076439044734, (x54 sin (x81 cos (-0.7052380675496268)**(x88))))', 'Equation constants: {0: np.float64(-0.5479871066631725), 1: np.float64(-0.10873129080580567), 2: np.float64(-3.1219999945249266), 3: np.float64(-0.7835507945571285)}\nTree:  (-0.5479871066631725 + (cos(const((-0.7835507945571285 + x67))))**((x61 / -3.1219999945249266)))', 'Equation constants: {0: np.float64(-0.49999999999837963), 1: np.float64(-3.6232771373581303e-05), 2: np.float64(-0.7935272892992125), 3: np.float64(1.6487086928786074), 4: np.float64(-0.376643169054988), 5: np.float64(0.24244257540725947), 6: np.float64(0.8669610034707098)}\nTree:  (const(sin(-0.376643169054988)) + (cos(-3.6232771373581303e-05))**((0.8669610034707098 / const((const((x3)**(0.24244257540725947)) / x31)))))', 'Equation constants: {0: np.float64(-4052.5100964707603), 1: np.float64(-8104.984111038852)}\nTree:  (-4052.5100964707603 / -8104.984111038852)', 'Equation constants: {0: np.float64(-5225.13455008745), 1: np.float64(-5225.634550087457), 2: np.float64(-0.8336526150413812)}\nTree:  -(-5225.13455008745, -5225.634550087457, (x66 / -0.8336526150413812))', 'Equation constants: {0: np.float64(-0.5086057319267503), 1: np.float64(-0.11828433372808124), 2: np.float64(-0.8175436716949808), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(0.9995369816828602), 7: np.float64(0.9992547870717099), 10: np.float64(0.9999997577467394), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.11828433372808124))**((0.9995369816828602 / const((const((0.9992547870717099 * x84)) / x31((0.9999997577467394 / x27)))))))', 'Equation constants: {0: np.float64(-0.5035274602188314), 1: np.float64(-0.07519290343744017), 2: np.float64(-0.8035940734677132), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.000006443719626), 10: np.float64(1.0000550557993788), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.07519290343744017))**((1.0 / const((const((1.000006443719626 * x84)) / x31((1.0000550557993788 / x56)))))))', 'Equation constants: {0: np.float64(-0.5035263981497792), 1: np.float64(-0.07518158013406628), 2: np.float64(-0.8035935397855379), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0000060097855024), 10: np.float64(1.0000550557993788)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-0.07518158013406628))**((1.0 / const((const((1.0000060097855024 * x84)) / x31((1.0000550557993788 / x27)))))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699)}\nTree:  -(-653.7726600211632, const((x2((x66((x80 / (x20 + 1.4676948390955316))) * x0)) / x17(cos(-0.8567654379486078)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-5229.921422460446), 1: np.float64(-5230.421422460452), 2: np.float64(-0.8645170160381421)}\nTree:  -(const((x84 * -0.8645170160381421)), -5230.421422460452, (x54 sin cos(x81)))', 'Equation constants: {0: np.float64(-2614.549389145406), 1: np.float64(-2615.04938914541)}\nTree:  -(-2614.549389145406, -2615.04938914541, sin(x40), sin(x10))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376), 4: np.float64(-0.4972014658867021)}\nTree:  (-0.00028989371012806307 * const(/(x2((x66((-1.115757916470376 / x80)) * x1)), (cos(-0.8773904480159094) x17 cos(x54)), *(-0.4972014658867021, -0.4972014658867021, (x62 + x2)))))', 'Equation constants: {0: np.float64(-5230.080266547112), 1: np.float64(-5230.580266547118), 2: np.float64(1.1213808025836163)}\nTree:  -(-5230.080266547112, -5230.580266547118, sin(x54, cos(x81), (1.1213808025836163)**(1.1213808025836163)))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.1219521146675064), 3: np.float64(-1.8622677257342208)}\nTree:  -(const((x57)**(-1.1219521146675064)), -654.0189680101762, (x40((x75 - x69)) sin (-1.8622677257342208)**(-1.8622677257342208)), sin(x10))', 'Equation constants: {0: np.float64(-2614.90764390447), 1: np.float64(-2615.4076439044734), 3: np.float64(1.0)}\nTree:  -(const((x84 * x83)), -2615.4076439044734, (x54 sin (x81 cos (1.0)**(x88))))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376), 4: np.float64(-0.4972014658867021)}\nTree:  (-0.00028989371012806307 * const(/(x2((x66((-1.115757916470376)**(x80)) * x1)), (cos(-0.8773904480159094) x17 cos(x54)), *(-0.4972014658867021, -0.4972014658867021, (x62 + x2)))))', 'Equation constants: {0: np.float64(-2614.90764390447), 1: np.float64(-2615.4076439044734), 2: np.float64(-0.8645170160381421)}\nTree:  -(const((x84 * -0.8645170160381421)), -2615.4076439044734, sin(x54))', 'Equation constants: {0: np.float64(-0.5035274602188314), 1: np.float64(-0.07519290343744017), 2: np.float64(-0.8035940734677132), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(1.0), 11: np.float64(1.0)}\nTree:  (const(sin(const((x52)**(1.0)))) + (cos(-0.07519290343744017))**((1.0 / const((const((1.0 * x84)) / x31((1.0 / x56)))))))', 'Equation constants: {0: np.float64(-0.4904682083553982), 1: np.float64(0.08355822334345632), 2: np.float64(-0.09831214157623036), 3: np.float64(1.0513217699666175)}\nTree:  (-0.4904682083553982 + (cos(0.08355822334345632))**((x11)**((-0.09831214157623036)**((x4 - 1.0513217699666175)))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699), 5: np.float64(0.8781898310103609)}\nTree:  -(-653.7726600211632, const((x2((x66((x80 / (x20 + 1.4676948390955316))) * x0)) / (cos(-0.8567654379486078) x17 sin(0.8781898310103609)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-653.4471848966894), 1: np.float64(-653.94718489669), 2: np.float64(-0.950273073576883)}\nTree:  (const((-0.950273073576883 - x42(sin(x68)))) - -653.94718489669)', 'Equation constants: {0: np.float64(-2615.67882215628), 1: np.float64(-2616.178822156284)}\nTree:  -(-2615.67882215628, const((x2(*(x66((x95 / x80)), x0, cos(x22))) / x17(cos(x62)))), sin(x17))', 'Equation constants: {0: np.float64(-10459.33457850979), 1: np.float64(-10459.834578509803), 2: np.float64(1.8076635490036055)}\nTree:  -(-10459.33457850979, -10459.834578509803, sin((cos(x50) x54 (x79 - 1.8076635490036055)), (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-5572.119828794181), 1: np.float64(-11144.247764935924)}\nTree:  (-5572.119828794181 / -11144.247764935924)', 'Equation constants: {0: np.float64(-0.48965202551425735), 1: np.float64(0.08698825797856914), 2: np.float64(-0.13491957889220757), 3: np.float64(1.1114153680858538)}\nTree:  (-0.48965202551425735 + (cos(0.08698825797856914))**((x11)**((-0.13491957889220757)**((x4 - const(sin(x27)))))))', 'Equation constants: {0: np.float64(-0.5089064019624525), 1: np.float64(-0.1202156897423288), 2: np.float64(-0.8168788599588851), 3: np.float64(1.6487086928786074), 4: np.float64(-0.3601019076339942), 6: np.float64(1.0000138049498923), 7: np.float64(1.0001562417518708), 10: np.float64(0.9995369816828602), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.1202156897423288))**((1.0000138049498923 / const((const((1.0001562417518708 * x84)) / x31((0.9995369816828602 / x27)))))))', 'Equation constants: {0: np.float64(-2614.90764390447), 1: np.float64(-2615.4076439044734)}\nTree:  -(const((x84 * x75)), -2615.4076439044734, sin(x54))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376), 4: np.float64(-0.4972014658867021)}\nTree:  (-0.00028989371012806307 * const(/(x2((x66((-1.115757916470376 / x80)) * x1)), (cos(-0.8773904480159094) x17 cos(x54)), *(-0.4972014658867021, x91, (x62 + x2)))))', 'Equation constants: {0: np.float64(-0.5462801955285225), 1: np.float64(-0.10796435763297926), 2: np.float64(-3.8540286890410247)}\nTree:  (-0.5462801955285225 + (cos(-0.10796435763297926))**((x58 / -3.8540286890410247)))', 'Equation constants: {0: np.float64(-0.5035263981497792), 1: np.float64(-0.07518158013406628), 2: np.float64(-0.8035935397855379), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(1.0)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-0.07518158013406628))**((1.0 / const((const((1.0 * x94)) / x31((1.0 / x27)))))))', 'Equation constants: {0: np.float64(-1307.7021766415978), 1: np.float64(-1308.2021766415994), 3: np.float64(1.0), 4: np.float64(1.0)}\nTree:  -(-1307.7021766415978, const((x2((x66(/(x47, x80, (x56 + 1.0))) * x0)) / x17)), (x17 sin sin(1.0)))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.1219521146675064), 3: np.float64(-1.8622677257342208)}\nTree:  -(const((x57)**(-1.1219521146675064)), -654.0189680101762, (x40 sin pow(-1.8622677257342208, -1.8622677257342208, sin(x6))), sin(x10))', 'Equation constants: {0: np.float64(-0.5462802119092012), 1: np.float64(-0.10796436523804398), 2: np.float64(-3.854020643011777)}\nTree:  (-0.5462802119092012 + (cos(-0.10796436523804398))**((x58 / -3.854020643011777)))', 'Equation constants: {0: np.float64(-0.4896520256068203), 1: np.float64(0.0869882575842614), 2: np.float64(-0.13492715192940613), 3: np.float64(1.1114153680858538), 4: np.float64(-1.3688857157965018)}\nTree:  (-0.4896520256068203 + (cos(0.0869882575842614))**((x11)**((-0.13492715192940613)**((x4((x83 / -1.3688857157965018)) - 1.1114153680858538)))))', 'Equation constants: {0: np.float64(-0.5035263981497792), 1: np.float64(-0.07518158013406628), 2: np.float64(-0.8035935397855379), 3: np.float64(1.5905284852836197), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(1.0)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-0.07518158013406628))**((1.0 / const((const((1.0 * x84)) / x31((1.0 / x27)))))))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(-0.3836312871679164)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin(x54(cos(x50)), (x2)**(x44), cos(x81), (x99)**(-0.3836312871679164)), cos(x40))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376), 4: np.float64(1.7262682153209088)}\nTree:  (-0.00028989371012806307 * const((x2(*(x66((-1.115757916470376 / x80)), x0, cos(1.7262682153209088))) / x17(cos(-0.8773904480159094)))))']
MSE: [np.float64(0.25), np.float64(0.25), np.float64(0.5), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.24985134547772628), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.2500000001441776), np.float64(0.249825355859229), np.float64(0.2500000000221922), np.float64(0.25), np.float64(0.25), np.float64(0.24949976320204525), np.float64(0.25000000000000006), np.float64(0.25), np.float64(0.25), np.float64(0.249499763297201), np.float64(0.24982535585922894), np.float64(0.25000000000000006), np.float64(0.25), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.005860661966460518, unit=0.636311811027941)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007325827458075647, unit=0.636311811027941)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.9410344671979884)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.007325827458075647, unit=0.5258775297751578)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.004883884972050431, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.9410344671979884)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=303, sigma_y=0.005860661966460518, unit=0.5784652827526736)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=335, sigma_y=0.007631070268828798, unit=0.5206187544774061)', 'Generator(mode=real, range=(-1.257639822798359, 3.1660401772016407), n_g=335, sigma_y=0.007325827458075647, unit=0.636311811027941)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=399, sigma_y=0.015823787309443393, unit=0.4302634334524017)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.0062104733639252, 2.8337895266360746), n_g=303, sigma_y=0.01318648942453616, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=303, sigma_y=0.004688529573168415, unit=0.5784652827526736)', 'Generator(mode=real, range=(-1.0062104733639252, 2.8337895266360746), n_g=303, sigma_y=0.01318648942453616, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.007325827458075647, unit=0.5258775297751578)', 'Generator(mode=real, range=(-1.7387735650045841, 2.684906434995416), n_g=335, sigma_y=0.007631070268828798, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.257639822798359, 3.1660401772016407), n_g=335, sigma_y=0.005860661966460518, unit=0.636311811027941)', 'Generator(mode=real, range=(-2.9695850153907624, 3.942414984609237), n_g=335, sigma_y=0.007325827458075647, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=271, sigma_y=0.004883884972050431, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007325827458075647, unit=0.636311811027941)', 'Generator(mode=real, range=(-2.132147287152612, 4.779852712847387), n_g=367, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.6414558866575093, 3.1185441133424905), n_g=367, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007325827458075647, unit=0.636311811027941)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=303, sigma_y=0.004883884972050431, unit=0.7699372913438086)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=367, sigma_y=0.009157284322594557, unit=0.5206187544774061)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.004883884972050431, unit=0.6929435622094278)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.006104856215063039, unit=0.8469310204781896)', 'Generator(mode=real, range=(-1.0062104733639252, 2.8337895266360746), n_g=303, sigma_y=0.01318648942453616, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007325827458075647, unit=0.8554858792708985)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5258775297751578)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=399, sigma_y=0.015823787309443393, unit=0.4302634334524017)', 'Generator(mode=real, range=(-1.7387735650045841, 2.684906434995416), n_g=335, sigma_y=0.007325827458075647, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.9410344671979884)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.9410344671979884)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.004883884972050431, unit=0.7699372913438086)']
Gen 45: 25 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-10459.33457850979), 1: np.float64(-10459.834578509803), 2: np.float64(1.8076635490036055)}\nTree:  -(-10459.33457850979, -10459.834578509803, sin((cos(x50) x54 (x79 - 1.8076635490036055)), (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-5572.119828794181), 1: np.float64(-11144.247764935924)}\nTree:  (-5572.119828794181 / -11144.247764935924)', 'Equation constants: {0: np.float64(-0.48965202551425735), 1: np.float64(0.08698825797856914), 2: np.float64(-0.13491957889220757), 3: np.float64(1.1114153680858538)}\nTree:  (-0.48965202551425735 + (cos(0.08698825797856914))**((x11)**((-0.13491957889220757)**((x4 - const(sin(x27)))))))', 'Equation constants: {0: np.float64(-0.5089064019624525), 1: np.float64(-0.1202156897423288), 2: np.float64(-0.8168788599588851), 3: np.float64(1.6487086928786074), 4: np.float64(-0.3601019076339942), 6: np.float64(1.0000138049498923), 7: np.float64(1.0001562417518708), 10: np.float64(0.9995369816828602), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.1202156897423288))**((1.0000138049498923 / const((const((1.0001562417518708 * x84)) / x31((0.9995369816828602 / x27)))))))', 'Equation constants: {0: np.float64(-2614.90764390447), 1: np.float64(-2615.4076439044734)}\nTree:  -(const((x84 * x75)), -2615.4076439044734, sin(x54))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376), 4: np.float64(-0.4972014658867021)}\nTree:  (-0.00028989371012806307 * const(/(x2((x66((-1.115757916470376 / x80)) * x1)), (cos(-0.8773904480159094) x17 cos(x54)), *(-0.4972014658867021, x91, (x62 + x2)))))', 'Equation constants: {0: np.float64(-0.5462801955285225), 1: np.float64(-0.10796435763297926), 2: np.float64(-3.8540286890410247)}\nTree:  (-0.5462801955285225 + (cos(-0.10796435763297926))**((x58 / -3.8540286890410247)))', 'Equation constants: {0: np.float64(-0.5035263981497792), 1: np.float64(-0.07518158013406628), 2: np.float64(-0.8035935397855379), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(1.0)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-0.07518158013406628))**((1.0 / const((const((1.0 * x94)) / x31((1.0 / x27)))))))', 'Equation constants: {0: np.float64(-1307.7021766415978), 1: np.float64(-1308.2021766415994), 3: np.float64(1.0), 4: np.float64(1.0)}\nTree:  -(-1307.7021766415978, const((x2((x66(/(x47, x80, (x56 + 1.0))) * x0)) / x17)), (x17 sin sin(1.0)))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.1219521146675064), 3: np.float64(-1.8622677257342208)}\nTree:  -(const((x57)**(-1.1219521146675064)), -654.0189680101762, (x40 sin pow(-1.8622677257342208, -1.8622677257342208, sin(x6))), sin(x10))', 'Equation constants: {0: np.float64(-0.5462802119092012), 1: np.float64(-0.10796436523804398), 2: np.float64(-3.854020643011777)}\nTree:  (-0.5462802119092012 + (cos(-0.10796436523804398))**((x58 / -3.854020643011777)))', 'Equation constants: {0: np.float64(-0.4896520256068203), 1: np.float64(0.0869882575842614), 2: np.float64(-0.13492715192940613), 3: np.float64(1.1114153680858538), 4: np.float64(-1.3688857157965018)}\nTree:  (-0.4896520256068203 + (cos(0.0869882575842614))**((x11)**((-0.13492715192940613)**((x4((x83 / -1.3688857157965018)) - 1.1114153680858538)))))', 'Equation constants: {0: np.float64(-0.5035263981497792), 1: np.float64(-0.07518158013406628), 2: np.float64(-0.8035935397855379), 3: np.float64(1.5905284852836197), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(1.0)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-0.07518158013406628))**((1.0 / const((const((1.0 * x84)) / x31((1.0 / x27)))))))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(-0.3836312871679164)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin(x54(cos(x50)), (x2)**(x44), cos(x81), (x99)**(-0.3836312871679164)), cos(x40))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376), 4: np.float64(1.7262682153209088)}\nTree:  (-0.00028989371012806307 * const((x2(*(x66((-1.115757916470376 / x80)), x0, cos(1.7262682153209088))) / x17(cos(-0.8773904480159094)))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.5363141471423654), 4: np.float64(-1.213853913250699)}\nTree:  -(-653.7726600211632, const((x2((x66((x80 / (x20 + 1.5363141471423654))) * x0)) / x17(cos(-0.8567654379486078)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699), 5: np.float64(0.9300125149802725)}\nTree:  -(-653.7726600211632, const((x2((x66((x80 / (x20 + 1.4676948390955316))) * x0)) / (cos(-0.8567654379486078) x17 sin(0.9300125149802725)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 3: np.float64(1.0), 4: np.float64(1.0)}\nTree:  (-0.00028989371012806307 * const((x2((x66((1.0 / x62)) * x0)) / (1.0 * 1.0))))', 'Equation constants: {0: np.float64(-2614.90764390447), 1: np.float64(-2615.4076439044734)}\nTree:  -(const((x84 * x59)), -2615.4076439044734, sin(x54))', 'Equation constants: {0: np.float64(-5230.080266547112), 1: np.float64(-5230.580266547118), 2: np.float64(1.1213808025836163)}\nTree:  -(-5230.080266547112, -5230.580266547118, (x54 sin (1.1213808025836163)**(1.1213808025836163)))', 'Equation constants: {0: np.float64(-0.5113391813533341), 1: np.float64(-0.13123734782923657), 2: np.float64(-0.7669140230944416), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0016496923402232), 7: np.float64(0.9759194117877898), 10: np.float64(1.0), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.13123734782923657))**((1.0016496923402232 / const((const((0.9759194117877898 * x84)) / x31((1.0 / x56)))))))', 'Equation constants: {0: np.float64(-1307.3895248571914), 1: np.float64(-1307.889524857193), 2: np.float64(-1.1219521146675064), 3: np.float64(-1.8622677257342208)}\nTree:  -(const((x57)**(-1.1219521146675064)), -1307.889524857193, (x40 sin (-1.8622677257342208)**(-1.8622677257342208)), sin(x10))', 'Equation constants: {0: np.float64(-0.4896520248501402), 1: np.float64(0.08698826069948226), 2: np.float64(-0.05401262221480606), 3: np.float64(1.1114153680858538), 4: np.float64(-0.4183133361850899)}\nTree:  (-0.4896520248501402 + ((0.08698826069948226 cos (-0.4183133361850899)**(-0.4183133361850899)))**((x11)**((-0.05401262221480606)**((x4 - const(sin(x27)))))))', 'Equation constants: {0: np.float64(-0.5035274602188314), 1: np.float64(-0.07519290343744017), 2: np.float64(-0.8035940734677132), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(1.0), 11: np.float64(1.0)}\nTree:  ((sin(const((1.0)**(1.0))) const (x92)**(x83)) + (cos(-0.07519290343744017))**((1.0 / const((const((1.0 * x84)) / x31((1.0 / x56)))))))', 'Equation constants: {0: np.float64(-0.4904682083553982), 1: np.float64(0.08355822334345632), 2: np.float64(-0.09831214157623036), 3: np.float64(1.0513217699666175), 4: np.float64(-0.5155675270978199)}\nTree:  +(-0.4904682083553982, (cos(0.08355822334345632))**((x11)**((-0.09831214157623036)**((x4 - 1.0513217699666175)))), cos(-0.5155675270978199))', 'Equation constants: {0: np.float64(-0.5089058726401324), 1: np.float64(-0.12020903925910163), 2: np.float64(-0.8168168487366836), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(0.9999885304923211), 7: np.float64(1.0001555338111046), 10: np.float64(0.9995369816828602), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.12020903925910163))**((0.9999885304923211 / const((const((1.0001555338111046 / x84)) / x31((0.9995369816828602 / x27)))))))', 'Equation constants: {0: np.float64(-0.5462765655381723), 1: np.float64(-0.1079619352695748), 2: np.float64(-3.8551697761818042)}\nTree:  (-0.5462765655381723 + (cos(-0.1079619352695748))**((x58 / -3.8551697761818042)))', 'Equation constants: {0: np.float64(-0.5035263981497792), 1: np.float64(-0.07518158013406628), 2: np.float64(-0.8035935397855379), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 10: np.float64(1.0)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-0.07518158013406628))**((1.0 / const((1.6487086928786074 / x31((1.0 / x27)))))))', 'Equation constants: {0: np.float64(-5230.080266547112), 1: np.float64(-5230.580266547118), 2: np.float64(1.1213808025836163)}\nTree:  -(-5230.080266547112, -5230.580266547118, sin(x68, cos(x81), (1.1213808025836163)**(1.1213808025836163)))', 'Equation constants: {0: np.float64(-10459.33457850979), 1: np.float64(-10459.834578509803), 2: np.float64(1.931892620452313)}\nTree:  -(-10459.33457850979, -10459.834578509803, sin((cos(x50) x54 (x79 - 1.931892620452313)), (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-1307.2055523220765), 1: np.float64(-1307.7055523220783), 2: np.float64(-1.1219521146675064), 3: np.float64(-1.8622677257342208)}\nTree:  -(const((x57)**(-1.1219521146675064)), -1307.7055523220783, (x40 sin (-1.8622677257342208)**(-1.8622677257342208)), sin(x10))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(-0.3474810061050504)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin(x54(cos(x50)), (x2)**(x44), cos(x81), (x99)**(-0.3474810061050504)), cos(x40))', 'Equation constants: {0: np.float64(-0.5035263981497792), 1: np.float64(-0.07518158013406628), 2: np.float64(-0.8035935397855379), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(0.9562841633382406)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-0.07518158013406628))**((1.0 / const((const((1.0 * x94)) / x31((0.9562841633382406 / x27)))))))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.1219521146675064)}\nTree:  -(const((x57)**(-1.1219521146675064)), -654.0189680101762, sin(x40), sin(x10))', 'Equation constants: {0: np.float64(-0.4904682083553982), 1: np.float64(0.08355822334345632), 2: np.float64(-0.09831214157623036), 3: np.float64(1.0513217699666175)}\nTree:  (-0.4904682083553982 + (cos(0.08355822334345632))**(pow(x11, (-0.09831214157623036)**((x4 - 1.0513217699666175)), (x73 - x76))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699), 5: np.float64(0.8781898310103609)}\nTree:  -(-653.7726600211632, const((x2((x66((x80)**((x20 + 1.4676948390955316))) * x0)) / (cos(-0.8567654379486078) x17 sin(0.8781898310103609)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376), 4: np.float64(-0.4507991142800472)}\nTree:  (-0.00028989371012806307 * const(/(x2((x66((-1.115757916470376 / x80)) * x1)), (cos(-0.8773904480159094) x17 cos(x54)), *(-0.4507991142800472, -0.4507991142800472, (x62 + x2)))))', 'Equation constants: {0: np.float64(-1307.7021766415978), 1: np.float64(-1308.2021766415994), 4: np.float64(1.0)}\nTree:  -(-1307.7021766415978, const((x2 / x17)), (x17 sin sin(1.0)))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 4: np.float64(1.0), 5: np.float64(1.0)}\nTree:  -(-653.7726600211632, const((x2((x66 * x0)) / (cos(-0.8567654379486078) x17 sin(1.0)))), (x17 sin sin(1.0)))', 'Equation constants: {0: np.float64(-4536.904409258864), 1: np.float64(-9073.812598416658), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699)}\nTree:  /(-4536.904409258864, const((x2((x66((x80 / (x20 + 1.4676948390955316))) * x0)) / x17(cos(-0.8567654379486078)))), (x17 sin sin(-1.213853913250699)))']
MSE: [np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.250000000019297), np.float64(0.25), np.float64(0.249825355859029), np.float64(0.25), np.float64(0.24985134547772628), np.float64(0.25000000002179235), np.float64(0.24949976549918948), np.float64(0.25000000000000006), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000000006), np.float64(0.25), np.float64(0.24985134547772628), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25000000004786865)]
Generators: ['Generator(mode=real, range=(-2.6414558866575093, 3.1185441133424905), n_g=367, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007325827458075647, unit=0.636311811027941)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=303, sigma_y=0.004883884972050431, unit=0.7699372913438086)', 'Generator(mode=real, range=(-1.2659688175044033, 2.5740311824955966), n_g=367, sigma_y=0.009157284322594557, unit=0.5206187544774061)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.004883884972050431, unit=0.6929435622094278)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.006104856215063039, unit=0.8469310204781896)', 'Generator(mode=real, range=(-1.0062104733639252, 2.8337895266360746), n_g=303, sigma_y=0.01318648942453616, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007325827458075647, unit=0.8554858792708985)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5258775297751578)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=399, sigma_y=0.015823787309443393, unit=0.4302634334524017)', 'Generator(mode=real, range=(-1.7387735650045841, 2.684906434995416), n_g=335, sigma_y=0.007325827458075647, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.9410344671979884)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.9410344671979884)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.004883884972050431, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.788020367937032, 4.123979632062968), n_g=335, sigma_y=0.006104856215063039, unit=0.9410344671979884)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007325827458075647, unit=0.7699372913438086)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.3497998227983588, 3.258200177201641), n_g=399, sigma_y=0.015823787309443393, unit=0.4732897767976419)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=271, sigma_y=0.004883884972050431, unit=0.9410344671979884)', 'Generator(mode=real, range=(-1.0062104733639252, 2.8337895266360746), n_g=303, sigma_y=0.01318648942453616, unit=0.4302634334524017)', 'Generator(mode=real, range=(-2.132147287152612, 4.779852712847387), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.006104856215063039, unit=0.9410344671979884)', 'Generator(mode=real, range=(-2.6414558866575093, 3.1185441133424905), n_g=367, sigma_y=0.007631070268828798, unit=0.4780704816137797)', 'Generator(mode=real, range=(-1.0062104733639252, 2.8337895266360746), n_g=303, sigma_y=0.01318648942453616, unit=0.4780704816137797)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.007631070268828798, unit=0.5784652827526735)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.007325827458075647, unit=0.5258775297751578)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.005860661966460517, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.004883884972050431, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.7387735650045841, 2.684906434995416), n_g=335, sigma_y=0.009157284322594557, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=271, sigma_y=0.003907107977640345, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007325827458075647, unit=0.636311811027941)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.009157284322594557, unit=0.5258775297751577)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5258775297751578)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=303, sigma_y=0.004883884972050431, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.9695850153907624, 3.942414984609237), n_g=335, sigma_y=0.007325827458075647, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.3374306671027614, 4.574569332897238), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007325827458075647, unit=0.6999429921307352)']
Gen 46: 23 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.5035274602188314), 1: np.float64(-0.07519290343744017), 2: np.float64(-0.8035940734677132), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(1.0), 11: np.float64(1.0)}\nTree:  ((sin(const((1.0)**(1.0))) const (x92)**(x83)) + (cos(-0.07519290343744017))**((1.0 / const((const((1.0 * x84)) / x31((1.0 / x56)))))))', 'Equation constants: {0: np.float64(-0.4904682083553982), 1: np.float64(0.08355822334345632), 2: np.float64(-0.09831214157623036), 3: np.float64(1.0513217699666175), 4: np.float64(-0.5155675270978199)}\nTree:  +(-0.4904682083553982, (cos(0.08355822334345632))**((x11)**((-0.09831214157623036)**((x4 - 1.0513217699666175)))), cos(-0.5155675270978199))', 'Equation constants: {0: np.float64(-0.5089058726401324), 1: np.float64(-0.12020903925910163), 2: np.float64(-0.8168168487366836), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(0.9999885304923211), 7: np.float64(1.0001555338111046), 10: np.float64(0.9995369816828602), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.12020903925910163))**((0.9999885304923211 / const((const((1.0001555338111046 / x84)) / x31((0.9995369816828602 / x27)))))))', 'Equation constants: {0: np.float64(-0.5462765655381723), 1: np.float64(-0.1079619352695748), 2: np.float64(-3.8551697761818042)}\nTree:  (-0.5462765655381723 + (cos(-0.1079619352695748))**((x58 / -3.8551697761818042)))', 'Equation constants: {0: np.float64(-0.5035263981497792), 1: np.float64(-0.07518158013406628), 2: np.float64(-0.8035935397855379), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 10: np.float64(1.0)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-0.07518158013406628))**((1.0 / const((1.6487086928786074 / x31((1.0 / x27)))))))', 'Equation constants: {0: np.float64(-5230.080266547112), 1: np.float64(-5230.580266547118), 2: np.float64(1.1213808025836163)}\nTree:  -(-5230.080266547112, -5230.580266547118, sin(x68, cos(x81), (1.1213808025836163)**(1.1213808025836163)))', 'Equation constants: {0: np.float64(-10459.33457850979), 1: np.float64(-10459.834578509803), 2: np.float64(1.931892620452313)}\nTree:  -(-10459.33457850979, -10459.834578509803, sin((cos(x50) x54 (x79 - 1.931892620452313)), (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-1307.2055523220765), 1: np.float64(-1307.7055523220783), 2: np.float64(-1.1219521146675064), 3: np.float64(-1.8622677257342208)}\nTree:  -(const((x57)**(-1.1219521146675064)), -1307.7055523220783, (x40 sin (-1.8622677257342208)**(-1.8622677257342208)), sin(x10))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(-0.3474810061050504)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin(x54(cos(x50)), (x2)**(x44), cos(x81), (x99)**(-0.3474810061050504)), cos(x40))', 'Equation constants: {0: np.float64(-0.5035263981497792), 1: np.float64(-0.07518158013406628), 2: np.float64(-0.8035935397855379), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(0.9562841633382406)}\nTree:  (const(sin(-0.2435195169519689)) + (cos(-0.07518158013406628))**((1.0 / const((const((1.0 * x94)) / x31((0.9562841633382406 / x27)))))))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.1219521146675064)}\nTree:  -(const((x57)**(-1.1219521146675064)), -654.0189680101762, sin(x40), sin(x10))', 'Equation constants: {0: np.float64(-0.4904682083553982), 1: np.float64(0.08355822334345632), 2: np.float64(-0.09831214157623036), 3: np.float64(1.0513217699666175)}\nTree:  (-0.4904682083553982 + (cos(0.08355822334345632))**(pow(x11, (-0.09831214157623036)**((x4 - 1.0513217699666175)), (x73 - x76))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699), 5: np.float64(0.8781898310103609)}\nTree:  -(-653.7726600211632, const((x2((x66((x80)**((x20 + 1.4676948390955316))) * x0)) / (cos(-0.8567654379486078) x17 sin(0.8781898310103609)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376), 4: np.float64(-0.4507991142800472)}\nTree:  (-0.00028989371012806307 * const(/(x2((x66((-1.115757916470376 / x80)) * x1)), (cos(-0.8773904480159094) x17 cos(x54)), *(-0.4507991142800472, -0.4507991142800472, (x62 + x2)))))', 'Equation constants: {0: np.float64(-1307.7021766415978), 1: np.float64(-1308.2021766415994), 4: np.float64(1.0)}\nTree:  -(-1307.7021766415978, const((x2 / x17)), (x17 sin sin(1.0)))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 4: np.float64(1.0), 5: np.float64(1.0)}\nTree:  -(-653.7726600211632, const((x2((x66 * x0)) / (cos(-0.8567654379486078) x17 sin(1.0)))), (x17 sin sin(1.0)))', 'Equation constants: {0: np.float64(-4536.904409258864), 1: np.float64(-9073.812598416658), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699)}\nTree:  /(-4536.904409258864, const((x2((x66((x80 / (x20 + 1.4676948390955316))) * x0)) / x17(cos(-0.8567654379486078)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.2707067329382902), 4: np.float64(-0.4972014658867021)}\nTree:  (-0.00028989371012806307 * const(/(x2((x66((-1.2707067329382902 / x80)) * x1)), (cos(-0.8773904480159094) x17 cos(x54)), *(-0.4972014658867021, x91, (x62 + x2)))))', 'Equation constants: {0: np.float64(-1307.2055523220765), 1: np.float64(-1307.7055523220783), 2: np.float64(-1.1219521146675064), 3: np.float64(-1.8622677257342208)}\nTree:  -(const((x57)**(-1.1219521146675064)), -1307.7055523220783, (x40 sin (-1.8622677257342208)**(-1.8622677257342208)), sin(x10))', 'Equation constants: {0: np.float64(-0.5472784938376111), 1: np.float64(-0.10864311250313488), 2: np.float64(-3.561516483830328), 3: np.float64(-0.22079550412423776)}\nTree:  (const((-0.22079550412423776)**(x48)) + (cos(-0.10864311250313488))**((x58 / -3.561516483830328)))', 'Equation constants: {0: np.float64(-1307.7021766415978), 1: np.float64(-1308.2021766415994), 4: np.float64(1.0)}\nTree:  -(-1307.7021766415978, const((x2 / x17)), (x17 sin sin(1.0)))', 'Equation constants: {0: np.float64(-10459.33457850979), 1: np.float64(-10459.834578509803), 2: np.float64(1.931892620452313)}\nTree:  -(-10459.33457850979, -10459.834578509803, sin((cos(x50) x54 (x79 - 1.931892620452313)), (x2)**(x79), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-0.5462802590186535), 1: np.float64(-0.10796439223104123), 2: np.float64(-3.8540017932034547)}\nTree:  (-0.5462802590186535 + (cos(-0.10796439223104123))**((x58 / -3.8540017932034547)))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(-0.3474810061050504), 3: np.float64(0.22915360496212367)}\nTree:  -(-5229.560896805597, const((x32 + 0.22915360496212367)), sin(x54(cos(x50)), (x2)**(x44), cos(x81), (x99)**(-0.3474810061050504)), cos(x40))', 'Equation constants: {0: np.float64(-2615.697939055784), 1: np.float64(-2616.197939055787), 4: np.float64(1.0)}\nTree:  -(-2615.697939055784, const((x2 / x17)), (x17 sin sin(1.0)))', 'Equation constants: {0: np.float64(-0.5120808040394904), 1: np.float64(-0.13555186192503021), 2: np.float64(-0.7685588220001208), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0016564766512832), 7: np.float64(0.9997126396386876), 10: np.float64(1.0016496923402232), 11: np.float64(1.0)}\nTree:  (const((const((1.0)**(1.0)) sin (x33 / x68))) + (cos(-0.13555186192503021))**((1.0016564766512832 / const((const((0.9997126396386876 * x84)) / x31((1.0016496923402232 / x56)))))))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(-0.3836312871679164)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin(x54(cos(x50)), cos(x81), (x99)**(-0.3836312871679164)), cos(x40))', 'Equation constants: {0: np.float64(-0.511313834179694), 1: np.float64(-0.13123014508873282), 2: np.float64(-0.7671078728781879), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(0.9998049905271171), 7: np.float64(0.9997096750614748), 10: np.float64(1.0016496923402232), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.13123014508873282))**((0.9998049905271171 / const((const((0.9997096750614748 * x84)) / x31((1.0016496923402232 / x56)))))))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8921713253359098), 3: np.float64(-1.115757916470376), 4: np.float64(1.7262682153209088)}\nTree:  (-0.00028989371012806307 * const((x2(*(x66((-1.115757916470376 / x80)), x0, cos(1.7262682153209088))) / x17(cos(-0.8921713253359098)))))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(-0.3474810061050504), 3: np.float64(0.014001827850278481)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin(x54(cos(x50)), (x2((0.014001827850278481 + x69)))**(x44), cos(x81), (x99)**(-0.3474810061050504)), cos(x40))', 'Equation constants: {0: np.float64(-5230.080266547112), 1: np.float64(-5230.580266547118), 2: np.float64(1.1213808025836163), 3: np.float64(0.11249790806891458)}\nTree:  -(-5230.080266547112, -5230.580266547118, sin(x68, cos(x81), (1.1213808025836163)**(const(sin(0.11249790806891458)))))', 'Equation constants: {0: np.float64(-10459.33457850979), 1: np.float64(-10459.834578509803), 2: np.float64(1.8076635490036055)}\nTree:  -(-10459.33457850979, -10459.834578509803, ((cos(x50) x54 (x79 - 1.8076635490036055)) sin (x2)**(x67)), cos(x40))', 'Equation constants: {0: np.float64(-1307.2055523220765), 1: np.float64(-1307.7055523220783), 2: np.float64(-1.1219521146675064), 3: np.float64(-1.8622677257342208)}\nTree:  -(const((x57)**(-1.1219521146675064)), -1307.7055523220783, (x40 sin (-1.8622677257342208)**(-1.8622677257342208)), sin(x15))', 'Equation constants: {0: np.float64(-5229.984139050063), 1: np.float64(-5230.48413905007)}\nTree:  -(const((x84 * x59)), -5230.48413905007, sin(x54))', 'Equation constants: {0: np.float64(-2614.90764390447), 1: np.float64(-2615.4076439044734), 2: np.float64(-1.6063664113706722)}\nTree:  -(const((x84 * x59)), -2615.4076439044734, (x54 sin sin(-1.6063664113706722)))', 'Equation constants: {0: np.float64(-3686.2360829957197), 1: np.float64(-7372.472093061857), 2: np.float64(-0.8567654379486078), 4: np.float64(1.0)}\nTree:  /(-3686.2360829957197, const((x2 / x17(cos(-0.8567654379486078)))), (x17 sin sin(1.0)))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.1219521146675064), 3: np.float64(-1.8622677257342208)}\nTree:  -(const((x57)**(-1.1219521146675064)), -654.0189680101762, (x40 sin (-1.8622677257342208)**(-1.8622677257342208)), sin(x10))', 'Equation constants: {0: np.float64(-10460.563331706118), 1: np.float64(-10461.063331706133), 2: np.float64(1.1213808025836163)}\nTree:  -(-10460.563331706118, -10461.063331706133, (x54 sin (1.1213808025836163)**(1.1213808025836163)))', 'Equation constants: {0: np.float64(-0.4904682083524764), 1: np.float64(0.08355822334274199), 2: np.float64(-0.008315521127179107), 3: np.float64(1.0513217699666175), 4: np.float64(-0.5155675270978199)}\nTree:  +(-0.4904682083524764, (cos(0.08355822334274199))**((x11)**((-0.008315521127179107)**((x4 - 1.0513217699666175)))), cos(-0.5155675270978199))', 'Equation constants: {0: np.float64(-0.5035274602188314), 1: np.float64(-0.07519290343744017), 2: np.float64(-0.8035940734677132), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(1.0), 11: np.float64(1.0)}\nTree:  ((sin(const((1.0)**(1.0))) const (x92)**(x83)) + (cos(-0.07519290343744017))**((1.0 / const((const((1.0 * x84)) / x31((1.0 / x99)))))))']
MSE: [np.float64(0.25), np.float64(0.25), np.float64(0.2494987639526131), np.float64(0.25), np.float64(0.25), np.float64(0.24949976316583955), np.float64(0.25), np.float64(0.25), np.float64(0.25000000001859074), np.float64(0.25), np.float64(0.25000000001936856), np.float64(0.25), np.float64(0.7706165497718572), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.7299044146519239), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.249851345477718), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.007631070268828798, unit=0.5784652827526735)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.007325827458075647, unit=0.5258775297751578)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.005860661966460517, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.004883884972050431, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.7387735650045841, 2.684906434995416), n_g=335, sigma_y=0.009157284322594557, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=271, sigma_y=0.003907107977640345, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007325827458075647, unit=0.636311811027941)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.009157284322594557, unit=0.5258775297751577)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5258775297751578)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=303, sigma_y=0.004883884972050431, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.9695850153907624, 3.942414984609237), n_g=335, sigma_y=0.007325827458075647, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.3374306671027614, 4.574569332897238), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007325827458075647, unit=0.6999429921307352)', 'Generator(mode=real, range=(-1.0062104733639252, 2.8337895266360746), n_g=303, sigma_y=0.01054919153962893, unit=0.4302634334524017)', 'Generator(mode=real, range=(-1.0062104733639252, 2.8337895266360746), n_g=303, sigma_y=0.01318648942453616, unit=0.4302634334524017)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007325827458075647, unit=0.636311811027941)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.005860661966460518, unit=0.7699372913438086)', 'Generator(mode=real, range=(-1.4409472871526123, 4.088652712847387), n_g=335, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.296561893336742, 4.615438106663257), n_g=335, sigma_y=0.004883884972050431, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.3374306671027614, 4.574569332897238), n_g=303, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.007631070268828798, unit=0.5206187544774061)', 'Generator(mode=real, range=(-2.1811415650045842, 3.127274434995416), n_g=335, sigma_y=0.009157284322594557, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007325827458075647, unit=0.7699372913438086)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.005860661966460517, unit=0.6929435622094278)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=271, sigma_y=0.004883884972050431, unit=0.9410344671979884)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.005860661966460517, unit=0.6929435622094278)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.004883884972050431, unit=0.7622379184303706)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.006104856215063039, unit=0.5258775297751577)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=335, sigma_y=0.005860661966460517, unit=0.7699372913438086)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007325827458075647, unit=0.6999429921307352)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=271, sigma_y=0.004883884972050431, unit=0.9410344671979884)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.005860661966460517, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.9695850153907624, 3.942414984609237), n_g=335, sigma_y=0.007325827458075647, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.004883884972050431, unit=0.6236492059884851)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.007631070268828798, unit=0.6363118110279409)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=303, sigma_y=0.005860661966460517, unit=0.7699372913438086)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.005860661966460518, unit=0.6999429921307352)']
Gen 47: 24 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-2615.697939055784), 1: np.float64(-2616.197939055787), 4: np.float64(1.0)}\nTree:  -(-2615.697939055784, const((x2 / x17)), (x17 sin sin(1.0)))', 'Equation constants: {0: np.float64(-0.5120808040394904), 1: np.float64(-0.13555186192503021), 2: np.float64(-0.7685588220001208), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0016564766512832), 7: np.float64(0.9997126396386876), 10: np.float64(1.0016496923402232), 11: np.float64(1.0)}\nTree:  (const((const((1.0)**(1.0)) sin (x33 / x68))) + (cos(-0.13555186192503021))**((1.0016564766512832 / const((const((0.9997126396386876 * x84)) / x31((1.0016496923402232 / x56)))))))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(-0.3836312871679164)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin(x54(cos(x50)), cos(x81), (x99)**(-0.3836312871679164)), cos(x40))', 'Equation constants: {0: np.float64(-0.511313834179694), 1: np.float64(-0.13123014508873282), 2: np.float64(-0.7671078728781879), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(0.9998049905271171), 7: np.float64(0.9997096750614748), 10: np.float64(1.0016496923402232), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.13123014508873282))**((0.9998049905271171 / const((const((0.9997096750614748 * x84)) / x31((1.0016496923402232 / x56)))))))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8921713253359098), 3: np.float64(-1.115757916470376), 4: np.float64(1.7262682153209088)}\nTree:  (-0.00028989371012806307 * const((x2(*(x66((-1.115757916470376 / x80)), x0, cos(1.7262682153209088))) / x17(cos(-0.8921713253359098)))))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(-0.3474810061050504), 3: np.float64(0.014001827850278481)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin(x54(cos(x50)), (x2((0.014001827850278481 + x69)))**(x44), cos(x81), (x99)**(-0.3474810061050504)), cos(x40))', 'Equation constants: {0: np.float64(-5230.080266547112), 1: np.float64(-5230.580266547118), 2: np.float64(1.1213808025836163), 3: np.float64(0.11249790806891458)}\nTree:  -(-5230.080266547112, -5230.580266547118, sin(x68, cos(x81), (1.1213808025836163)**(const(sin(0.11249790806891458)))))', 'Equation constants: {0: np.float64(-10459.33457850979), 1: np.float64(-10459.834578509803), 2: np.float64(1.8076635490036055)}\nTree:  -(-10459.33457850979, -10459.834578509803, ((cos(x50) x54 (x79 - 1.8076635490036055)) sin (x2)**(x67)), cos(x40))', 'Equation constants: {0: np.float64(-1307.2055523220765), 1: np.float64(-1307.7055523220783), 2: np.float64(-1.1219521146675064), 3: np.float64(-1.8622677257342208)}\nTree:  -(const((x57)**(-1.1219521146675064)), -1307.7055523220783, (x40 sin (-1.8622677257342208)**(-1.8622677257342208)), sin(x15))', 'Equation constants: {0: np.float64(-5229.984139050063), 1: np.float64(-5230.48413905007)}\nTree:  -(const((x84 * x59)), -5230.48413905007, sin(x54))', 'Equation constants: {0: np.float64(-2614.90764390447), 1: np.float64(-2615.4076439044734), 2: np.float64(-1.6063664113706722)}\nTree:  -(const((x84 * x59)), -2615.4076439044734, (x54 sin sin(-1.6063664113706722)))', 'Equation constants: {0: np.float64(-3686.2360829957197), 1: np.float64(-7372.472093061857), 2: np.float64(-0.8567654379486078), 4: np.float64(1.0)}\nTree:  /(-3686.2360829957197, const((x2 / x17(cos(-0.8567654379486078)))), (x17 sin sin(1.0)))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.1219521146675064), 3: np.float64(-1.8622677257342208)}\nTree:  -(const((x57)**(-1.1219521146675064)), -654.0189680101762, (x40 sin (-1.8622677257342208)**(-1.8622677257342208)), sin(x10))', 'Equation constants: {0: np.float64(-10460.563331706118), 1: np.float64(-10461.063331706133), 2: np.float64(1.1213808025836163)}\nTree:  -(-10460.563331706118, -10461.063331706133, (x54 sin (1.1213808025836163)**(1.1213808025836163)))', 'Equation constants: {0: np.float64(-0.4904682083524764), 1: np.float64(0.08355822334274199), 2: np.float64(-0.008315521127179107), 3: np.float64(1.0513217699666175), 4: np.float64(-0.5155675270978199)}\nTree:  +(-0.4904682083524764, (cos(0.08355822334274199))**((x11)**((-0.008315521127179107)**((x4 - 1.0513217699666175)))), cos(-0.5155675270978199))', 'Equation constants: {0: np.float64(-0.5035274602188314), 1: np.float64(-0.07519290343744017), 2: np.float64(-0.8035940734677132), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(1.0), 11: np.float64(1.0)}\nTree:  ((sin(const((1.0)**(1.0))) const (x92)**(x83)) + (cos(-0.07519290343744017))**((1.0 / const((const((1.0 * x84)) / x31((1.0 / x99)))))))', 'Equation constants: {0: np.float64(-20918.94659607883), 1: np.float64(-20919.44659607886), 2: np.float64(1.931892620452313)}\nTree:  -(-20918.94659607883, -20919.44659607886, sin((cos(x50) x54 (x79 - 1.931892620452313)), (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(-0.3836312871679164)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin(x54(cos(x50)), cos(x81), (x60)**(-0.3836312871679164)), cos(x40))', 'Equation constants: {0: np.float64(-0.5111360676269994), 1: np.float64(-0.13031904291868165), 2: np.float64(-0.7681851459844985), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(0.9994287912131727), 7: np.float64(0.9998419572673601), 10: np.float64(1.0016564766512832), 11: np.float64(1.0)}\nTree:  (const((const((1.0)**(1.0)) sin (x33 / x68))) + (cos(-0.13031904291868165))**((0.9994287912131727 / const((const((0.9998419572673601 * x84)) / x31((1.0016564766512832 / x56)))))))', 'Equation constants: {0: np.float64(-1307.7021766415978), 1: np.float64(-1308.2021766415994), 4: np.float64(1.0)}\nTree:  -(-1307.7021766415978, const(/(x2, x17, cos(x95))), (x17 sin sin(1.0)))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376), 4: np.float64(-0.4507991142800472)}\nTree:  (-0.00028989371012806307 * const(/(x2((x66((-1.115757916470376 / x80)) * x1)), (cos(-0.8773904480159094) x17 cos(x54)), *(const((x13 / x95)), -0.4507991142800472, (x62 + x2)))))', 'Equation constants: {0: np.float64(-2614.90764390447), 1: np.float64(-2615.4076439044734), 2: np.float64(-1.6063664113706722)}\nTree:  -(-2614.90764390447, -2615.4076439044734, (x54 sin sin(-1.6063664113706722)))', 'Equation constants: {0: np.float64(-1307.7021766415978), 1: np.float64(-1308.2021766415994), 4: np.float64(1.0)}\nTree:  -(-1307.7021766415978, const((x2 / x17)), (x17 sin cos(1.0)))', 'Equation constants: {0: np.float64(-0.4904682083553982), 1: np.float64(0.08355822334345632), 2: np.float64(-0.09831214157623036), 3: np.float64(1.0513217699666175), 4: np.float64(-0.5155675270978199)}\nTree:  +(-0.4904682083553982, (cos(0.08355822334345632))**((x11)**((-0.09831214157623036)**((x4 - 1.0513217699666175)))), cos(-0.5155675270978199))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699), 5: np.float64(0.8781898310103609)}\nTree:  -(-653.7726600211632, const((x2((x66((x80)**(+(x20, 1.4676948390955316, sin(x87)))) * x0)) / (cos(-0.8567654379486078) x17 sin(0.8781898310103609)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-2615.697939055784), 1: np.float64(-2616.197939055787), 4: np.float64(1.0), 5: np.float64(1.0)}\nTree:  -(-2615.697939055784, const((x2 / x17)), (x17((1.0 + x26)) sin sin(1.0)))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.1219521146675064), 3: np.float64(-1.8622677257342208)}\nTree:  -(const((x57)**(-1.1219521146675064)), const(cos(x1)), (x40 sin (-1.8622677257342208)**(-1.8622677257342208)), sin(x10))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699), 5: np.float64(0.8781898310103609), 6: np.float64(1.1186075324196083)}\nTree:  -(-653.7726600211632, const((x2((x66((x80)**((x20((1.1186075324196083 - 1.1186075324196083)) + 1.4676948390955316))) * x0)) / (cos(-0.8567654379486078) x17 sin(0.8781898310103609)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-2615.697939055784), 1: np.float64(-2616.197939055787)}\nTree:  -(-2615.697939055784, const((x2 / x17)), sin(x17))', 'Equation constants: {0: np.float64(-1307.7021766415978), 1: np.float64(-1308.2021766415994)}\nTree:  (-1307.7021766415978 - const((x2 / x17)))', 'Equation constants: {0: np.float64(-0.5090941315527933), 1: np.float64(-0.12145159880350545), 2: np.float64(-0.8167194216768107), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0000736961770995), 10: np.float64(0.999973996158063), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.12145159880350545))**((1.0000736961770995 / const((1.6487086928786074 / x31((0.999973996158063 / x27)))))))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(-0.3836312871679164)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin((cos(x50) x54 (x28)**(x30)), cos(x81), (x99)**(-0.3836312871679164)), cos(x40))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699), 5: np.float64(0.8855458654671499)}\nTree:  -(-653.7726600211632, const((x2((x66((x80)**((x20 + 1.4676948390955316))) * x0)) / (cos(-0.8567654379486078) x17 sin(0.8855458654671499)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-0.5035274602188314), 1: np.float64(-0.07519290343744017), 2: np.float64(-0.8035940734677132), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(1.0), 11: np.float64(1.0), 12: np.float64(1.0)}\nTree:  ((sin(const((1.0)**(1.0))) const (x92)**(x83)) + pow(cos(-0.07519290343744017), (1.0 / const((const((1.0 * x84)) / x31((1.0 / x99))))), (1.0)**(1.0)))', 'Equation constants: {0: np.float64(-3119.1227368598916), 1: np.float64(-6238.245546649328), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699), 5: np.float64(1.8961101095380664)}\nTree:  /(-3119.1227368598916, const((x2((x66((x80 / +(x20, 1.4676948390955316, (1.8961101095380664 * x97)))) * x0)) / x17(cos(-0.8567654379486078)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-0.5035274602188314), 1: np.float64(-0.07519290343744017), 2: np.float64(-0.8035940734677132), 3: np.float64(1.6487086928786074), 4: np.float64(-0.20929818710661352), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(1.0), 11: np.float64(1.0)}\nTree:  ((sin(const((1.0)**(1.0))) const (x92)**(x83)) + (cos(-0.07519290343744017))**((1.0 / const((const((1.0 * x84)) / x31((1.0 / x99)))))))', 'Equation constants: {0: np.float64(-0.5112958690067041), 1: np.float64(-0.13101490807683117), 2: np.float64(-0.7665261656548455), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0007618404956191), 7: np.float64(0.9997076455736741), 10: np.float64(1.000563618159379), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.13101490807683117))**((1.0007618404956191 / const((const((0.9997076455736741 * x84)) / x31((1.000563618159379 / x56)))))))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.0566899537409098)}\nTree:  -(const((x57)**(-1.0566899537409098)), -654.0189680101762, sin(x40), sin(x10))', 'Equation constants: {0: np.float64(-10459.33457850979), 1: np.float64(-10459.834578509803), 2: np.float64(1.8399356386310972)}\nTree:  -(-10459.33457850979, -10459.834578509803, ((cos(x50) x54 (x79 - 1.8399356386310972)) sin (x2)**(x67)), cos(x40))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376), 4: np.float64(-0.4507991142800472), 5: np.float64(-1.1370144049218474)}\nTree:  (-0.00028989371012806307 * const(/(x2((x66((-1.115757916470376 / x80)) * x1)), (cos(-0.8773904480159094) x17 cos(x54)), *(-0.4507991142800472, -0.4507991142800472, (x62((-1.1370144049218474 * x22)) + x2)))))']
MSE: [np.float64(0.25), np.float64(0.25), np.float64(0.25000000002357986), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.24985134547772628), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000000626), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25000000000000006), np.float64(0.25), np.float64(0.2500000000253127), np.float64(0.25), np.float64(0.7706165502194113), np.float64(0.25), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.005860661966460517, unit=0.6929435622094278)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=271, sigma_y=0.004883884972050431, unit=0.9410344671979884)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=335, sigma_y=0.005860661966460517, unit=0.6929435622094278)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.004883884972050431, unit=0.7622379184303706)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.006104856215063039, unit=0.5258775297751577)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=335, sigma_y=0.005860661966460517, unit=0.7699372913438086)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007325827458075647, unit=0.6999429921307352)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=271, sigma_y=0.004883884972050431, unit=0.9410344671979884)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.005860661966460517, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.9695850153907624, 3.942414984609237), n_g=335, sigma_y=0.007325827458075647, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.004883884972050431, unit=0.6236492059884851)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.007631070268828798, unit=0.6363118110279409)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=303, sigma_y=0.005860661966460517, unit=0.7699372913438086)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.005860661966460518, unit=0.6999429921307352)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=271, sigma_y=0.003907107977640345, unit=0.9410344671979884)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.006104856215063039, unit=0.5206187544774061)', 'Generator(mode=real, range=(-2.0246600145797204, 3.5049399854202794), n_g=367, sigma_y=0.007325827458075647, unit=0.636311811027941)', 'Generator(mode=real, range=(-2.054349114006445, 4.8576508859935545), n_g=303, sigma_y=0.007325827458075647, unit=0.5258775297751578)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007325827458075647, unit=0.6999429921307352)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.005860661966460517, unit=0.6236492059884851)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.009157284322594557, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=367, sigma_y=0.006104856215063039, unit=0.5258775297751577)', 'Generator(mode=real, range=(-1.6462306671027616, 3.8833693328972383), n_g=303, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.4349431031187492, 4.094656896881251), n_g=335, sigma_y=0.004883884972050431, unit=0.7622379184303706)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.007325827458075647, unit=0.5258775297751578)', 'Generator(mode=real, range=(-1.7387735650045841, 2.684906434995416), n_g=335, sigma_y=0.009157284322594557, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.009157284322594557, unit=0.5784652827526735)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5258775297751578)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.005860661966460517, unit=0.6929435622094278)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007325827458075647, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=271, sigma_y=0.004883884972050431, unit=1.0351379139177874)', 'Generator(mode=real, range=(-2.3415548151209036, 2.4584451848790962), n_g=399, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007032794359752621, unit=0.7699372913438086)', 'Generator(mode=real, range=(-1.7387735650045841, 2.684906434995416), n_g=335, sigma_y=0.009157284322594557, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.005860661966460517, unit=0.6929435622094278)', 'Generator(mode=real, range=(-1.0062104733639252, 2.8337895266360746), n_g=303, sigma_y=0.01054919153962893, unit=0.4302634334524017)', 'Generator(mode=real, range=(-1.8347639254835997, 3.6948360745164), n_g=367, sigma_y=0.007325827458075647, unit=0.636311811027941)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.5258775297751578)', 'Generator(mode=real, range=(-3.079963633950449, 3.8320363660495502), n_g=271, sigma_y=0.004883884972050431, unit=0.9410344671979884)']
Gen 48: 22 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-1307.7021766415978), 1: np.float64(-1308.2021766415994), 4: np.float64(1.0)}\nTree:  -(-1307.7021766415978, const((x2 / x17)), (x17 sin cos(1.0)))', 'Equation constants: {0: np.float64(-0.4904682083553982), 1: np.float64(0.08355822334345632), 2: np.float64(-0.09831214157623036), 3: np.float64(1.0513217699666175), 4: np.float64(-0.5155675270978199)}\nTree:  +(-0.4904682083553982, (cos(0.08355822334345632))**((x11)**((-0.09831214157623036)**((x4 - 1.0513217699666175)))), cos(-0.5155675270978199))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699), 5: np.float64(0.8781898310103609)}\nTree:  -(-653.7726600211632, const((x2((x66((x80)**(+(x20, 1.4676948390955316, sin(x87)))) * x0)) / (cos(-0.8567654379486078) x17 sin(0.8781898310103609)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-2615.697939055784), 1: np.float64(-2616.197939055787), 4: np.float64(1.0), 5: np.float64(1.0)}\nTree:  -(-2615.697939055784, const((x2 / x17)), (x17((1.0 + x26)) sin sin(1.0)))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.1219521146675064), 3: np.float64(-1.8622677257342208)}\nTree:  -(const((x57)**(-1.1219521146675064)), const(cos(x1)), (x40 sin (-1.8622677257342208)**(-1.8622677257342208)), sin(x10))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699), 5: np.float64(0.8781898310103609), 6: np.float64(1.1186075324196083)}\nTree:  -(-653.7726600211632, const((x2((x66((x80)**((x20((1.1186075324196083 - 1.1186075324196083)) + 1.4676948390955316))) * x0)) / (cos(-0.8567654379486078) x17 sin(0.8781898310103609)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-2615.697939055784), 1: np.float64(-2616.197939055787)}\nTree:  -(-2615.697939055784, const((x2 / x17)), sin(x17))', 'Equation constants: {0: np.float64(-1307.7021766415978), 1: np.float64(-1308.2021766415994)}\nTree:  (-1307.7021766415978 - const((x2 / x17)))', 'Equation constants: {0: np.float64(-0.5090941315527933), 1: np.float64(-0.12145159880350545), 2: np.float64(-0.8167194216768107), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0000736961770995), 10: np.float64(0.999973996158063), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.12145159880350545))**((1.0000736961770995 / const((1.6487086928786074 / x31((0.999973996158063 / x27)))))))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(-0.3836312871679164)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin((cos(x50) x54 (x28)**(x30)), cos(x81), (x99)**(-0.3836312871679164)), cos(x40))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699), 5: np.float64(0.8855458654671499)}\nTree:  -(-653.7726600211632, const((x2((x66((x80)**((x20 + 1.4676948390955316))) * x0)) / (cos(-0.8567654379486078) x17 sin(0.8855458654671499)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-0.5035274602188314), 1: np.float64(-0.07519290343744017), 2: np.float64(-0.8035940734677132), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(1.0), 11: np.float64(1.0), 12: np.float64(1.0)}\nTree:  ((sin(const((1.0)**(1.0))) const (x92)**(x83)) + pow(cos(-0.07519290343744017), (1.0 / const((const((1.0 * x84)) / x31((1.0 / x99))))), (1.0)**(1.0)))', 'Equation constants: {0: np.float64(-3119.1227368598916), 1: np.float64(-6238.245546649328), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699), 5: np.float64(1.8961101095380664)}\nTree:  /(-3119.1227368598916, const((x2((x66((x80 / +(x20, 1.4676948390955316, (1.8961101095380664 * x97)))) * x0)) / x17(cos(-0.8567654379486078)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-0.5035274602188314), 1: np.float64(-0.07519290343744017), 2: np.float64(-0.8035940734677132), 3: np.float64(1.6487086928786074), 4: np.float64(-0.20929818710661352), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(1.0), 11: np.float64(1.0)}\nTree:  ((sin(const((1.0)**(1.0))) const (x92)**(x83)) + (cos(-0.07519290343744017))**((1.0 / const((const((1.0 * x84)) / x31((1.0 / x99)))))))', 'Equation constants: {0: np.float64(-0.5112958690067041), 1: np.float64(-0.13101490807683117), 2: np.float64(-0.7665261656548455), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0007618404956191), 7: np.float64(0.9997076455736741), 10: np.float64(1.000563618159379), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.13101490807683117))**((1.0007618404956191 / const((const((0.9997076455736741 * x84)) / x31((1.000563618159379 / x56)))))))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.0566899537409098)}\nTree:  -(const((x57)**(-1.0566899537409098)), -654.0189680101762, sin(x40), sin(x10))', 'Equation constants: {0: np.float64(-10459.33457850979), 1: np.float64(-10459.834578509803), 2: np.float64(1.8399356386310972)}\nTree:  -(-10459.33457850979, -10459.834578509803, ((cos(x50) x54 (x79 - 1.8399356386310972)) sin (x2)**(x67)), cos(x40))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 2: np.float64(-0.8773904480159094), 3: np.float64(-1.115757916470376), 4: np.float64(-0.4507991142800472), 5: np.float64(-1.1370144049218474)}\nTree:  (-0.00028989371012806307 * const(/(x2((x66((-1.115757916470376 / x80)) * x1)), (cos(-0.8773904480159094) x17 cos(x54)), *(-0.4507991142800472, -0.4507991142800472, (x62((-1.1370144049218474 * x22)) + x2)))))', 'Equation constants: {0: np.float64(-10459.222543285592), 1: np.float64(-10459.722543285605), 2: np.float64(-0.3474810061050504), 3: np.float64(0.014001827850278481)}\nTree:  -(-10459.222543285592, -10459.722543285605, sin(x54(cos(x50)), (x2((0.014001827850278481 + x69)))**(x44), cos(x81), (x99)**(-0.3474810061050504)), cos(x40))', 'Equation constants: {0: np.float64(-1307.8704504884456), 1: np.float64(-1308.3704504884472), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699), 5: np.float64(0.8781898310103609)}\nTree:  -(-1307.8704504884456, const((x2((x66((x80)**(+(x20, 1.4676948390955316, sin(x87)))) * x0)) / (cos(-0.8567654379486078) x17 sin(0.8781898310103609)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-0.5111890353278787), 1: np.float64(-0.13060734296519308), 2: np.float64(-0.7685734919028189), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.000175477936752), 10: np.float64(0.9998526547006031), 11: np.float64(1.0)}\nTree:  (const((const((1.0)**(1.0)) sin (x33 / x68))) + (cos(-0.13060734296519308))**((1.000175477936752 / const((1.6487086928786074 / x31((0.9998526547006031 / x56)))))))', 'Equation constants: {0: np.float64(-10459.33457850979), 1: np.float64(-10459.834578509803), 2: np.float64(1.8798099195082916)}\nTree:  -(-10459.33457850979, -10459.834578509803, ((cos(x50) x54 (x79 - 1.8798099195082916)) sin (x2)**(x67)), cos(x40))', 'Equation constants: {0: np.float64(-0.5092202008558868), 1: np.float64(-0.12228766286610361), 2: np.float64(-0.8167136080865913), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(0.9999903101707329), 10: np.float64(1.0000455384988922), 11: np.float64(1.0), 12: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.12228766286610361))**((0.9999903101707329 / const((1.6487086928786074 / ((1.0000455384988922 / x27) x31 cos(1.0)))))))', 'Equation constants: {0: np.float64(-4678.689236549257), 1: np.float64(-9357.402641464767), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699), 5: np.float64(1.8961101095380664)}\nTree:  /(-4678.689236549257, const((x2((x66((x80 / +(x20, 1.4676948390955316, (1.8961101095380664 * x97)))) * x0)) / x17(cos(-0.8567654379486078)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-1307.2055523220765), 1: np.float64(-1307.7055523220783), 2: np.float64(-1.179393726837267), 3: np.float64(-1.8622677257342208)}\nTree:  -(const((x57)**(-1.179393726837267)), -1307.7055523220783, (x40 sin (-1.8622677257342208)**(-1.8622677257342208)), sin(x15))', 'Equation constants: {0: np.float64(-1754.5173500819806), 1: np.float64(-3509.0380832660217), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699), 5: np.float64(1.8961101095380664)}\nTree:  /(-1754.5173500819806, const((x2((x66((x80 / +(x20, 1.4676948390955316, (1.8961101095380664 * x97)))) * x0)) / x17(cos(-0.8567654379486078)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(-0.3836312871679164)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin(x54(cos(x50)), cos(x81), (x6)**(-0.3836312871679164)), cos(x40))', 'Equation constants: {0: np.float64(-2615.697939055784), 1: np.float64(-2616.197939055787), 2: np.float64(-0.2913486859108474)}\nTree:  -(const((x95 * -0.2913486859108474)), const((x2 / x17)), sin(x17))', 'Equation constants: {0: np.float64(-1307.7021766415978), 1: np.float64(-1308.2021766415994), 4: np.float64(1.0)}\nTree:  -(-1307.7021766415978, const((x2)**(x17)), (x17 sin cos(1.0)))', 'Equation constants: {0: np.float64(-0.5120564393929331), 1: np.float64(-0.13555458221705077), 2: np.float64(-0.7686453330671588), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(0.9998909811265956), 7: np.float64(0.99985266107438), 11: np.float64(1.0016564766512832)}\nTree:  (const((const((1.0016564766512832)**(1.0016564766512832)) sin (x33 / x68))) + (cos(-0.13555458221705077))**((0.9998909811265956 / const((const((0.99985266107438 * x84)) / x31)))))', 'Equation constants: {1: np.float64(1.1506761154851), 2: np.float64(0.0002969467427247817), 3: np.float64(-3.004220830968217), 4: np.float64(-1.4785413720629155)}\nTree:  ((cos(1.1506761154851))**((x11)**((0.0002969467427247817)**((x4 - -3.004220830968217)))) + cos(-1.4785413720629155))', 'Equation constants: {0: np.float64(-5231.518953883775), 1: np.float64(-5232.018953883782)}\nTree:  -(-5231.518953883775, const((x2 / x17)), sin(x17))', 'Equation constants: {0: np.float64(-41838.32086297133), 1: np.float64(-41838.82086297139), 2: np.float64(1.931892620452313)}\nTree:  -(-41838.32086297133, -41838.82086297139, sin((cos(x50) x54 (x79 - 1.931892620452313)), (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-20918.94659607883), 1: np.float64(-20919.44659607886), 2: np.float64(1.931892620452313)}\nTree:  -(-20918.94659607883, -20919.44659607886, sin((cos(x50) x54 (x79 - const((x96)**(x70)))), (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-2615.697939055784), 1: np.float64(-2616.197939055787), 4: np.float64(1.0), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  -(-2615.697939055784, const((x2 / x17)), sin(x17((1.0 + x26)), sin(1.0), (x36 / 1.0)))', 'Equation constants: {0: np.float64(-0.4899112382959952), 1: np.float64(0.08621866385718083), 2: np.float64(-0.008315521127179107), 3: np.float64(1.0513217699666175), 4: np.float64(-0.5155675270978199)}\nTree:  +(-0.4899112382959952, (cos(0.08621866385718083))**((x73)**((-0.008315521127179107)**((x4 - 1.0513217699666175)))), cos(-0.5155675270978199))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.0566899537409098)}\nTree:  -(const((x57)**(-1.0566899537409098)), -654.0189680101762, sin(x10))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(-0.3836312871679164)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin(x54(cos(x50)), cos(x81), (x99 * -0.3836312871679164)), cos(x40))', 'Equation constants: {1: np.float64(1.1506761154851), 2: np.float64(0.0002969467427247817), 3: np.float64(-3.004220830968217), 4: np.float64(-1.4785413720629155)}\nTree:  ((cos(1.1506761154851))**((x11)**((0.0002969467427247817)**((x4 - -3.004220830968217)))) + cos(-1.4785413720629155))', 'Equation constants: {0: np.float64(-0.4977724484068244), 4: np.float64(-0.06690056627718671)}\nTree:  (-0.4977724484068244 + cos(-0.06690056627718671))']
MSE: [np.float64(0.7706165455831441), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000178177), np.float64(0.25), np.float64(0.8017904169474717), np.float64(0.25000000000008543), np.float64(0.25000000001515366), np.float64(0.25), np.float64(0.25000000000213723), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.7706165454640818), np.float64(0.2500000000178146), np.float64(0.25000000043325893), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.24983334617816064), np.float64(0.25), np.float64(0.25), np.float64(0.25000000043325893), np.float64(0.25000000008826156)]
Generators: ['Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.007325827458075647, unit=0.5258775297751578)', 'Generator(mode=real, range=(-1.7387735650045841, 2.684906434995416), n_g=335, sigma_y=0.009157284322594557, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.009157284322594557, unit=0.5784652827526735)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5258775297751578)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.005860661966460517, unit=0.6929435622094278)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007325827458075647, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=271, sigma_y=0.004883884972050431, unit=1.0351379139177874)', 'Generator(mode=real, range=(-2.3415548151209036, 2.4584451848790962), n_g=399, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007032794359752621, unit=0.7699372913438086)', 'Generator(mode=real, range=(-1.7387735650045841, 2.684906434995416), n_g=335, sigma_y=0.009157284322594557, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.005860661966460517, unit=0.6929435622094278)', 'Generator(mode=real, range=(-1.0062104733639252, 2.8337895266360746), n_g=303, sigma_y=0.01054919153962893, unit=0.4302634334524017)', 'Generator(mode=real, range=(-1.8347639254835997, 3.6948360745164), n_g=367, sigma_y=0.007325827458075647, unit=0.636311811027941)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.5258775297751578)', 'Generator(mode=real, range=(-3.079963633950449, 3.8320363660495502), n_g=271, sigma_y=0.004883884972050431, unit=0.9410344671979884)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.010988741187113469, unit=0.5258775297751577)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=271, sigma_y=0.007325827458075647, unit=0.5258775297751578)', 'Generator(mode=real, range=(-1.6462306671027616, 3.8833693328972383), n_g=303, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.329470934984526, 3.200129065015474), n_g=367, sigma_y=0.007325827458075647, unit=0.6999429921307352)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=335, sigma_y=0.006104856215063039, unit=0.5258775297751577)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.005860661966460517, unit=0.6929435622094278)', 'Generator(mode=real, range=(-1.8615548151209036, 1.9784451848790963), n_g=399, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.005860661966460517, unit=0.6236492059884851)', 'Generator(mode=real, range=(-1.8347639254835997, 3.6948360745164), n_g=367, sigma_y=0.007325827458075647, unit=0.636311811027941)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=239, sigma_y=0.003907107977640345, unit=0.9410344671979884)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.005860661966460518, unit=0.6999429921307352)', 'Generator(mode=real, range=(-1.6462306671027616, 3.8833693328972383), n_g=303, sigma_y=0.004883884972050431, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.296405565004584, 2.242538434995416), n_g=335, sigma_y=0.009157284322594557, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.005860661966460517, unit=0.6929435622094278)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=303, sigma_y=0.00703279435975262, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.6924062109346028, 4.219593789065397), n_g=303, sigma_y=0.007325827458075647, unit=0.5258775297751578)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.005860661966460517, unit=0.6929435622094278)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.009157284322594557, unit=0.5784652827526735)', 'Generator(mode=real, range=(-1.4349431031187492, 4.094656896881251), n_g=335, sigma_y=0.004883884972050431, unit=0.6860141265873335)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.00703279435975262, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=271, sigma_y=0.004883884972050431, unit=0.8469310204781896)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5784652827526736)', 'Generator(mode=real, range=(-3.079963633950449, 3.8320363660495502), n_g=271, sigma_y=0.004883884972050431, unit=0.9410344671979884)', 'Generator(mode=real, range=(-2.9695850153907624, 3.942414984609237), n_g=335, sigma_y=0.007325827458075647, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.7387735650045841, 2.684906434995416), n_g=335, sigma_y=0.010988741187113469, unit=0.7777144357008168)']
Gen 49: 23 equations and 25 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-4678.689236549257), 1: np.float64(-9357.402641464767), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699), 5: np.float64(1.8961101095380664)}\nTree:  /(-4678.689236549257, const((x2((x66((x80 / +(x20, 1.4676948390955316, (1.8961101095380664 * x97)))) * x0)) / x17(cos(-0.8567654379486078)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-1307.2055523220765), 1: np.float64(-1307.7055523220783), 2: np.float64(-1.179393726837267), 3: np.float64(-1.8622677257342208)}\nTree:  -(const((x57)**(-1.179393726837267)), -1307.7055523220783, (x40 sin (-1.8622677257342208)**(-1.8622677257342208)), sin(x15))', 'Equation constants: {0: np.float64(-1754.5173500819806), 1: np.float64(-3509.0380832660217), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699), 5: np.float64(1.8961101095380664)}\nTree:  /(-1754.5173500819806, const((x2((x66((x80 / +(x20, 1.4676948390955316, (1.8961101095380664 * x97)))) * x0)) / x17(cos(-0.8567654379486078)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(-0.3836312871679164)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin(x54(cos(x50)), cos(x81), (x6)**(-0.3836312871679164)), cos(x40))', 'Equation constants: {0: np.float64(-2615.697939055784), 1: np.float64(-2616.197939055787), 2: np.float64(-0.2913486859108474)}\nTree:  -(const((x95 * -0.2913486859108474)), const((x2 / x17)), sin(x17))', 'Equation constants: {0: np.float64(-1307.7021766415978), 1: np.float64(-1308.2021766415994), 4: np.float64(1.0)}\nTree:  -(-1307.7021766415978, const((x2)**(x17)), (x17 sin cos(1.0)))', 'Equation constants: {0: np.float64(-0.5120564393929331), 1: np.float64(-0.13555458221705077), 2: np.float64(-0.7686453330671588), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(0.9998909811265956), 7: np.float64(0.99985266107438), 11: np.float64(1.0016564766512832)}\nTree:  (const((const((1.0016564766512832)**(1.0016564766512832)) sin (x33 / x68))) + (cos(-0.13555458221705077))**((0.9998909811265956 / const((const((0.99985266107438 * x84)) / x31)))))', 'Equation constants: {1: np.float64(1.1506761154851), 2: np.float64(0.0002969467427247817), 3: np.float64(-3.004220830968217), 4: np.float64(-1.4785413720629155)}\nTree:  ((cos(1.1506761154851))**((x11)**((0.0002969467427247817)**((x4 - -3.004220830968217)))) + cos(-1.4785413720629155))', 'Equation constants: {0: np.float64(-5231.518953883775), 1: np.float64(-5232.018953883782)}\nTree:  -(-5231.518953883775, const((x2 / x17)), sin(x17))', 'Equation constants: {0: np.float64(-41838.32086297133), 1: np.float64(-41838.82086297139), 2: np.float64(1.931892620452313)}\nTree:  -(-41838.32086297133, -41838.82086297139, sin((cos(x50) x54 (x79 - 1.931892620452313)), (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-20918.94659607883), 1: np.float64(-20919.44659607886), 2: np.float64(1.931892620452313)}\nTree:  -(-20918.94659607883, -20919.44659607886, sin((cos(x50) x54 (x79 - const((x96)**(x70)))), (x2)**(x67), cos(x81)), cos(x40))', 'Equation constants: {0: np.float64(-2615.697939055784), 1: np.float64(-2616.197939055787), 4: np.float64(1.0), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  -(-2615.697939055784, const((x2 / x17)), sin(x17((1.0 + x26)), sin(1.0), (x36 / 1.0)))', 'Equation constants: {0: np.float64(-0.4899112382959952), 1: np.float64(0.08621866385718083), 2: np.float64(-0.008315521127179107), 3: np.float64(1.0513217699666175), 4: np.float64(-0.5155675270978199)}\nTree:  +(-0.4899112382959952, (cos(0.08621866385718083))**((x73)**((-0.008315521127179107)**((x4 - 1.0513217699666175)))), cos(-0.5155675270978199))', 'Equation constants: {0: np.float64(-653.5189680101753), 1: np.float64(-654.0189680101762), 2: np.float64(-1.0566899537409098)}\nTree:  -(const((x57)**(-1.0566899537409098)), -654.0189680101762, sin(x10))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(-0.3836312871679164)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin(x54(cos(x50)), cos(x81), (x99 * -0.3836312871679164)), cos(x40))', 'Equation constants: {1: np.float64(1.1506761154851), 2: np.float64(0.0002969467427247817), 3: np.float64(-3.004220830968217), 4: np.float64(-1.4785413720629155)}\nTree:  ((cos(1.1506761154851))**((x11)**((0.0002969467427247817)**((x4 - -3.004220830968217)))) + cos(-1.4785413720629155))', 'Equation constants: {0: np.float64(-0.4977724484068244), 4: np.float64(-0.06690056627718671)}\nTree:  (-0.4977724484068244 + cos(-0.06690056627718671))', 'Equation constants: {0: np.float64(-2615.697939055784), 1: np.float64(-2616.197939055787), 4: np.float64(1.0), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  -(-2615.697939055784, const((x2 / x17)), sin(x17((1.0 * x26)), sin(1.0), (x36 / 1.0)))', 'Equation constants: {0: np.float64(-0.5092202008558868), 1: np.float64(-0.12228766286610361), 2: np.float64(-0.8167136080865913), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(0.9999903101707329), 10: np.float64(1.0000455384988922), 11: np.float64(1.0), 12: np.float64(1.0)}\nTree:  +(const(sin(const((1.0)**(1.0)))), (cos(-0.12228766286610361))**((0.9999903101707329 / const((1.6487086928786074 / x31((1.0000455384988922 / x27)))))), (1.0 / x64))', 'Equation constants: {0: np.float64(-0.5111904965035905), 1: np.float64(-0.13061631021902365), 2: np.float64(-0.7687347141890633), 3: np.float64(1.6487086928786074), 6: np.float64(1.0000271307296305), 10: np.float64(1.0)}\nTree:  (-0.5111904965035905 + (cos(-0.13061631021902365))**((1.0000271307296305 / const((1.6487086928786074 / x31((1.0 / x56)))))))', 'Equation constants: {0: np.float64(-0.5091645733450655), 1: np.float64(-0.1219197686697713), 2: np.float64(-0.8167134948436096), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0000071054740924), 10: np.float64(1.0000424865594295), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.1219197686697713))**((1.0000071054740924 / const((1.6487086928786074 / ((1.0000424865594295 / x27) x31 (x81 + x38)))))))', 'Equation constants: {0: np.float64(-5231.775017936495), 1: np.float64(-5232.275017936501), 2: np.float64(-0.2913486859108474)}\nTree:  -(const((x95 * -0.2913486859108474)), const((x2 / x17)), sin(x17))', 'Equation constants: {0: np.float64(-0.5091645733450655), 1: np.float64(-0.1219197686697713), 2: np.float64(-0.8167134948436096), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0000071054740924), 10: np.float64(1.0000424865594295), 11: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.1219197686697713))**((1.0000071054740924 / const((1.6487086928786074 / x31((1.0000424865594295 * x27)))))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699)}\nTree:  -(-653.7726600211632, const((x2((x66((x80)**(+(x20, 1.4676948390955316, sin(x87)))) * x0)) / (cos(-0.8567654379486078) x17 sin(x56)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-5229.560896805597), 1: np.float64(-5230.060896805604), 2: np.float64(-0.3836312871679164), 3: np.float64(-1.8404186640925388)}\nTree:  -(-5229.560896805597, -5230.060896805604, sin(x54(cos(x50)), cos(x81), (x99 * const((-1.8404186640925388 - -1.8404186640925388)))), cos(x40))', 'Equation constants: {0: np.float64(-2615.697939055784), 1: np.float64(-2616.197939055787), 2: np.float64(-0.2913486859108474), 3: np.float64(1.0183845811125107)}\nTree:  -(const((x95 * -0.2913486859108474)), const((x2 / x17)), sin(x17), cos(1.0183845811125107))', 'Equation constants: {0: np.float64(-0.5092740674366288), 1: np.float64(-0.12263717341292268), 2: np.float64(-0.8166495267733556), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(0.9999882729582449), 10: np.float64(0.999991958324983), 11: np.float64(1.0), 12: np.float64(1.0), 13: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.12263717341292268))**((0.9999882729582449 / const((1.6487086928786074 / ((0.999991958324983 / x27) x31 cos(const((1.0 / 1.0)))))))))', 'Equation constants: {0: np.float64(-2615.697939055784), 1: np.float64(-2616.197939055787), 4: np.float64(1.0), 5: np.float64(1.0), 6: np.float64(1.0)}\nTree:  -(-2615.697939055784, ((x2 / x17) const (x0 * x61)), sin(x17((1.0 + x26)), sin(1.0), (x36 / 1.0)))', 'Equation constants: {0: np.float64(-0.5092740674366288), 1: np.float64(-0.12263717341292268), 2: np.float64(-0.8166495267733556), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(0.9999882729582449), 10: np.float64(0.999991958324983), 11: np.float64(1.0), 12: np.float64(1.0), 13: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.12263717341292268))**((0.9999882729582449 / const((1.6487086928786074 / ((0.999991958324983 / x27) x31 (1.0 cos (1.0 * x99))))))))', 'Equation constants: {0: np.float64(-1307.7021766415978), 1: np.float64(-1308.2021766415994), 4: np.float64(1.0), 5: np.float64(1.0)}\nTree:  -(const(cos(1.0)), const((x2)**(x17)), (x17 sin cos(1.0)))', 'Equation constants: {0: np.float64(-0.5811895979712589), 1: np.float64(-0.3649481457190555), 2: np.float64(-0.8311844780610556), 4: np.float64(1.0), 6: np.float64(0.9525222997808978), 11: np.float64(1.0)}\nTree:  (const((const((1.0)**(1.0)) sin (x33 / x68))) + (cos(-0.3649481457190555))**((0.9525222997808978 / -0.8311844780610556)))', 'Equation constants: {0: np.float64(-1307.2055523220765), 1: np.float64(-1307.7055523220783), 2: np.float64(-1.179393726837267), 3: np.float64(-1.8622677257342208), 4: np.float64(-0.493208884002974)}\nTree:  -(const((x57)**(-1.179393726837267)), -1307.7055523220783, (x40 sin (-1.8622677257342208)**(-1.8622677257342208)), sin(x15), (x75)**(-0.493208884002974))', 'Equation constants: {0: np.float64(-0.00028989371012806307), 1: np.float64(-1724.7700878460726), 3: np.float64(1.0), 4: np.float64(1.0), 5: np.float64(-1.115757916470376)}\nTree:  (-0.00028989371012806307 * const(/(x2((x66((1.0 / x80)) * x1)), x17(cos(x54)), *(1.0, 1.0, (x62((-1.115757916470376 * x22)) + x2)))))', 'Equation constants: {0: np.float64(-2615.697939055784), 1: np.float64(-2616.197939055787), 4: np.float64(1.0), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(1.0)}\nTree:  -(-2615.697939055784, const((x2 / x17)), sin(x17(+(1.0, x26, (x27 * 1.0))), sin(1.0), (x36 / 1.0)))', 'Equation constants: {0: np.float64(-0.5092740674366288), 1: np.float64(-0.12263717341292268), 2: np.float64(-0.8166495267733556), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(0.9999882729582449), 10: np.float64(0.999991958324983), 11: np.float64(1.0), 12: np.float64(1.0), 13: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.12263717341292268))**((0.9999882729582449 / const((1.6487086928786074 / ((0.999991958324983 / x27) x31 cos(const((1.0 + x21)))))))))', 'Equation constants: {0: np.float64(-653.7726600211632), 1: np.float64(-654.272660021164), 2: np.float64(-0.8567654379486078), 3: np.float64(1.4676948390955316), 4: np.float64(-1.213853913250699), 5: np.float64(0.8855458654671499)}\nTree:  -(const((x61 + x67)), const((x2((x66((x80)**((x20 + 1.4676948390955316))) * x0)) / (cos(-0.8567654379486078) x17 sin(0.8855458654671499)))), (x17 sin sin(-1.213853913250699)))', 'Equation constants: {0: np.float64(-0.5035274602188314), 1: np.float64(-0.07519290343744017), 2: np.float64(-0.8035940734677132), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(1.0), 7: np.float64(1.0), 10: np.float64(1.0), 11: np.float64(1.0), 12: np.float64(1.0), 13: np.float64(1.0)}\nTree:  ((sin(const((1.0)**(1.0))) const pow(x92, x83, (x10 / 1.0))) + pow(cos(-0.07519290343744017), (1.0 / const((const((1.0 * x84)) / x31((1.0 / x99))))), (1.0)**(1.0)))', 'Equation constants: {0: np.float64(-0.5092740674366288), 1: np.float64(-0.12263717341292268), 2: np.float64(-0.8166495267733556), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(0.9999882729582449), 10: np.float64(0.999991958324983), 11: np.float64(1.0), 12: np.float64(1.0), 13: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(const(cos(1.0)))))) + (cos(-0.12263717341292268))**((0.9999882729582449 / const((1.6487086928786074 / ((0.999991958324983 / x27) x31 cos(1.0)))))))', 'Equation constants: {0: np.float64(-10459.33457850979), 1: np.float64(-10459.834578509803), 2: np.float64(1.8798099195082916), 3: np.float64(-0.32747709709063333)}\nTree:  -(-10459.33457850979, -10459.834578509803, ((cos(x50) x54 (x79 - 1.8798099195082916)) sin (x2)**(x67)), cos(x40), (x70)**(-0.32747709709063333))', 'Equation constants: {0: np.float64(-0.5092202008558868), 1: np.float64(-0.12228766286610361), 2: np.float64(-0.8167136080865913), 3: np.float64(1.6487086928786074), 4: np.float64(-0.2435195169519689), 6: np.float64(0.9999903101707329), 10: np.float64(1.0000455384988922), 11: np.float64(1.0), 12: np.float64(1.0)}\nTree:  (const(sin(const((1.0)**(1.0)))) + (cos(-0.12228766286610361))**((0.9999903101707329 / const((1.6487086928786074 / x31((1.0000455384988922 / x27((x68 / 1.0)))))))))']
MSE: [np.float64(0.25), np.float64(0.25000000000008543), np.float64(0.25000000000005324), np.float64(0.2500000000000648), np.float64(0.25), np.float64(0.2500000000000648), np.float64(0.25), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000000004), np.float64(0.25), np.float64(0.2500000000000004), np.float64(323049593.2473057), np.float64(0.25), np.float64(0.25000000000310174), np.float64(0.25), np.float64(249697971735.21), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000000004), np.float64(0.25), np.float64(0.25), np.float64(0.2500000000000004), np.float64(0.25), np.float64(0.25000000000008543)]
Generators: ['Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.005860661966460518, unit=0.6999429921307352)', 'Generator(mode=real, range=(-1.6462306671027616, 3.8833693328972383), n_g=303, sigma_y=0.004883884972050431, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.296405565004584, 2.242538434995416), n_g=335, sigma_y=0.009157284322594557, unit=0.7777144357008168)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.005860661966460517, unit=0.6929435622094278)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=303, sigma_y=0.00703279435975262, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.6924062109346028, 4.219593789065397), n_g=303, sigma_y=0.007325827458075647, unit=0.5258775297751578)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=335, sigma_y=0.005860661966460517, unit=0.6929435622094278)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=399, sigma_y=0.009157284322594557, unit=0.5784652827526735)', 'Generator(mode=real, range=(-1.4349431031187492, 4.094656896881251), n_g=335, sigma_y=0.004883884972050431, unit=0.6860141265873335)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.00703279435975262, unit=0.7699372913438086)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=271, sigma_y=0.004883884972050431, unit=0.8469310204781896)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.5784652827526736)', 'Generator(mode=real, range=(-3.079963633950449, 3.8320363660495502), n_g=271, sigma_y=0.004883884972050431, unit=0.9410344671979884)', 'Generator(mode=real, range=(-2.9695850153907624, 3.942414984609237), n_g=335, sigma_y=0.007325827458075647, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.7387735650045841, 2.684906434995416), n_g=335, sigma_y=0.010988741187113469, unit=0.7777144357008168)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=303, sigma_y=0.00703279435975262, unit=0.8469310204781896)', 'Generator(mode=real, range=(-1.8347639254835997, 3.6948360745164), n_g=367, sigma_y=0.007325827458075647, unit=0.636311811027941)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.004688529573168414, unit=0.6929435622094278)', 'Generator(mode=real, range=(-2.3415548151209036, 2.4584451848790962), n_g=399, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-1.8347639254835997, 3.6948360745164), n_g=367, sigma_y=0.005860661966460518, unit=0.636311811027941)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=303, sigma_y=0.005860661966460517, unit=0.6929435622094278)', 'Generator(mode=real, range=(-2.6924062109346028, 4.219593789065397), n_g=335, sigma_y=0.007325827458075647, unit=0.5258775297751578)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=303, sigma_y=0.005860661966460517, unit=0.6929435622094278)', 'Generator(mode=real, range=(-2.1614558866575093, 2.6385441133424905), n_g=335, sigma_y=0.006104856215063039, unit=0.5258775297751577)', 'Generator(mode=real, range=(-3.079963633950449, 3.8320363660495502), n_g=271, sigma_y=0.004883884972050431, unit=0.9410344671979884)', 'Generator(mode=real, range=(-2.6924062109346028, 4.219593789065397), n_g=303, sigma_y=0.007325827458075647, unit=0.473289776797642)', 'Generator(mode=real, range=(-1.810599822798359, 3.7190001772016408), n_g=367, sigma_y=0.007032794359752621, unit=0.7699372913438086)', 'Generator(mode=real, range=(-1.7387735650045841, 2.684906434995416), n_g=335, sigma_y=0.007325827458075646, unit=0.7777144357008168)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=303, sigma_y=0.003907107977640345, unit=0.5258775297751578)', 'Generator(mode=real, range=(-1.8615548151209036, 1.9784451848790963), n_g=399, sigma_y=0.007631070268828798, unit=0.5258775297751577)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=303, sigma_y=0.004883884972050431, unit=0.5258775297751578)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=303, sigma_y=0.006104856215063039, unit=0.636311811027941)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=303, sigma_y=0.007325827458075647, unit=0.5258775297751578)', 'Generator(mode=real, range=(-1.6462306671027616, 3.8833693328972383), n_g=303, sigma_y=0.006104856215063039, unit=0.8554858792708985)', 'Generator(mode=real, range=(-1.7387735650045841, 2.684906434995416), n_g=367, sigma_y=0.010988741187113469, unit=0.7777144357008168)', 'Generator(mode=real, range=(-3.1929998227983587, 5.101400177201641), n_g=303, sigma_y=0.007325827458075647, unit=0.5784652827526736)', 'Generator(mode=real, range=(-2.329470934984526, 3.200129065015474), n_g=399, sigma_y=0.007325827458075647, unit=0.6999429921307352)', 'Generator(mode=real, range=(-2.501799822798359, 4.410200177201641), n_g=367, sigma_y=0.007325827458075647, unit=0.7699372913438086)', 'Generator(mode=real, range=(-1.7387735650045841, 2.684906434995416), n_g=335, sigma_y=0.010988741187113469, unit=0.8554858792708985)', 'Generator(mode=real, range=(-2.5041713589494075, 2.2958286410505924), n_g=335, sigma_y=0.006104856215063039, unit=0.5258775297751577)']


==================== START OF FILE: logger.py ====================

import numpy as np
import os

class MetricLogger:
    def __init__(self, log_file="log.txt"):
        self.records = []
        self.log_file = log_file

    def log_generation_csv(self, 
        file,
        gen_num,
        tau,
        tau_prime,
        eq_mses_anchor,
        # eq_mses_gen,
        eq_tree_sizes,
        num_eq_passed,
        num_gen_passed,
        eq_queue_size,
        gen_queue_size
    ):
        # Define header
        header = (
        "generation,tau,tau_prime,"
        "eq_mse_min,eq_mse_mean,eq_mse_median,eq_mse_max,"
        # "gen_mse_min,gen_mse_mean,gen_mse_median,gen_mse_max,"
        "eq_tree_size_min,eq_tree_size_mean,eq_tree_size_max,"
        "num_eq_passed,num_gen_passed,eq_queue_size,gen_queue_size\n"
        )
    # Prepare row
        row = [
        gen_num, tau, tau_prime,
        np.min(eq_mses_anchor), np.mean(eq_mses_anchor), np.median(eq_mses_anchor), np.max(eq_mses_anchor),
        # np.min(eq_mses_gen), np.mean(eq_mses_gen), np.median(eq_mses_gen), np.max(eq_mses_gen),
        np.min(eq_tree_sizes), np.mean(eq_tree_sizes), np.max(eq_tree_sizes), num_eq_passed, num_gen_passed, eq_queue_size, gen_queue_size
    ]
    # Write header if file doesn't exist
        
        write_header = not os.path.exists(file)
        with open(file, "a") as f:
            if write_header:
                f.write(header)
            f.write(",".join(map(str, row)) + "\n")




    def log_generation(self, generation, tau, tau_prime, eq_passed, gen_passed, 
                       eq_queue_size, gen_queue_size, equation_population, mse, generators_population):
        log_entry = dict(
            generation=generation,
            tau=tau,
            tau_prime=tau_prime,
            eq_passed=eq_passed,
            gen_passed=gen_passed,
            eq_queue_size=eq_queue_size,
            gen_queue_size=gen_queue_size,
            equation_population = equation_population,
            mse = mse,
            generators_population = generators_population
        )
        self.records.append(log_entry)
        if self.log_file:
            # Optionally write to file/CSV immediately
            # import json
            # with open(self.log_file, "a") as f:
            #     f.write(json.dumps(log_entry) + '\n')
            
            with open(self.log_file, "a") as f:  # 'a' mode appends
                f.write(f"Gen {generation}: {eq_passed} equations and {gen_passed} generators passed MC.\n")
                f.write(f"  Queue sizes - Equations: {eq_queue_size}, Generators: {gen_queue_size}\n")
                f.write(f"Equations: {[str(eq) for eq in equation_population]}\n")
                f.write(f"MSE: {mse}\n")
                f.write(f"Generators: {[str(gen) for gen in generators_population]}\n")
                

    def to_dataframe(self):
        import pandas as pd
        return pd.DataFrame(self.records)

==================== START OF FILE: mcc.py ====================

"""Classes for evaluation metrics (minimal criterion) on equations and generators."""

from abc import ABC, abstractmethod
from equation import Equation
from generator import Generator

class MinimalCriterion(ABC):
    @abstractmethod
    def is_viable(self, candidate, *args, **kwargs):
        """Return True if candidate passes MC, False otherwise."""
        pass

class EquationMC(MinimalCriterion):
    def __init__(self, tau, tau_prime, L_max):
        self.tau = tau # mse threshold on anchor data
        self.tau_prime = tau_prime # mse threshold on generated data
        self.L_max = L_max # max tree size

    def is_viable(self, equation, D0, generators):
        # 1. Fit constants on anchor, check threshold 
        """NOTE: maybe fit on each generated dataset when fitting instead?"""
        # print("Fitting equation on anchor data for MC check...")
        mse_anchor = equation.fit_constants(D0[0], D0[1])
        # print("MSE on anchor after fitting:", mse_anchor)
        if mse_anchor > self.tau:
            return False
        # 2. Check if the equation fits at lease one generated dataset
        for gen in generators:
            xg, yg = gen.sample()
            mse_gen = equation.calculate_mse(xg, yg)
            if mse_gen <= self.tau_prime:
                # 3. Check tree size
                if equation.size() <= self.L_max:
                    return True
        return False

class GeneratorMC(MinimalCriterion):
    def __init__(self, tau_prime):
        self.tau_prime = tau_prime # mse threshold on generated data

    def is_viable(self, generator, equations):
        # Checks if the generated data fits at least one equation
        """NOTE: maybe add fitting constants here as well?"""
        xg, yg = generator.sample()
        for eq in equations:
            mse = eq.calculate_mse(xg, yg)
            # print("Generator MC check - Equation MSE on generated data:", mse)
            # print("Threshold tau':", self.tau_prime)
            # print("Comparison:", mse <= self.tau_prime)
            if mse <= self.tau_prime:
                return True
        return False

==================== START OF FILE: plotting.py ====================

import pandas as pd
import matplotlib.pyplot as plt


def plot_mse_trends(csv_path, save_path=None):
    df = pd.read_csv(csv_path)
    plt.figure(figsize=(10,6))
    plt.scatter(df['generation'], df['eq_mse_min'], label='Min Eq MSE')
    plt.scatter(df['generation'], df['eq_mse_median'], label='Median Eq MSE')
    plt.scatter(df['generation'], df['eq_mse_max'], label='Max Eq MSE')
    plt.xlabel('Generation')
    plt.ylabel('Equation MSE')
    plt.title('Equation MSE Evolution')
    plt.legend()
    plt.grid(True)
    if save_path:
        plt.savefig(save_path)
    else:
        plt.show()
    plt.close()

def plot_num_passed(csv_path, save_path=None):
    df = pd.read_csv(csv_path)
    plt.figure(figsize=(8,4))
    plt.scatter(df['generation'], df['num_eq_passed'], label='Eq Passed MC')
    plt.scatter(df['generation'], df['num_gen_passed'], label='Gen Passed MC')
    plt.xlabel('Generation')
    plt.ylabel('Number Passed')
    plt.title('MC Gate Passing Over Time')
    plt.legend()
    plt.grid(True)
    if save_path:
        plt.savefig(save_path)
    else:
        plt.show()
    plt.close()

def plot_thresholds(csv_path, save_path=None):
    df = pd.read_csv(csv_path)
    plt.figure(figsize=(8,4))
    plt.scatter(df['generation'], df['tau'], label='tau')
    plt.scatter(df['generation'], df['tau_prime'], label='tau_prime')
    plt.xlabel('Generation')
    plt.ylabel('Threshold Value')
    plt.title('MC Thresholds Over Generations')
    plt.legend()
    plt.grid(True)
    if save_path:
        plt.savefig(save_path)
    else:
        plt.show()
    plt.close()

def plot_tree_sizes(csv_path, save_path=None):
    """
    Plot min, mean, and max tree sizes over generations.
    """
    df = pd.read_csv(csv_path)
    plt.figure(figsize=(10,6))
    plt.scatter(df['generation'], df['eq_tree_size_min'], label='Min Tree Size')
    plt.scatter(df['generation'], df['eq_tree_size_mean'], label='Mean Tree Size')
    plt.scatter(df['generation'], df['eq_tree_size_max'], label='Max Tree Size')
    plt.xlabel('Generation')
    plt.ylabel('Equation Tree Size')
    plt.title('Equation Tree Size Evolution')
    plt.legend()
    plt.grid(True)
    if save_path:
        plt.savefig(save_path)
    else:
        plt.show()
    plt.close()

def plot_metrics(csv_path, out_dir=None):
    plot_mse_trends(csv_path, f"{out_dir}/mse_trends.png" if out_dir else None)
    plot_num_passed(csv_path, f"{out_dir}/num_passed.png" if out_dir else None)
    plot_thresholds(csv_path, f"{out_dir}/thresholds.png" if out_dir else None)
    plot_tree_sizes(csv_path, f"{out_dir}/tree_sizes.png" if out_dir else None)
    print("All plots generated.")

==================== START OF FILE: __init__.py ====================

from equation import Equation
from generator import Generator
from evolution import EvolutionEngine
from logger import MetricLogger
import numpy as np
import json
import random





def load_dataset(path):
    # Loads anchor dataset D0 from SRBench .csv or .json
    # Returns X shape [n, d], y shape [n,]
    data = np.genfromtxt(path, delimiter='\t', skip_header=1)
    X = data[:, :-1]
    y = data[:, -1]
    return X, y

# if __name__ == "__main__":
#     D0= load_dataset('./dataset/I.6.2.txt') # user supplies filename
#     print("Anchor dataset loaded.")
#     print("X shape:", D0[0].shape)
#     equation = Equation.random_init(D0[0].shape[1])
#     print("Random equation initialized:")
#     print(equation)

#     print("Before fitting:", equation)
#     mse_before = equation.calculate_mse(D0[0], D0[1])
#     print("MSE before:", mse_before)

#     mse_after = equation.fit_constants(D0[0], D0[1])
#     print("After fitting:", equation)
#     print("MSE after:", mse_after)

#     y = equation.evaluate(D0[0])
#     print("Equation evaluated on anchor data.")
#     print(y)


#     equation.fit_constants(D0[0], D0[1])
#     print("Constants fitted.")
#     print(equation)

#     print("Mutated equation:")
#     mutant = equation.mutate()
#     print(mutant)
#     print("Mutant evaluated on anchor data.")
#     print(mutant.evaluate(D0[0]))
    
#     generator = Generator.random_init(anchor_data=D0)
#     print("Random generator initialized:")
#     print(generator)

#     xg, yg = generator.sample()
#     print("Generator sampled data:")
#     print(xg)
#     print(yg)

#     equation.evaluate(xg)
#     print("Equation evaluated on generated data.")
#     print(equation.evaluate(xg))
#     print("Mutated generator:")
#     mutantg = generator.mutate()
#     print(mutantg)
#     print("Mutant sampled.")
#     xg, yg = mutantg.sample()
#     print("Generator sampled data:")
#     print(xg)
#     print(yg)
#     print("Equation evaluated on mutated generated data.")
#     print(equation.evaluate(xg))



if __name__ == "__main__":
    # Load anchor dataset D0
    print("Loading anchor dataset...")
    D0 = load_dataset('C:/Users/matsu/Downloads/Hill_Valley_with_noise.tsv.gz') # user supplies filename
    D0 = (D0[0], D0[1])  #
    print("Anchor dataset loaded.")

    assert D0[0].shape[0] ==D0[1].shape[0] 


    n_pop = 25
    
    import os
    if os.path.exists("log.txt"):
            os.remove("log.txt")

    if os.path.exists("generation_log.csv"):
            os.remove("generation_log.csv")

    # Initial seeds (example)
    # --- Create queues ---
    equation_queue = [Equation.random_init(D0[0].shape[1]) for _ in range(n_pop)]
   # gen = Generator(anchor_data = D0)
    generator_queue = [Generator.random_init(anchor_data = D0, mode = 'real') for _ in range(n_pop)]
    print("Created initial equation and generator queues.")
    # Params
    params = {
        'tau_init': 1e-2, 
        'taup_init': 1e-2,
        'Lmax': 8,
        'n_generations': 50,
        'delta_eq': 0.2,
        'delta_gen': 0.25,
        'k_generators': 3,
        'tau_quantile': 0.25,
        'llm_trigger_gens': 30
    }

     # --- Logger ---
    logger = MetricLogger()

    # --- Evolution settings ---
    tau = 0.3 #0.25 0.05
    tau_prime = 0.35 #0.3 0.07
    L_max = 40

    engine = EvolutionEngine(
        equation_queue=equation_queue,
        generator_queue=generator_queue,
        anchor_x=D0[0],
        anchor_y=D0[1],
        tau=tau,
        tau_prime=tau_prime,
        L_max=L_max,
        n_generations=50,
        batch_size=n_pop,
        logger=logger,
        llm_enabled=False
    )

    eqs, gens = engine.run()

    from plotting import plot_metrics

    log_file = "generation_log.csv"
    plot_metrics(log_file)

    

#     """Comparison!!!"""
#     import os
#     # os.environ["JULIA_EXE"] = r"C:\\Users\\matsu\\AppData\\Local\\Programs\\Julia-1.10.10\\bin\\julia.exe"
#     # print("Environment PATH:")
#     # print(os.environ.get("PATH"))
#     # print(os.environ.get("JULIA_EXE"))
#     # print("Importing PySR...")


    from pysr import PySRRegressor


    model = PySRRegressor(
    niterations=50,                  # Main compute knob (higher = better models)
    populations=n_pop,
    model_selection="best",          # Option: "best" or "accuracy"
    unary_operators=["sin", "cos"],  # Operator set
    binary_operators=["+", "-", "*", "/"],
    maxsize=40,                     # Max tree size
)

    model.fit(D0[0], D0[1])

    print("PySR discovered equations:")

    print(model.get_best())

  
    print(model.equations_)  

    score = model.score(D0[0], D0[1])
    print("MSE:", score)
    
    # # --- Save results to files ---
    # with open("results_equations.txt", "w") as f_eq:
    #     for eq in eqs:
    #         f_eq.write(str(eq) + "\n")
            
    # with open("results_generators.txt", "w") as f_gen:
    #     for gen in gens:
    #         f_gen.write(str(gen) + "\n")
    
    # with open("results_metrics.json", "w") as f_metrics:
    #     json.dump(metrics, f_metrics, indent=2)

    # print("Results saved to results_equations.txt, results_generators.txt, and results_metrics.json")


print("Done.")
# __all__ = [
#     "Equation",
#     "Generator",
#     "EvolutionEngine",
#     "run_evolution_demo",
# ]