Gen 0: 3 equations and 5 generators passed MC.
  Queue sizes - Equations: 13, Generators: 15
Equations: ['Equation constants: {}\nTree:  cos(x99)', 'Equation constants: {0: -1.4961296479124595}\nTree:  (-1.4961296479124595 / cos(x96))', 'Equation constants: {0: -1.7207536321817454}\nTree:  sin((x59 - -1.7207536321817454))', 'Equation constants: {0: -1.6072172660620279, 1: 1.8306111152248032, 2: -1.3882205139541832}\nTree:  (((x78)**(-1.6072172660620279) * (1.8306111152248032 / x21)) + -1.3882205139541832)', 'Equation constants: {0: -0.7030773884006742}\nTree:  ((cos(-0.7030773884006742) - (x74 * x19)) * (sin(x50) + (x59)**(x50)))', 'Equation constants: {}\nTree:  (x65 * ((x29 + x88) / (x51)**(x47)))', 'Equation constants: {0: -0.5807659395041891, 1: -1.2418306074106926}\nTree:  (((x33 + x27) * x99) / (-0.5807659395041891)**((-1.2418306074106926 - x81)))', 'Equation constants: {0: -0.32600200482179353}\nTree:  cos(cos((x32)**(-0.32600200482179353)))', 'Equation constants: {}\nTree:  cos(sin(x69))', 'Equation constants: {0: -1.792755254768521, 1: 0.43687098901614174}\nTree:  (((x97 * -1.792755254768521))**((x89)**(x57)) * ((x63)**(x33) + (x42 - 0.43687098901614174)))', 'Equation constants: {0: np.float64(-0.2859324993063872), 1: np.float64(-0.2859324993063872)}\nTree:  (cos((x32)**(-0.2859324993063872)) cos (x79)**(-0.2859324993063872))', 'Equation constants: {1: np.float64(7.6970412465640585), 2: np.float64(7.6970412465640585)}\nTree:  ((x39 / ((x55 / 7.6970412465640585))**(cos(7.6970412465640585))) / x55)', 'Equation constants: {0: np.float64(0.5403377070396777), 1: np.float64(0.5403377070396777), 2: np.float64(0.5403377070396777)}\nTree:  (((x78)**(0.5403377070396777) * (0.5403377070396777 / x21)) + 0.5403377070396777)']
MSE: [np.float64(0.30064285735986096), np.float64(6.094570103831317e+79), np.float64(0.3381808517163437), np.float64(0.7493106749287346), np.float64(0.30493911214059566), np.float64(0.2537183070901244), np.float64(0.2951856057359985), np.float64(2.125540359834994e+58), np.float64(0.49996582072466317), np.float64(0.49996582072466306), np.float64(0.34018112265448225), np.float64(6.094599799869263e+79)]
Generators: ['Generator(mode=real, range=(-2, 2), n_g=801, sigma_y=0.048789285676554335, unit=1.5070629190790903)', 'Generator(mode=real, range=(-5, 5), n_g=629, sigma_y=0.02807287933001928, unit=1.1358777735919614)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=586, sigma_y=0.008655378130783634, unit=1.7540539510117807)', 'Generator(mode=real, range=(-2, 2), n_g=372, sigma_y=0.018703527255394748, unit=1.6014209496551444)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.028192329903872475, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=750, sigma_y=0.03549159248870221, unit=1.847182889285445)', 'Generator(mode=real, range=(0, 1), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=269, sigma_y=0.01235566954845859, unit=1.5734431332033778)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.640858015069615, 2.359141984930385), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)']
Gen 1: 2 equations and 8 generators passed MC.
  Queue sizes - Equations: 15, Generators: 23
Equations: ['Equation constants: {}\nTree:  cos(x99)', 'Equation constants: {0: -1.4961296479124595}\nTree:  (-1.4961296479124595 / cos(x96))', 'Equation constants: {0: -1.7207536321817454}\nTree:  sin((x59 - -1.7207536321817454))', 'Equation constants: {0: -1.6072172660620279, 1: 1.8306111152248032, 2: -1.3882205139541832}\nTree:  (((x78)**(-1.6072172660620279) * (1.8306111152248032 / x21)) + -1.3882205139541832)', 'Equation constants: {0: -0.7030773884006742}\nTree:  ((cos(-0.7030773884006742) - (x74 * x19)) * (sin(x50) + (x59)**(x50)))', 'Equation constants: {}\nTree:  (x65 * ((x29 + x88) / (x51)**(x47)))', 'Equation constants: {0: -0.5807659395041891, 1: -1.2418306074106926}\nTree:  (((x33 + x27) * x99) / (-0.5807659395041891)**((-1.2418306074106926 - x81)))', 'Equation constants: {0: -0.32600200482179353}\nTree:  cos(cos((x32)**(-0.32600200482179353)))', 'Equation constants: {}\nTree:  cos(sin(x69))', 'Equation constants: {0: -1.792755254768521, 1: 0.43687098901614174}\nTree:  (((x97 * -1.792755254768521))**((x89)**(x57)) * ((x63)**(x33) + (x42 - 0.43687098901614174)))', 'Equation constants: {0: np.float64(-0.2859324993063872), 1: np.float64(-0.2859324993063872)}\nTree:  (cos((x32)**(-0.2859324993063872)) cos (x79)**(-0.2859324993063872))', 'Equation constants: {1: np.float64(7.6970412465640585), 2: np.float64(7.6970412465640585)}\nTree:  ((x39 / ((x55 / 7.6970412465640585))**(cos(7.6970412465640585))) / x55)', 'Equation constants: {0: np.float64(0.5403377070396777), 1: np.float64(0.5403377070396777), 2: np.float64(0.5403377070396777)}\nTree:  (((x78)**(0.5403377070396777) * (0.5403377070396777 / x21)) + 0.5403377070396777)', 'Equation constants: {0: np.float64(0.5403377037274448), 1: np.float64(0.5403377037274448), 2: np.float64(0.5403377037274448)}\nTree:  (((x78)**(0.5403377037274448) * (0.5403377037274448 / x21)) + 0.5403377037274448)', 'Equation constants: {0: np.float64(0.540337636742883), 1: np.float64(0.540337636742883), 2: np.float64(0.540337636742883)}\nTree:  (((x78)**(0.540337636742883) * (0.540337636742883 / x21)) + 0.540337636742883)']
MSE: [np.float64(4434335793452.507), np.float64(0.49996582072466306), np.float64(0.3381808517163437), np.float64(4434363949645.443), np.float64(0.29518561985574476), np.float64(0.7493106749287346), np.float64(23190.3403346742), np.float64(0.4999902799647594), np.float64(0.9677105491208053), np.float64(0.29518560830177426)]
Generators: ['Generator(mode=real, range=(-2, 2), n_g=801, sigma_y=0.048789285676554335, unit=1.5070629190790903)', 'Generator(mode=real, range=(-5, 5), n_g=629, sigma_y=0.02807287933001928, unit=1.1358777735919614)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=586, sigma_y=0.008655378130783634, unit=1.7540539510117807)', 'Generator(mode=real, range=(-2, 2), n_g=372, sigma_y=0.018703527255394748, unit=1.6014209496551444)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.028192329903872475, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=750, sigma_y=0.03549159248870221, unit=1.847182889285445)', 'Generator(mode=real, range=(0, 1), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=269, sigma_y=0.01235566954845859, unit=1.5734431332033778)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.640858015069615, 2.359141984930385), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0, 1), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.007480188969446932, unit=0.6934657012952925)', 'Generator(mode=real, range=(0, 1), n_g=341, sigma_y=0.03306878132192486, unit=0.5859747828302897)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0, 1), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)']
Gen 2: 2 equations and 7 generators passed MC.
  Queue sizes - Equations: 17, Generators: 30
Equations: ['Equation constants: {}\nTree:  cos(x99)', 'Equation constants: {0: -1.4961296479124595}\nTree:  (-1.4961296479124595 / cos(x96))', 'Equation constants: {0: -1.7207536321817454}\nTree:  sin((x59 - -1.7207536321817454))', 'Equation constants: {0: -1.6072172660620279, 1: 1.8306111152248032, 2: -1.3882205139541832}\nTree:  (((x78)**(-1.6072172660620279) * (1.8306111152248032 / x21)) + -1.3882205139541832)', 'Equation constants: {0: -0.7030773884006742}\nTree:  ((cos(-0.7030773884006742) - (x74 * x19)) * (sin(x50) + (x59)**(x50)))', 'Equation constants: {}\nTree:  (x65 * ((x29 + x88) / (x51)**(x47)))', 'Equation constants: {0: -0.5807659395041891, 1: -1.2418306074106926}\nTree:  (((x33 + x27) * x99) / (-0.5807659395041891)**((-1.2418306074106926 - x81)))', 'Equation constants: {0: -0.32600200482179353}\nTree:  cos(cos((x32)**(-0.32600200482179353)))', 'Equation constants: {}\nTree:  cos(sin(x69))', 'Equation constants: {0: -1.792755254768521, 1: 0.43687098901614174}\nTree:  (((x97 * -1.792755254768521))**((x89)**(x57)) * ((x63)**(x33) + (x42 - 0.43687098901614174)))', 'Equation constants: {0: np.float64(-0.2859324993063872), 1: np.float64(-0.2859324993063872)}\nTree:  (cos((x32)**(-0.2859324993063872)) cos (x79)**(-0.2859324993063872))', 'Equation constants: {1: np.float64(7.6970412465640585), 2: np.float64(7.6970412465640585)}\nTree:  ((x39 / ((x55 / 7.6970412465640585))**(cos(7.6970412465640585))) / x55)', 'Equation constants: {0: np.float64(0.5403377070396777), 1: np.float64(0.5403377070396777), 2: np.float64(0.5403377070396777)}\nTree:  (((x78)**(0.5403377070396777) * (0.5403377070396777 / x21)) + 0.5403377070396777)', 'Equation constants: {0: np.float64(0.5403377037274448), 1: np.float64(0.5403377037274448), 2: np.float64(0.5403377037274448)}\nTree:  (((x78)**(0.5403377037274448) * (0.5403377037274448 / x21)) + 0.5403377037274448)', 'Equation constants: {0: np.float64(0.540337636742883), 1: np.float64(0.540337636742883), 2: np.float64(0.540337636742883)}\nTree:  (((x78)**(0.540337636742883) * (0.540337636742883 / x21)) + 0.540337636742883)', 'Equation constants: {0: np.float64(0.1096300142429385), 1: np.float64(0.1096300142429385), 2: np.float64(0.1096300142429385), 3: np.float64(0.1096300142429385)}\nTree:  (((x78)**(const((x57 * 0.1096300142429385))) * (0.1096300142429385 / x21)) + 0.1096300142429385)', 'Equation constants: {1: np.float64(4.869328661679695), 2: np.float64(4.869328661679695)}\nTree:  ((x39 / ((x55 / 4.869328661679695))**(cos(4.869328661679695))) / x55)']
MSE: [np.float64(4.716141580046874e+79), np.float64(6.094599800024238e+79), np.float64(0.3381808517163437), np.float64(2.125540359834994e+58), np.float64(1.0172599744826063), np.float64(4435165759001.871), np.float64(18.346419668507345), np.float64(0.4999989961896353), np.float64(1.4372911929470992e+20), np.float64(2.052661529028581e+58)]
Generators: ['Generator(mode=real, range=(-2, 2), n_g=801, sigma_y=0.048789285676554335, unit=1.5070629190790903)', 'Generator(mode=real, range=(-5, 5), n_g=629, sigma_y=0.02807287933001928, unit=1.1358777735919614)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=586, sigma_y=0.008655378130783634, unit=1.7540539510117807)', 'Generator(mode=real, range=(-2, 2), n_g=372, sigma_y=0.018703527255394748, unit=1.6014209496551444)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.028192329903872475, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=750, sigma_y=0.03549159248870221, unit=1.847182889285445)', 'Generator(mode=real, range=(0, 1), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=269, sigma_y=0.01235566954845859, unit=1.5734431332033778)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.640858015069615, 2.359141984930385), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0, 1), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.007480188969446932, unit=0.6934657012952925)', 'Generator(mode=real, range=(0, 1), n_g=341, sigma_y=0.03306878132192486, unit=0.5859747828302897)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0, 1), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.028192329903872475, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.006233490807872444, unit=0.6241191311657632)']
Gen 3: 4 equations and 9 generators passed MC.
  Queue sizes - Equations: 21, Generators: 39
Equations: ['Equation constants: {}\nTree:  cos(x99)', 'Equation constants: {0: -1.4961296479124595}\nTree:  (-1.4961296479124595 / cos(x96))', 'Equation constants: {0: -1.7207536321817454}\nTree:  sin((x59 - -1.7207536321817454))', 'Equation constants: {0: -1.6072172660620279, 1: 1.8306111152248032, 2: -1.3882205139541832}\nTree:  (((x78)**(-1.6072172660620279) * (1.8306111152248032 / x21)) + -1.3882205139541832)', 'Equation constants: {0: -0.7030773884006742}\nTree:  ((cos(-0.7030773884006742) - (x74 * x19)) * (sin(x50) + (x59)**(x50)))', 'Equation constants: {}\nTree:  (x65 * ((x29 + x88) / (x51)**(x47)))', 'Equation constants: {0: -0.5807659395041891, 1: -1.2418306074106926}\nTree:  (((x33 + x27) * x99) / (-0.5807659395041891)**((-1.2418306074106926 - x81)))', 'Equation constants: {0: -0.32600200482179353}\nTree:  cos(cos((x32)**(-0.32600200482179353)))', 'Equation constants: {}\nTree:  cos(sin(x69))', 'Equation constants: {0: -1.792755254768521, 1: 0.43687098901614174}\nTree:  (((x97 * -1.792755254768521))**((x89)**(x57)) * ((x63)**(x33) + (x42 - 0.43687098901614174)))', 'Equation constants: {0: np.float64(-0.2859324993063872), 1: np.float64(-0.2859324993063872)}\nTree:  (cos((x32)**(-0.2859324993063872)) cos (x79)**(-0.2859324993063872))', 'Equation constants: {1: np.float64(7.6970412465640585), 2: np.float64(7.6970412465640585)}\nTree:  ((x39 / ((x55 / 7.6970412465640585))**(cos(7.6970412465640585))) / x55)', 'Equation constants: {0: np.float64(0.5403377070396777), 1: np.float64(0.5403377070396777), 2: np.float64(0.5403377070396777)}\nTree:  (((x78)**(0.5403377070396777) * (0.5403377070396777 / x21)) + 0.5403377070396777)', 'Equation constants: {0: np.float64(0.5403377037274448), 1: np.float64(0.5403377037274448), 2: np.float64(0.5403377037274448)}\nTree:  (((x78)**(0.5403377037274448) * (0.5403377037274448 / x21)) + 0.5403377037274448)', 'Equation constants: {0: np.float64(0.540337636742883), 1: np.float64(0.540337636742883), 2: np.float64(0.540337636742883)}\nTree:  (((x78)**(0.540337636742883) * (0.540337636742883 / x21)) + 0.540337636742883)', 'Equation constants: {0: np.float64(0.1096300142429385), 1: np.float64(0.1096300142429385), 2: np.float64(0.1096300142429385), 3: np.float64(0.1096300142429385)}\nTree:  (((x78)**(const((x57 * 0.1096300142429385))) * (0.1096300142429385 / x21)) + 0.1096300142429385)', 'Equation constants: {1: np.float64(4.869328661679695), 2: np.float64(4.869328661679695)}\nTree:  ((x39 / ((x55 / 4.869328661679695))**(cos(4.869328661679695))) / x55)', 'Equation constants: {0: np.float64(-8.82170834284384), 1: np.float64(-8.82170834284384), 2: np.float64(-8.82170834284384)}\nTree:  (cos((x32)**(-8.82170834284384)) cos (cos(cos((x5)**(-8.82170834284384))))**(-8.82170834284384))', 'Equation constants: {1: np.float64(-7.697041544245965), 2: np.float64(-7.697041544245965)}\nTree:  ((x39 / ((x55 / -7.697041544245965))**(cos(-7.697041544245965))) / x55)', 'Equation constants: {1: np.float64(-7.697046757462657), 2: np.float64(-7.697046757462657)}\nTree:  ((x39 / ((x55 / -7.697046757462657))**(cos(-7.697046757462657))) / x55)', 'Equation constants: {0: np.float64(0.5403376977852793), 1: np.float64(0.5403376977852793), 2: np.float64(0.5403376977852793)}\nTree:  (((x78)**(0.5403376977852793) * (0.5403376977852793 / x21)) + 0.5403376977852793)']
MSE: [np.float64(0.3979332005430593), np.float64(0.4999989961896353), np.float64(0.49998480964673775), np.float64(0.30493882844339015), np.float64(2.125540359834994e+58), np.float64(1.3179796653466331e+34), np.float64(2.125540359834994e+58), np.float64(0.295185554114226), np.float64(1.0172599744826063), np.float64(5.99770388684516e+79)]
Generators: ['Generator(mode=real, range=(-2, 2), n_g=801, sigma_y=0.048789285676554335, unit=1.5070629190790903)', 'Generator(mode=real, range=(-5, 5), n_g=629, sigma_y=0.02807287933001928, unit=1.1358777735919614)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=586, sigma_y=0.008655378130783634, unit=1.7540539510117807)', 'Generator(mode=real, range=(-2, 2), n_g=372, sigma_y=0.018703527255394748, unit=1.6014209496551444)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.028192329903872475, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=750, sigma_y=0.03549159248870221, unit=1.847182889285445)', 'Generator(mode=real, range=(0, 1), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=269, sigma_y=0.01235566954845859, unit=1.5734431332033778)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.640858015069615, 2.359141984930385), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0, 1), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.007480188969446932, unit=0.6934657012952925)', 'Generator(mode=real, range=(0, 1), n_g=341, sigma_y=0.03306878132192486, unit=0.5859747828302897)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0, 1), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.028192329903872475, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.006233490807872444, unit=0.6241191311657632)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=622, sigma_y=0.006233490807872444, unit=0.7628122714248218)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(-1.88, 3.88), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.008536247574377131, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.028192329903872475, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.0049867926462979556, unit=0.6241191311657632)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.0049867926462979556, unit=0.6934657012952925)']
Gen 4: 4 equations and 8 generators passed MC.
  Queue sizes - Equations: 25, Generators: 40
Equations: ['Equation constants: {}\nTree:  cos(x99)', 'Equation constants: {0: -1.4961296479124595}\nTree:  (-1.4961296479124595 / cos(x96))', 'Equation constants: {0: -1.7207536321817454}\nTree:  sin((x59 - -1.7207536321817454))', 'Equation constants: {0: -1.6072172660620279, 1: 1.8306111152248032, 2: -1.3882205139541832}\nTree:  (((x78)**(-1.6072172660620279) * (1.8306111152248032 / x21)) + -1.3882205139541832)', 'Equation constants: {0: -0.7030773884006742}\nTree:  ((cos(-0.7030773884006742) - (x74 * x19)) * (sin(x50) + (x59)**(x50)))', 'Equation constants: {}\nTree:  (x65 * ((x29 + x88) / (x51)**(x47)))', 'Equation constants: {0: -0.5807659395041891, 1: -1.2418306074106926}\nTree:  (((x33 + x27) * x99) / (-0.5807659395041891)**((-1.2418306074106926 - x81)))', 'Equation constants: {0: -0.32600200482179353}\nTree:  cos(cos((x32)**(-0.32600200482179353)))', 'Equation constants: {}\nTree:  cos(sin(x69))', 'Equation constants: {0: -1.792755254768521, 1: 0.43687098901614174}\nTree:  (((x97 * -1.792755254768521))**((x89)**(x57)) * ((x63)**(x33) + (x42 - 0.43687098901614174)))', 'Equation constants: {0: np.float64(-0.2859324993063872), 1: np.float64(-0.2859324993063872)}\nTree:  (cos((x32)**(-0.2859324993063872)) cos (x79)**(-0.2859324993063872))', 'Equation constants: {1: np.float64(7.6970412465640585), 2: np.float64(7.6970412465640585)}\nTree:  ((x39 / ((x55 / 7.6970412465640585))**(cos(7.6970412465640585))) / x55)', 'Equation constants: {0: np.float64(0.5403377070396777), 1: np.float64(0.5403377070396777), 2: np.float64(0.5403377070396777)}\nTree:  (((x78)**(0.5403377070396777) * (0.5403377070396777 / x21)) + 0.5403377070396777)', 'Equation constants: {0: np.float64(0.5403377037274448), 1: np.float64(0.5403377037274448), 2: np.float64(0.5403377037274448)}\nTree:  (((x78)**(0.5403377037274448) * (0.5403377037274448 / x21)) + 0.5403377037274448)', 'Equation constants: {0: np.float64(0.540337636742883), 1: np.float64(0.540337636742883), 2: np.float64(0.540337636742883)}\nTree:  (((x78)**(0.540337636742883) * (0.540337636742883 / x21)) + 0.540337636742883)', 'Equation constants: {0: np.float64(0.1096300142429385), 1: np.float64(0.1096300142429385), 2: np.float64(0.1096300142429385), 3: np.float64(0.1096300142429385)}\nTree:  (((x78)**(const((x57 * 0.1096300142429385))) * (0.1096300142429385 / x21)) + 0.1096300142429385)', 'Equation constants: {1: np.float64(4.869328661679695), 2: np.float64(4.869328661679695)}\nTree:  ((x39 / ((x55 / 4.869328661679695))**(cos(4.869328661679695))) / x55)', 'Equation constants: {0: np.float64(-8.82170834284384), 1: np.float64(-8.82170834284384), 2: np.float64(-8.82170834284384)}\nTree:  (cos((x32)**(-8.82170834284384)) cos (cos(cos((x5)**(-8.82170834284384))))**(-8.82170834284384))', 'Equation constants: {1: np.float64(-7.697041544245965), 2: np.float64(-7.697041544245965)}\nTree:  ((x39 / ((x55 / -7.697041544245965))**(cos(-7.697041544245965))) / x55)', 'Equation constants: {1: np.float64(-7.697046757462657), 2: np.float64(-7.697046757462657)}\nTree:  ((x39 / ((x55 / -7.697046757462657))**(cos(-7.697046757462657))) / x55)', 'Equation constants: {0: np.float64(0.5403376977852793), 1: np.float64(0.5403376977852793), 2: np.float64(0.5403376977852793)}\nTree:  (((x78)**(0.5403376977852793) * (0.5403376977852793 / x21)) + 0.5403376977852793)', 'Equation constants: {0: np.float64(0.5004732830656768), 1: np.float64(0.5004732830656768), 2: np.float64(0.5004732830656768)}\nTree:  (((x78)**(0.5004732830656768) * (0.5004732830656768 / x21)) + 0.5004732830656768)', 'Equation constants: {1: np.float64(1.413855526005103), 2: np.float64(1.413855526005103)}\nTree:  ((x39 / ((x55((x2 + x31)) / 1.413855526005103))**(cos(1.413855526005103))) / x55)', 'Equation constants: {0: np.float64(0.49999999999999956)}\nTree:  0.49999999999999956', 'Equation constants: {3: np.float64(39.81092735933374), 4: np.float64(39.81092735933374)}\nTree:  ((x39 / (39.81092735933374 + 39.81092735933374)) / x55)']
MSE: [np.float64(0.49996582072466306), np.float64(1.0172599744826063), np.float64(0.2951856309719693), np.float64(0.3381808517163437), np.float64(0.4999989961896353), np.float64(4434337546101.609), np.float64(6.034832463579786e+79), np.float64(0.32891569595471043), np.float64(0.25), np.float64(0.5319745794050553)]
Generators: ['Generator(mode=real, range=(0, 1), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=269, sigma_y=0.01235566954845859, unit=1.5734431332033778)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.640858015069615, 2.359141984930385), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0, 1), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.007480188969446932, unit=0.6934657012952925)', 'Generator(mode=real, range=(0, 1), n_g=341, sigma_y=0.03306878132192486, unit=0.5859747828302897)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0, 1), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.028192329903872475, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.006233490807872444, unit=0.6241191311657632)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=622, sigma_y=0.006233490807872444, unit=0.7628122714248218)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(-1.88, 3.88), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.008536247574377131, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.028192329903872475, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.0049867926462979556, unit=0.6241191311657632)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.0049867926462979556, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.88, 3.88), n_g=590, sigma_y=0.006233490807872444, unit=0.7628122714248218)', 'Generator(mode=real, range=(-2.267474659271858, 1.732525340728142), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(0, 1), n_g=341, sigma_y=0.03306878132192486, unit=0.5859747828302897)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(-1.88, 3.88), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)']
Gen 5: 6 equations and 10 generators passed MC.
  Queue sizes - Equations: 31, Generators: 40
Equations: ['Equation constants: {}\nTree:  cos(x99)', 'Equation constants: {0: -1.4961296479124595}\nTree:  (-1.4961296479124595 / cos(x96))', 'Equation constants: {0: -1.7207536321817454}\nTree:  sin((x59 - -1.7207536321817454))', 'Equation constants: {0: -1.6072172660620279, 1: 1.8306111152248032, 2: -1.3882205139541832}\nTree:  (((x78)**(-1.6072172660620279) * (1.8306111152248032 / x21)) + -1.3882205139541832)', 'Equation constants: {0: -0.7030773884006742}\nTree:  ((cos(-0.7030773884006742) - (x74 * x19)) * (sin(x50) + (x59)**(x50)))', 'Equation constants: {}\nTree:  (x65 * ((x29 + x88) / (x51)**(x47)))', 'Equation constants: {0: -0.5807659395041891, 1: -1.2418306074106926}\nTree:  (((x33 + x27) * x99) / (-0.5807659395041891)**((-1.2418306074106926 - x81)))', 'Equation constants: {0: -0.32600200482179353}\nTree:  cos(cos((x32)**(-0.32600200482179353)))', 'Equation constants: {}\nTree:  cos(sin(x69))', 'Equation constants: {0: -1.792755254768521, 1: 0.43687098901614174}\nTree:  (((x97 * -1.792755254768521))**((x89)**(x57)) * ((x63)**(x33) + (x42 - 0.43687098901614174)))', 'Equation constants: {0: np.float64(-0.2859324993063872), 1: np.float64(-0.2859324993063872)}\nTree:  (cos((x32)**(-0.2859324993063872)) cos (x79)**(-0.2859324993063872))', 'Equation constants: {1: np.float64(7.6970412465640585), 2: np.float64(7.6970412465640585)}\nTree:  ((x39 / ((x55 / 7.6970412465640585))**(cos(7.6970412465640585))) / x55)', 'Equation constants: {0: np.float64(0.5403377070396777), 1: np.float64(0.5403377070396777), 2: np.float64(0.5403377070396777)}\nTree:  (((x78)**(0.5403377070396777) * (0.5403377070396777 / x21)) + 0.5403377070396777)', 'Equation constants: {0: np.float64(0.5403377037274448), 1: np.float64(0.5403377037274448), 2: np.float64(0.5403377037274448)}\nTree:  (((x78)**(0.5403377037274448) * (0.5403377037274448 / x21)) + 0.5403377037274448)', 'Equation constants: {0: np.float64(0.540337636742883), 1: np.float64(0.540337636742883), 2: np.float64(0.540337636742883)}\nTree:  (((x78)**(0.540337636742883) * (0.540337636742883 / x21)) + 0.540337636742883)', 'Equation constants: {0: np.float64(0.1096300142429385), 1: np.float64(0.1096300142429385), 2: np.float64(0.1096300142429385), 3: np.float64(0.1096300142429385)}\nTree:  (((x78)**(const((x57 * 0.1096300142429385))) * (0.1096300142429385 / x21)) + 0.1096300142429385)', 'Equation constants: {1: np.float64(4.869328661679695), 2: np.float64(4.869328661679695)}\nTree:  ((x39 / ((x55 / 4.869328661679695))**(cos(4.869328661679695))) / x55)', 'Equation constants: {0: np.float64(-8.82170834284384), 1: np.float64(-8.82170834284384), 2: np.float64(-8.82170834284384)}\nTree:  (cos((x32)**(-8.82170834284384)) cos (cos(cos((x5)**(-8.82170834284384))))**(-8.82170834284384))', 'Equation constants: {1: np.float64(-7.697041544245965), 2: np.float64(-7.697041544245965)}\nTree:  ((x39 / ((x55 / -7.697041544245965))**(cos(-7.697041544245965))) / x55)', 'Equation constants: {1: np.float64(-7.697046757462657), 2: np.float64(-7.697046757462657)}\nTree:  ((x39 / ((x55 / -7.697046757462657))**(cos(-7.697046757462657))) / x55)', 'Equation constants: {0: np.float64(0.5403376977852793), 1: np.float64(0.5403376977852793), 2: np.float64(0.5403376977852793)}\nTree:  (((x78)**(0.5403376977852793) * (0.5403376977852793 / x21)) + 0.5403376977852793)', 'Equation constants: {0: np.float64(0.5004732830656768), 1: np.float64(0.5004732830656768), 2: np.float64(0.5004732830656768)}\nTree:  (((x78)**(0.5004732830656768) * (0.5004732830656768 / x21)) + 0.5004732830656768)', 'Equation constants: {1: np.float64(1.413855526005103), 2: np.float64(1.413855526005103)}\nTree:  ((x39 / ((x55((x2 + x31)) / 1.413855526005103))**(cos(1.413855526005103))) / x55)', 'Equation constants: {0: np.float64(0.49999999999999956)}\nTree:  0.49999999999999956', 'Equation constants: {3: np.float64(39.81092735933374), 4: np.float64(39.81092735933374)}\nTree:  ((x39 / (39.81092735933374 + 39.81092735933374)) / x55)', 'Equation constants: {1: np.float64(4.868357922400472), 2: np.float64(4.868357922400472)}\nTree:  ((x39 / ((x55)**(4.868357922400472))**(cos(4.868357922400472))) / x55)', 'Equation constants: {0: np.float64(-11.20014610188353)}\nTree:  cos(cos((x32)**(-11.20014610188353)))', 'Equation constants: {0: np.float64(0.540337700308826), 1: np.float64(0.540337700308826), 2: np.float64(0.540337700308826)}\nTree:  (((x78)**(0.540337700308826) * (0.540337700308826 / x21)) + 0.540337700308826)', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-4.869322397581936), 2: np.float64(-4.869322397581936)}\nTree:  ((x39 / ((x55 / -4.869322397581936))**(cos(-4.869322397581936))) / x55)', 'Equation constants: {0: np.float64(-0.4750997494880746), 2: np.float64(-0.4750997494880746)}\nTree:  (((x78)**(-0.4750997494880746) * (x39 / x21)) + -0.4750997494880746)']
MSE: [np.float64(0.2844545359954902), np.float64(4377196980516826.0), np.float64(0.2521612222031974), np.float64(123.04735504042127), np.float64(0.2526131101712925), np.float64(0.2951855944799575), np.float64(3.103486865846608e+30), np.float64(0.49996582072466306), np.float64(0.25), np.float64(0.4999989961896353), np.float64(0.8585368292125851), np.float64(16.455506755692497)]
Generators: ['Generator(mode=real, range=(0, 1), n_g=341, sigma_y=0.03306878132192486, unit=0.5859747828302897)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0, 1), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.028192329903872475, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.006233490807872444, unit=0.6241191311657632)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=622, sigma_y=0.006233490807872444, unit=0.7628122714248218)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(-1.88, 3.88), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.008536247574377131, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.028192329903872475, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.0049867926462979556, unit=0.6241191311657632)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.0049867926462979556, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.88, 3.88), n_g=590, sigma_y=0.006233490807872444, unit=0.7628122714248218)', 'Generator(mode=real, range=(-2.267474659271858, 1.732525340728142), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(0, 1), n_g=341, sigma_y=0.03306878132192486, unit=0.5859747828302897)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(-1.88, 3.88), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.03383079588464697, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.5273773045472607)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.007480188969446932, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=590, sigma_y=0.006233490807872444, unit=0.7628122714248218)']
Gen 6: 5 equations and 10 generators passed MC.
  Queue sizes - Equations: 36, Generators: 40
Equations: ['Equation constants: {}\nTree:  cos(x99)', 'Equation constants: {0: -1.4961296479124595}\nTree:  (-1.4961296479124595 / cos(x96))', 'Equation constants: {0: -1.7207536321817454}\nTree:  sin((x59 - -1.7207536321817454))', 'Equation constants: {0: -1.6072172660620279, 1: 1.8306111152248032, 2: -1.3882205139541832}\nTree:  (((x78)**(-1.6072172660620279) * (1.8306111152248032 / x21)) + -1.3882205139541832)', 'Equation constants: {0: -0.7030773884006742}\nTree:  ((cos(-0.7030773884006742) - (x74 * x19)) * (sin(x50) + (x59)**(x50)))', 'Equation constants: {}\nTree:  (x65 * ((x29 + x88) / (x51)**(x47)))', 'Equation constants: {0: -0.5807659395041891, 1: -1.2418306074106926}\nTree:  (((x33 + x27) * x99) / (-0.5807659395041891)**((-1.2418306074106926 - x81)))', 'Equation constants: {0: -0.32600200482179353}\nTree:  cos(cos((x32)**(-0.32600200482179353)))', 'Equation constants: {}\nTree:  cos(sin(x69))', 'Equation constants: {0: -1.792755254768521, 1: 0.43687098901614174}\nTree:  (((x97 * -1.792755254768521))**((x89)**(x57)) * ((x63)**(x33) + (x42 - 0.43687098901614174)))', 'Equation constants: {0: np.float64(-0.2859324993063872), 1: np.float64(-0.2859324993063872)}\nTree:  (cos((x32)**(-0.2859324993063872)) cos (x79)**(-0.2859324993063872))', 'Equation constants: {1: np.float64(7.6970412465640585), 2: np.float64(7.6970412465640585)}\nTree:  ((x39 / ((x55 / 7.6970412465640585))**(cos(7.6970412465640585))) / x55)', 'Equation constants: {0: np.float64(0.5403377070396777), 1: np.float64(0.5403377070396777), 2: np.float64(0.5403377070396777)}\nTree:  (((x78)**(0.5403377070396777) * (0.5403377070396777 / x21)) + 0.5403377070396777)', 'Equation constants: {0: np.float64(0.5403377037274448), 1: np.float64(0.5403377037274448), 2: np.float64(0.5403377037274448)}\nTree:  (((x78)**(0.5403377037274448) * (0.5403377037274448 / x21)) + 0.5403377037274448)', 'Equation constants: {0: np.float64(0.540337636742883), 1: np.float64(0.540337636742883), 2: np.float64(0.540337636742883)}\nTree:  (((x78)**(0.540337636742883) * (0.540337636742883 / x21)) + 0.540337636742883)', 'Equation constants: {0: np.float64(0.1096300142429385), 1: np.float64(0.1096300142429385), 2: np.float64(0.1096300142429385), 3: np.float64(0.1096300142429385)}\nTree:  (((x78)**(const((x57 * 0.1096300142429385))) * (0.1096300142429385 / x21)) + 0.1096300142429385)', 'Equation constants: {1: np.float64(4.869328661679695), 2: np.float64(4.869328661679695)}\nTree:  ((x39 / ((x55 / 4.869328661679695))**(cos(4.869328661679695))) / x55)', 'Equation constants: {0: np.float64(-8.82170834284384), 1: np.float64(-8.82170834284384), 2: np.float64(-8.82170834284384)}\nTree:  (cos((x32)**(-8.82170834284384)) cos (cos(cos((x5)**(-8.82170834284384))))**(-8.82170834284384))', 'Equation constants: {1: np.float64(-7.697041544245965), 2: np.float64(-7.697041544245965)}\nTree:  ((x39 / ((x55 / -7.697041544245965))**(cos(-7.697041544245965))) / x55)', 'Equation constants: {1: np.float64(-7.697046757462657), 2: np.float64(-7.697046757462657)}\nTree:  ((x39 / ((x55 / -7.697046757462657))**(cos(-7.697046757462657))) / x55)', 'Equation constants: {0: np.float64(0.5403376977852793), 1: np.float64(0.5403376977852793), 2: np.float64(0.5403376977852793)}\nTree:  (((x78)**(0.5403376977852793) * (0.5403376977852793 / x21)) + 0.5403376977852793)', 'Equation constants: {0: np.float64(0.5004732830656768), 1: np.float64(0.5004732830656768), 2: np.float64(0.5004732830656768)}\nTree:  (((x78)**(0.5004732830656768) * (0.5004732830656768 / x21)) + 0.5004732830656768)', 'Equation constants: {1: np.float64(1.413855526005103), 2: np.float64(1.413855526005103)}\nTree:  ((x39 / ((x55((x2 + x31)) / 1.413855526005103))**(cos(1.413855526005103))) / x55)', 'Equation constants: {0: np.float64(0.49999999999999956)}\nTree:  0.49999999999999956', 'Equation constants: {3: np.float64(39.81092735933374), 4: np.float64(39.81092735933374)}\nTree:  ((x39 / (39.81092735933374 + 39.81092735933374)) / x55)', 'Equation constants: {1: np.float64(4.868357922400472), 2: np.float64(4.868357922400472)}\nTree:  ((x39 / ((x55)**(4.868357922400472))**(cos(4.868357922400472))) / x55)', 'Equation constants: {0: np.float64(-11.20014610188353)}\nTree:  cos(cos((x32)**(-11.20014610188353)))', 'Equation constants: {0: np.float64(0.540337700308826), 1: np.float64(0.540337700308826), 2: np.float64(0.540337700308826)}\nTree:  (((x78)**(0.540337700308826) * (0.540337700308826 / x21)) + 0.540337700308826)', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-4.869322397581936), 2: np.float64(-4.869322397581936)}\nTree:  ((x39 / ((x55 / -4.869322397581936))**(cos(-4.869322397581936))) / x55)', 'Equation constants: {0: np.float64(-0.4750997494880746), 2: np.float64(-0.4750997494880746)}\nTree:  (((x78)**(-0.4750997494880746) * (x39 / x21)) + -0.4750997494880746)', 'Equation constants: {0: np.float64(0.5403376847595412), 1: np.float64(0.5403376847595412), 2: np.float64(0.5403376847595412)}\nTree:  (((x78)**(0.5403376847595412) * (0.5403376847595412 / x21)) + 0.5403376847595412)', 'Equation constants: {0: np.float64(0.5403376876919563), 1: np.float64(0.5403376876919563), 2: np.float64(0.5403376876919563)}\nTree:  (((x78)**(0.5403376876919563) * (0.5403376876919563 / x21)) + 0.5403376876919563)', 'Equation constants: {0: np.float64(7.6593937861287245), 1: np.float64(7.6593937861287245), 2: np.float64(7.6593937861287245)}\nTree:  (cos((x32)**(7.6593937861287245)) sin (cos(cos((x5)**(7.6593937861287245))))**(7.6593937861287245))', 'Equation constants: {0: np.float64(-7.304362747001784), 1: np.float64(-7.304362747001784), 2: np.float64(-7.304362747001784)}\nTree:  (cos((x32)**(-7.304362747001784)) cos (cos(cos((x5)**(-7.304362747001784))))**(-7.304362747001784))', 'Equation constants: {1: np.float64(-1.4138540632846681), 2: np.float64(-1.4138540632846681)}\nTree:  ((x39 / ((x55 / -1.4138540632846681))**(cos(-1.4138540632846681))) / x55)']
MSE: [np.float64(0.29518562296339407), np.float64(0.2951856067187746), np.float64(0.45894445956457935), np.float64(0.2534488557072354), np.float64(0.9749815370309957), np.float64(1.6116390380544658e+21), np.float64(0.39504682047040346), np.float64(6.094571766215262e+79), np.float64(285325570806.12494), np.float64(1.3180112866231884e+34)]
Generators: ['Generator(mode=real, range=(-0.6, 2.6), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.006233490807872444, unit=0.6241191311657632)', 'Generator(mode=real, range=(-0.6, 2.6), n_g=622, sigma_y=0.006233490807872444, unit=0.7628122714248218)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(-1.88, 3.88), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.008536247574377131, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.028192329903872475, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.0049867926462979556, unit=0.6241191311657632)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.0049867926462979556, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.88, 3.88), n_g=590, sigma_y=0.006233490807872444, unit=0.7628122714248218)', 'Generator(mode=real, range=(-2.267474659271858, 1.732525340728142), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(0, 1), n_g=341, sigma_y=0.03306878132192486, unit=0.5859747828302897)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(-1.88, 3.88), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.03383079588464697, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.5273773045472607)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.007480188969446932, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=590, sigma_y=0.006233490807872444, unit=0.7628122714248218)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.02645502505753989, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.008536247574377131, unit=0.7720243617478257)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=590, sigma_y=0.0049867926462979556, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.3039999999999998, 3.304), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2.217927403133855, 3.5420725968661446), n_g=590, sigma_y=0.006233490807872444, unit=0.7628122714248218)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.012804371361565698, unit=0.857804846386473)']
Gen 7: 3 equations and 10 generators passed MC.
  Queue sizes - Equations: 39, Generators: 40
Equations: ['Equation constants: {}\nTree:  cos(x99)', 'Equation constants: {0: -1.4961296479124595}\nTree:  (-1.4961296479124595 / cos(x96))', 'Equation constants: {0: -1.7207536321817454}\nTree:  sin((x59 - -1.7207536321817454))', 'Equation constants: {0: -1.6072172660620279, 1: 1.8306111152248032, 2: -1.3882205139541832}\nTree:  (((x78)**(-1.6072172660620279) * (1.8306111152248032 / x21)) + -1.3882205139541832)', 'Equation constants: {0: -0.7030773884006742}\nTree:  ((cos(-0.7030773884006742) - (x74 * x19)) * (sin(x50) + (x59)**(x50)))', 'Equation constants: {}\nTree:  (x65 * ((x29 + x88) / (x51)**(x47)))', 'Equation constants: {0: -0.5807659395041891, 1: -1.2418306074106926}\nTree:  (((x33 + x27) * x99) / (-0.5807659395041891)**((-1.2418306074106926 - x81)))', 'Equation constants: {0: -0.32600200482179353}\nTree:  cos(cos((x32)**(-0.32600200482179353)))', 'Equation constants: {}\nTree:  cos(sin(x69))', 'Equation constants: {0: -1.792755254768521, 1: 0.43687098901614174}\nTree:  (((x97 * -1.792755254768521))**((x89)**(x57)) * ((x63)**(x33) + (x42 - 0.43687098901614174)))', 'Equation constants: {0: np.float64(-0.2859324993063872), 1: np.float64(-0.2859324993063872)}\nTree:  (cos((x32)**(-0.2859324993063872)) cos (x79)**(-0.2859324993063872))', 'Equation constants: {1: np.float64(7.6970412465640585), 2: np.float64(7.6970412465640585)}\nTree:  ((x39 / ((x55 / 7.6970412465640585))**(cos(7.6970412465640585))) / x55)', 'Equation constants: {0: np.float64(0.5403377070396777), 1: np.float64(0.5403377070396777), 2: np.float64(0.5403377070396777)}\nTree:  (((x78)**(0.5403377070396777) * (0.5403377070396777 / x21)) + 0.5403377070396777)', 'Equation constants: {0: np.float64(0.5403377037274448), 1: np.float64(0.5403377037274448), 2: np.float64(0.5403377037274448)}\nTree:  (((x78)**(0.5403377037274448) * (0.5403377037274448 / x21)) + 0.5403377037274448)', 'Equation constants: {0: np.float64(0.540337636742883), 1: np.float64(0.540337636742883), 2: np.float64(0.540337636742883)}\nTree:  (((x78)**(0.540337636742883) * (0.540337636742883 / x21)) + 0.540337636742883)', 'Equation constants: {0: np.float64(0.1096300142429385), 1: np.float64(0.1096300142429385), 2: np.float64(0.1096300142429385), 3: np.float64(0.1096300142429385)}\nTree:  (((x78)**(const((x57 * 0.1096300142429385))) * (0.1096300142429385 / x21)) + 0.1096300142429385)', 'Equation constants: {1: np.float64(4.869328661679695), 2: np.float64(4.869328661679695)}\nTree:  ((x39 / ((x55 / 4.869328661679695))**(cos(4.869328661679695))) / x55)', 'Equation constants: {0: np.float64(-8.82170834284384), 1: np.float64(-8.82170834284384), 2: np.float64(-8.82170834284384)}\nTree:  (cos((x32)**(-8.82170834284384)) cos (cos(cos((x5)**(-8.82170834284384))))**(-8.82170834284384))', 'Equation constants: {1: np.float64(-7.697041544245965), 2: np.float64(-7.697041544245965)}\nTree:  ((x39 / ((x55 / -7.697041544245965))**(cos(-7.697041544245965))) / x55)', 'Equation constants: {1: np.float64(-7.697046757462657), 2: np.float64(-7.697046757462657)}\nTree:  ((x39 / ((x55 / -7.697046757462657))**(cos(-7.697046757462657))) / x55)', 'Equation constants: {0: np.float64(0.5403376977852793), 1: np.float64(0.5403376977852793), 2: np.float64(0.5403376977852793)}\nTree:  (((x78)**(0.5403376977852793) * (0.5403376977852793 / x21)) + 0.5403376977852793)', 'Equation constants: {0: np.float64(0.5004732830656768), 1: np.float64(0.5004732830656768), 2: np.float64(0.5004732830656768)}\nTree:  (((x78)**(0.5004732830656768) * (0.5004732830656768 / x21)) + 0.5004732830656768)', 'Equation constants: {1: np.float64(1.413855526005103), 2: np.float64(1.413855526005103)}\nTree:  ((x39 / ((x55((x2 + x31)) / 1.413855526005103))**(cos(1.413855526005103))) / x55)', 'Equation constants: {0: np.float64(0.49999999999999956)}\nTree:  0.49999999999999956', 'Equation constants: {3: np.float64(39.81092735933374), 4: np.float64(39.81092735933374)}\nTree:  ((x39 / (39.81092735933374 + 39.81092735933374)) / x55)', 'Equation constants: {1: np.float64(4.868357922400472), 2: np.float64(4.868357922400472)}\nTree:  ((x39 / ((x55)**(4.868357922400472))**(cos(4.868357922400472))) / x55)', 'Equation constants: {0: np.float64(-11.20014610188353)}\nTree:  cos(cos((x32)**(-11.20014610188353)))', 'Equation constants: {0: np.float64(0.540337700308826), 1: np.float64(0.540337700308826), 2: np.float64(0.540337700308826)}\nTree:  (((x78)**(0.540337700308826) * (0.540337700308826 / x21)) + 0.540337700308826)', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-4.869322397581936), 2: np.float64(-4.869322397581936)}\nTree:  ((x39 / ((x55 / -4.869322397581936))**(cos(-4.869322397581936))) / x55)', 'Equation constants: {0: np.float64(-0.4750997494880746), 2: np.float64(-0.4750997494880746)}\nTree:  (((x78)**(-0.4750997494880746) * (x39 / x21)) + -0.4750997494880746)', 'Equation constants: {0: np.float64(0.5403376847595412), 1: np.float64(0.5403376847595412), 2: np.float64(0.5403376847595412)}\nTree:  (((x78)**(0.5403376847595412) * (0.5403376847595412 / x21)) + 0.5403376847595412)', 'Equation constants: {0: np.float64(0.5403376876919563), 1: np.float64(0.5403376876919563), 2: np.float64(0.5403376876919563)}\nTree:  (((x78)**(0.5403376876919563) * (0.5403376876919563 / x21)) + 0.5403376876919563)', 'Equation constants: {0: np.float64(7.6593937861287245), 1: np.float64(7.6593937861287245), 2: np.float64(7.6593937861287245)}\nTree:  (cos((x32)**(7.6593937861287245)) sin (cos(cos((x5)**(7.6593937861287245))))**(7.6593937861287245))', 'Equation constants: {0: np.float64(-7.304362747001784), 1: np.float64(-7.304362747001784), 2: np.float64(-7.304362747001784)}\nTree:  (cos((x32)**(-7.304362747001784)) cos (cos(cos((x5)**(-7.304362747001784))))**(-7.304362747001784))', 'Equation constants: {1: np.float64(-1.4138540632846681), 2: np.float64(-1.4138540632846681)}\nTree:  ((x39 / ((x55 / -1.4138540632846681))**(cos(-1.4138540632846681))) / x55)', 'Equation constants: {0: np.float64(0.5403377073274679), 1: np.float64(0.5403377073274679), 2: np.float64(0.5403377073274679)}\nTree:  (((x78)**(0.5403377073274679) * (0.5403377073274679 / x21)) + 0.5403377073274679)', 'Equation constants: {0: np.float64(-0.481184268977177), 1: np.float64(-0.481184268977177), 2: np.float64(-0.481184268977177)}\nTree:  (((x78)**(-0.481184268977177))**((-0.481184268977177 / x21)) + -0.481184268977177)', 'Equation constants: {0: np.float64(-0.002522797993847803), 1: np.float64(-0.002522797993847803), 2: np.float64(-0.002522797993847803)}\nTree:  (cos((x32)**(-0.002522797993847803)) cos (cos(cos((x5)**(-0.002522797993847803))))**(-0.002522797993847803))']
MSE: [np.float64(44266.20758615465), np.float64(0.3415787417407912), np.float64(0.49996582072466317), np.float64(0.29518554721102624), np.float64(0.9865424224617501), np.float64(7.9875424981114e+39), np.float64(0.25413018562949685), np.float64(1.318008163541486e+34), np.float64(0.2535580927841025), np.float64(0.4999989961896353)]
Generators: ['Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.0049867926462979556, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.88, 3.88), n_g=590, sigma_y=0.006233490807872444, unit=0.7628122714248218)', 'Generator(mode=real, range=(-2.267474659271858, 1.732525340728142), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(0, 1), n_g=341, sigma_y=0.03306878132192486, unit=0.5859747828302897)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(-1.88, 3.88), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.03383079588464697, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.5273773045472607)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.007480188969446932, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=590, sigma_y=0.006233490807872444, unit=0.7628122714248218)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.02645502505753989, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.008536247574377131, unit=0.7720243617478257)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=590, sigma_y=0.0049867926462979556, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.3039999999999998, 3.304), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2.217927403133855, 3.5420725968661446), n_g=590, sigma_y=0.006233490807872444, unit=0.7628122714248218)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.012804371361565698, unit=0.857804846386473)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-0.17948142867754932, 1.0205185713224507), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03968253758630983, unit=0.5859747828302897)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1.88, 3.88), n_g=558, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.021164020046031913, unit=0.5327043480275361)']
Gen 8: 4 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: -1.6072172660620279, 1: 1.8306111152248032, 2: -1.3882205139541832}\nTree:  (((x78)**(-1.6072172660620279) * (1.8306111152248032 / x21)) + -1.3882205139541832)', 'Equation constants: {0: -0.7030773884006742}\nTree:  ((cos(-0.7030773884006742) - (x74 * x19)) * (sin(x50) + (x59)**(x50)))', 'Equation constants: {}\nTree:  (x65 * ((x29 + x88) / (x51)**(x47)))', 'Equation constants: {0: -0.5807659395041891, 1: -1.2418306074106926}\nTree:  (((x33 + x27) * x99) / (-0.5807659395041891)**((-1.2418306074106926 - x81)))', 'Equation constants: {0: -0.32600200482179353}\nTree:  cos(cos((x32)**(-0.32600200482179353)))', 'Equation constants: {}\nTree:  cos(sin(x69))', 'Equation constants: {0: -1.792755254768521, 1: 0.43687098901614174}\nTree:  (((x97 * -1.792755254768521))**((x89)**(x57)) * ((x63)**(x33) + (x42 - 0.43687098901614174)))', 'Equation constants: {0: np.float64(-0.2859324993063872), 1: np.float64(-0.2859324993063872)}\nTree:  (cos((x32)**(-0.2859324993063872)) cos (x79)**(-0.2859324993063872))', 'Equation constants: {1: np.float64(7.6970412465640585), 2: np.float64(7.6970412465640585)}\nTree:  ((x39 / ((x55 / 7.6970412465640585))**(cos(7.6970412465640585))) / x55)', 'Equation constants: {0: np.float64(0.5403377070396777), 1: np.float64(0.5403377070396777), 2: np.float64(0.5403377070396777)}\nTree:  (((x78)**(0.5403377070396777) * (0.5403377070396777 / x21)) + 0.5403377070396777)', 'Equation constants: {0: np.float64(0.5403377037274448), 1: np.float64(0.5403377037274448), 2: np.float64(0.5403377037274448)}\nTree:  (((x78)**(0.5403377037274448) * (0.5403377037274448 / x21)) + 0.5403377037274448)', 'Equation constants: {0: np.float64(0.540337636742883), 1: np.float64(0.540337636742883), 2: np.float64(0.540337636742883)}\nTree:  (((x78)**(0.540337636742883) * (0.540337636742883 / x21)) + 0.540337636742883)', 'Equation constants: {0: np.float64(0.1096300142429385), 1: np.float64(0.1096300142429385), 2: np.float64(0.1096300142429385), 3: np.float64(0.1096300142429385)}\nTree:  (((x78)**(const((x57 * 0.1096300142429385))) * (0.1096300142429385 / x21)) + 0.1096300142429385)', 'Equation constants: {1: np.float64(4.869328661679695), 2: np.float64(4.869328661679695)}\nTree:  ((x39 / ((x55 / 4.869328661679695))**(cos(4.869328661679695))) / x55)', 'Equation constants: {0: np.float64(-8.82170834284384), 1: np.float64(-8.82170834284384), 2: np.float64(-8.82170834284384)}\nTree:  (cos((x32)**(-8.82170834284384)) cos (cos(cos((x5)**(-8.82170834284384))))**(-8.82170834284384))', 'Equation constants: {1: np.float64(-7.697041544245965), 2: np.float64(-7.697041544245965)}\nTree:  ((x39 / ((x55 / -7.697041544245965))**(cos(-7.697041544245965))) / x55)', 'Equation constants: {1: np.float64(-7.697046757462657), 2: np.float64(-7.697046757462657)}\nTree:  ((x39 / ((x55 / -7.697046757462657))**(cos(-7.697046757462657))) / x55)', 'Equation constants: {0: np.float64(0.5403376977852793), 1: np.float64(0.5403376977852793), 2: np.float64(0.5403376977852793)}\nTree:  (((x78)**(0.5403376977852793) * (0.5403376977852793 / x21)) + 0.5403376977852793)', 'Equation constants: {0: np.float64(0.5004732830656768), 1: np.float64(0.5004732830656768), 2: np.float64(0.5004732830656768)}\nTree:  (((x78)**(0.5004732830656768) * (0.5004732830656768 / x21)) + 0.5004732830656768)', 'Equation constants: {1: np.float64(1.413855526005103), 2: np.float64(1.413855526005103)}\nTree:  ((x39 / ((x55((x2 + x31)) / 1.413855526005103))**(cos(1.413855526005103))) / x55)', 'Equation constants: {0: np.float64(0.49999999999999956)}\nTree:  0.49999999999999956', 'Equation constants: {3: np.float64(39.81092735933374), 4: np.float64(39.81092735933374)}\nTree:  ((x39 / (39.81092735933374 + 39.81092735933374)) / x55)', 'Equation constants: {1: np.float64(4.868357922400472), 2: np.float64(4.868357922400472)}\nTree:  ((x39 / ((x55)**(4.868357922400472))**(cos(4.868357922400472))) / x55)', 'Equation constants: {0: np.float64(-11.20014610188353)}\nTree:  cos(cos((x32)**(-11.20014610188353)))', 'Equation constants: {0: np.float64(0.540337700308826), 1: np.float64(0.540337700308826), 2: np.float64(0.540337700308826)}\nTree:  (((x78)**(0.540337700308826) * (0.540337700308826 / x21)) + 0.540337700308826)', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-4.869322397581936), 2: np.float64(-4.869322397581936)}\nTree:  ((x39 / ((x55 / -4.869322397581936))**(cos(-4.869322397581936))) / x55)', 'Equation constants: {0: np.float64(-0.4750997494880746), 2: np.float64(-0.4750997494880746)}\nTree:  (((x78)**(-0.4750997494880746) * (x39 / x21)) + -0.4750997494880746)', 'Equation constants: {0: np.float64(0.5403376847595412), 1: np.float64(0.5403376847595412), 2: np.float64(0.5403376847595412)}\nTree:  (((x78)**(0.5403376847595412) * (0.5403376847595412 / x21)) + 0.5403376847595412)', 'Equation constants: {0: np.float64(0.5403376876919563), 1: np.float64(0.5403376876919563), 2: np.float64(0.5403376876919563)}\nTree:  (((x78)**(0.5403376876919563) * (0.5403376876919563 / x21)) + 0.5403376876919563)', 'Equation constants: {0: np.float64(7.6593937861287245), 1: np.float64(7.6593937861287245), 2: np.float64(7.6593937861287245)}\nTree:  (cos((x32)**(7.6593937861287245)) sin (cos(cos((x5)**(7.6593937861287245))))**(7.6593937861287245))', 'Equation constants: {0: np.float64(-7.304362747001784), 1: np.float64(-7.304362747001784), 2: np.float64(-7.304362747001784)}\nTree:  (cos((x32)**(-7.304362747001784)) cos (cos(cos((x5)**(-7.304362747001784))))**(-7.304362747001784))', 'Equation constants: {1: np.float64(-1.4138540632846681), 2: np.float64(-1.4138540632846681)}\nTree:  ((x39 / ((x55 / -1.4138540632846681))**(cos(-1.4138540632846681))) / x55)', 'Equation constants: {0: np.float64(0.5403377073274679), 1: np.float64(0.5403377073274679), 2: np.float64(0.5403377073274679)}\nTree:  (((x78)**(0.5403377073274679) * (0.5403377073274679 / x21)) + 0.5403377073274679)', 'Equation constants: {0: np.float64(-0.481184268977177), 1: np.float64(-0.481184268977177), 2: np.float64(-0.481184268977177)}\nTree:  (((x78)**(-0.481184268977177))**((-0.481184268977177 / x21)) + -0.481184268977177)', 'Equation constants: {0: np.float64(-0.002522797993847803), 1: np.float64(-0.002522797993847803), 2: np.float64(-0.002522797993847803)}\nTree:  (cos((x32)**(-0.002522797993847803)) cos (cos(cos((x5)**(-0.002522797993847803))))**(-0.002522797993847803))', 'Equation constants: {0: np.float64(0.5403377080308107), 1: np.float64(0.5403377080308107), 2: np.float64(0.5403377080308107)}\nTree:  (((x78)**(0.5403377080308107) * (0.5403377080308107 / x21)) + 0.5403377080308107)', 'Equation constants: {0: np.float64(-4.6138217136098785)}\nTree:  cos(cos((x32)**(-4.6138217136098785)))', 'Equation constants: {1: np.float64(-1.4138558587605328), 2: np.float64(-1.4138558587605328)}\nTree:  ((x39 / ((x55 / -1.4138558587605328))**(cos(-1.4138558587605328))) / x55)', 'Equation constants: {0: np.float64(0.540337736246742), 1: np.float64(0.540337736246742), 2: np.float64(0.540337736246742)}\nTree:  (((x78)**(0.540337736246742) * (0.540337736246742 / x21)) + 0.540337736246742)']
MSE: [np.float64(0.2951855964722338), np.float64(0.4999989961896353), np.float64(0.25258721853022353), np.float64(0.4999989961896353), np.float64(0.4999989961896353), np.float64(0.29518560951300443), np.float64(5.325680116411937), np.float64(5.995896733621833e+41), np.float64(0.36599220451686654), np.float64(6.094599800024238e+79)]
Generators: ['Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.03383079588464697, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.5273773045472607)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1, 3), n_g=622, sigma_y=0.007480188969446932, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=590, sigma_y=0.006233490807872444, unit=0.7628122714248218)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.02645502505753989, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.008536247574377131, unit=0.7720243617478257)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=590, sigma_y=0.0049867926462979556, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.3039999999999998, 3.304), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2.217927403133855, 3.5420725968661446), n_g=590, sigma_y=0.006233490807872444, unit=0.7628122714248218)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.012804371361565698, unit=0.857804846386473)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-0.17948142867754932, 1.0205185713224507), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03968253758630983, unit=0.5859747828302897)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1.88, 3.88), n_g=558, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.021164020046031913, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.03383079588464697, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.88, 3.88), n_g=590, sigma_y=0.006233490807872444, unit=0.839093498567304)', 'Generator(mode=real, range=(0.18000000000000002, 0.8200000000000001), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2.217927403133855, 3.5420725968661446), n_g=590, sigma_y=0.006233490807872444, unit=0.6865310442823396)', 'Generator(mode=real, range=(-1.3039999999999998, 3.304), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.3039999999999998, 3.304), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.12664400658706604, 0.926644006587066), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.03306878132192486, unit=0.5327043480275361)']
Gen 9: 5 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {}\nTree:  cos(sin(x69))', 'Equation constants: {0: -1.792755254768521, 1: 0.43687098901614174}\nTree:  (((x97 * -1.792755254768521))**((x89)**(x57)) * ((x63)**(x33) + (x42 - 0.43687098901614174)))', 'Equation constants: {0: np.float64(-0.2859324993063872), 1: np.float64(-0.2859324993063872)}\nTree:  (cos((x32)**(-0.2859324993063872)) cos (x79)**(-0.2859324993063872))', 'Equation constants: {1: np.float64(7.6970412465640585), 2: np.float64(7.6970412465640585)}\nTree:  ((x39 / ((x55 / 7.6970412465640585))**(cos(7.6970412465640585))) / x55)', 'Equation constants: {0: np.float64(0.5403377070396777), 1: np.float64(0.5403377070396777), 2: np.float64(0.5403377070396777)}\nTree:  (((x78)**(0.5403377070396777) * (0.5403377070396777 / x21)) + 0.5403377070396777)', 'Equation constants: {0: np.float64(0.5403377037274448), 1: np.float64(0.5403377037274448), 2: np.float64(0.5403377037274448)}\nTree:  (((x78)**(0.5403377037274448) * (0.5403377037274448 / x21)) + 0.5403377037274448)', 'Equation constants: {0: np.float64(0.540337636742883), 1: np.float64(0.540337636742883), 2: np.float64(0.540337636742883)}\nTree:  (((x78)**(0.540337636742883) * (0.540337636742883 / x21)) + 0.540337636742883)', 'Equation constants: {0: np.float64(0.1096300142429385), 1: np.float64(0.1096300142429385), 2: np.float64(0.1096300142429385), 3: np.float64(0.1096300142429385)}\nTree:  (((x78)**(const((x57 * 0.1096300142429385))) * (0.1096300142429385 / x21)) + 0.1096300142429385)', 'Equation constants: {1: np.float64(4.869328661679695), 2: np.float64(4.869328661679695)}\nTree:  ((x39 / ((x55 / 4.869328661679695))**(cos(4.869328661679695))) / x55)', 'Equation constants: {0: np.float64(-8.82170834284384), 1: np.float64(-8.82170834284384), 2: np.float64(-8.82170834284384)}\nTree:  (cos((x32)**(-8.82170834284384)) cos (cos(cos((x5)**(-8.82170834284384))))**(-8.82170834284384))', 'Equation constants: {1: np.float64(-7.697041544245965), 2: np.float64(-7.697041544245965)}\nTree:  ((x39 / ((x55 / -7.697041544245965))**(cos(-7.697041544245965))) / x55)', 'Equation constants: {1: np.float64(-7.697046757462657), 2: np.float64(-7.697046757462657)}\nTree:  ((x39 / ((x55 / -7.697046757462657))**(cos(-7.697046757462657))) / x55)', 'Equation constants: {0: np.float64(0.5403376977852793), 1: np.float64(0.5403376977852793), 2: np.float64(0.5403376977852793)}\nTree:  (((x78)**(0.5403376977852793) * (0.5403376977852793 / x21)) + 0.5403376977852793)', 'Equation constants: {0: np.float64(0.5004732830656768), 1: np.float64(0.5004732830656768), 2: np.float64(0.5004732830656768)}\nTree:  (((x78)**(0.5004732830656768) * (0.5004732830656768 / x21)) + 0.5004732830656768)', 'Equation constants: {1: np.float64(1.413855526005103), 2: np.float64(1.413855526005103)}\nTree:  ((x39 / ((x55((x2 + x31)) / 1.413855526005103))**(cos(1.413855526005103))) / x55)', 'Equation constants: {0: np.float64(0.49999999999999956)}\nTree:  0.49999999999999956', 'Equation constants: {3: np.float64(39.81092735933374), 4: np.float64(39.81092735933374)}\nTree:  ((x39 / (39.81092735933374 + 39.81092735933374)) / x55)', 'Equation constants: {1: np.float64(4.868357922400472), 2: np.float64(4.868357922400472)}\nTree:  ((x39 / ((x55)**(4.868357922400472))**(cos(4.868357922400472))) / x55)', 'Equation constants: {0: np.float64(-11.20014610188353)}\nTree:  cos(cos((x32)**(-11.20014610188353)))', 'Equation constants: {0: np.float64(0.540337700308826), 1: np.float64(0.540337700308826), 2: np.float64(0.540337700308826)}\nTree:  (((x78)**(0.540337700308826) * (0.540337700308826 / x21)) + 0.540337700308826)', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-4.869322397581936), 2: np.float64(-4.869322397581936)}\nTree:  ((x39 / ((x55 / -4.869322397581936))**(cos(-4.869322397581936))) / x55)', 'Equation constants: {0: np.float64(-0.4750997494880746), 2: np.float64(-0.4750997494880746)}\nTree:  (((x78)**(-0.4750997494880746) * (x39 / x21)) + -0.4750997494880746)', 'Equation constants: {0: np.float64(0.5403376847595412), 1: np.float64(0.5403376847595412), 2: np.float64(0.5403376847595412)}\nTree:  (((x78)**(0.5403376847595412) * (0.5403376847595412 / x21)) + 0.5403376847595412)', 'Equation constants: {0: np.float64(0.5403376876919563), 1: np.float64(0.5403376876919563), 2: np.float64(0.5403376876919563)}\nTree:  (((x78)**(0.5403376876919563) * (0.5403376876919563 / x21)) + 0.5403376876919563)', 'Equation constants: {0: np.float64(7.6593937861287245), 1: np.float64(7.6593937861287245), 2: np.float64(7.6593937861287245)}\nTree:  (cos((x32)**(7.6593937861287245)) sin (cos(cos((x5)**(7.6593937861287245))))**(7.6593937861287245))', 'Equation constants: {0: np.float64(-7.304362747001784), 1: np.float64(-7.304362747001784), 2: np.float64(-7.304362747001784)}\nTree:  (cos((x32)**(-7.304362747001784)) cos (cos(cos((x5)**(-7.304362747001784))))**(-7.304362747001784))', 'Equation constants: {1: np.float64(-1.4138540632846681), 2: np.float64(-1.4138540632846681)}\nTree:  ((x39 / ((x55 / -1.4138540632846681))**(cos(-1.4138540632846681))) / x55)', 'Equation constants: {0: np.float64(0.5403377073274679), 1: np.float64(0.5403377073274679), 2: np.float64(0.5403377073274679)}\nTree:  (((x78)**(0.5403377073274679) * (0.5403377073274679 / x21)) + 0.5403377073274679)', 'Equation constants: {0: np.float64(-0.481184268977177), 1: np.float64(-0.481184268977177), 2: np.float64(-0.481184268977177)}\nTree:  (((x78)**(-0.481184268977177))**((-0.481184268977177 / x21)) + -0.481184268977177)', 'Equation constants: {0: np.float64(-0.002522797993847803), 1: np.float64(-0.002522797993847803), 2: np.float64(-0.002522797993847803)}\nTree:  (cos((x32)**(-0.002522797993847803)) cos (cos(cos((x5)**(-0.002522797993847803))))**(-0.002522797993847803))', 'Equation constants: {0: np.float64(0.5403377080308107), 1: np.float64(0.5403377080308107), 2: np.float64(0.5403377080308107)}\nTree:  (((x78)**(0.5403377080308107) * (0.5403377080308107 / x21)) + 0.5403377080308107)', 'Equation constants: {0: np.float64(-4.6138217136098785)}\nTree:  cos(cos((x32)**(-4.6138217136098785)))', 'Equation constants: {1: np.float64(-1.4138558587605328), 2: np.float64(-1.4138558587605328)}\nTree:  ((x39 / ((x55 / -1.4138558587605328))**(cos(-1.4138558587605328))) / x55)', 'Equation constants: {0: np.float64(0.540337736246742), 1: np.float64(0.540337736246742), 2: np.float64(0.540337736246742)}\nTree:  (((x78)**(0.540337736246742) * (0.540337736246742 / x21)) + 0.540337736246742)', 'Equation constants: {1: np.float64(7.698012725064594), 2: np.float64(7.698012725064594)}\nTree:  ((x39 / ((x55)**(7.698012725064594))**(cos(7.698012725064594))) / x55)', 'Equation constants: {0: np.float64(0.5186097679580743), 1: np.float64(0.5186097679580743), 2: np.float64(0.5186097679580743)}\nTree:  (((x78)**(0.5186097679580743))**((0.5186097679580743 / x21)) * 0.5186097679580743)', 'Equation constants: {0: np.float64(0.5403376384458456), 1: np.float64(0.5403376384458456), 2: np.float64(0.5403376384458456)}\nTree:  (((x78((x45)**(x9)))**(0.5403376384458456) * (0.5403376384458456 / x21)) + 0.5403376384458456)', 'Equation constants: {1: np.float64(-6.417496016259461), 2: np.float64(-6.417496016259461), 3: np.float64(-6.417496016259461)}\nTree:  ((x39 / ((x55((x85 * -6.417496016259461)) / -6.417496016259461))**(cos(-6.417496016259461))) / x55)', 'Equation constants: {3: np.float64(-1.9846921738801941), 4: np.float64(-1.9846921738801941)}\nTree:  ((x39 / (-1.9846921738801941 + -1.9846921738801941)) / x55)']
MSE: [np.float64(4.686648382894483), np.float64(0.2844545372795807), np.float64(4401099.897542714), np.float64(0.3511471606710825), np.float64(0.29336427161094547), np.float64(0.2524516031304552), np.float64(0.29518564639885236), np.float64(1.4281276280630792), np.float64(462.21696761260074), np.float64(0.48270187026395583)]
Generators: ['Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.02645502505753989, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.008536247574377131, unit=0.7720243617478257)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.4, 3.4), n_g=590, sigma_y=0.0049867926462979556, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.3039999999999998, 3.304), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2.217927403133855, 3.5420725968661446), n_g=590, sigma_y=0.006233490807872444, unit=0.7628122714248218)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.012804371361565698, unit=0.857804846386473)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-0.17948142867754932, 1.0205185713224507), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03968253758630983, unit=0.5859747828302897)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1.88, 3.88), n_g=558, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.021164020046031913, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.03383079588464697, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.88, 3.88), n_g=590, sigma_y=0.006233490807872444, unit=0.839093498567304)', 'Generator(mode=real, range=(0.18000000000000002, 0.8200000000000001), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2.217927403133855, 3.5420725968661446), n_g=590, sigma_y=0.006233490807872444, unit=0.6865310442823396)', 'Generator(mode=real, range=(-1.3039999999999998, 3.304), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.3039999999999998, 3.304), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.12664400658706604, 0.926644006587066), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.18000000000000002, 0.8200000000000001), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.18000000000000002, 0.8200000000000001), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5859747828302897)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.01693121603682553, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.012804371361565698, unit=0.857804846386473)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03968253758630983, unit=0.5859747828302897)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)']
Gen 10: 4 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(0.5403377070396777), 1: np.float64(0.5403377070396777), 2: np.float64(0.5403377070396777)}\nTree:  (((x78)**(0.5403377070396777) * (0.5403377070396777 / x21)) + 0.5403377070396777)', 'Equation constants: {0: np.float64(0.5403377037274448), 1: np.float64(0.5403377037274448), 2: np.float64(0.5403377037274448)}\nTree:  (((x78)**(0.5403377037274448) * (0.5403377037274448 / x21)) + 0.5403377037274448)', 'Equation constants: {0: np.float64(0.540337636742883), 1: np.float64(0.540337636742883), 2: np.float64(0.540337636742883)}\nTree:  (((x78)**(0.540337636742883) * (0.540337636742883 / x21)) + 0.540337636742883)', 'Equation constants: {0: np.float64(0.1096300142429385), 1: np.float64(0.1096300142429385), 2: np.float64(0.1096300142429385), 3: np.float64(0.1096300142429385)}\nTree:  (((x78)**(const((x57 * 0.1096300142429385))) * (0.1096300142429385 / x21)) + 0.1096300142429385)', 'Equation constants: {1: np.float64(4.869328661679695), 2: np.float64(4.869328661679695)}\nTree:  ((x39 / ((x55 / 4.869328661679695))**(cos(4.869328661679695))) / x55)', 'Equation constants: {0: np.float64(-8.82170834284384), 1: np.float64(-8.82170834284384), 2: np.float64(-8.82170834284384)}\nTree:  (cos((x32)**(-8.82170834284384)) cos (cos(cos((x5)**(-8.82170834284384))))**(-8.82170834284384))', 'Equation constants: {1: np.float64(-7.697041544245965), 2: np.float64(-7.697041544245965)}\nTree:  ((x39 / ((x55 / -7.697041544245965))**(cos(-7.697041544245965))) / x55)', 'Equation constants: {1: np.float64(-7.697046757462657), 2: np.float64(-7.697046757462657)}\nTree:  ((x39 / ((x55 / -7.697046757462657))**(cos(-7.697046757462657))) / x55)', 'Equation constants: {0: np.float64(0.5403376977852793), 1: np.float64(0.5403376977852793), 2: np.float64(0.5403376977852793)}\nTree:  (((x78)**(0.5403376977852793) * (0.5403376977852793 / x21)) + 0.5403376977852793)', 'Equation constants: {0: np.float64(0.5004732830656768), 1: np.float64(0.5004732830656768), 2: np.float64(0.5004732830656768)}\nTree:  (((x78)**(0.5004732830656768) * (0.5004732830656768 / x21)) + 0.5004732830656768)', 'Equation constants: {1: np.float64(1.413855526005103), 2: np.float64(1.413855526005103)}\nTree:  ((x39 / ((x55((x2 + x31)) / 1.413855526005103))**(cos(1.413855526005103))) / x55)', 'Equation constants: {0: np.float64(0.49999999999999956)}\nTree:  0.49999999999999956', 'Equation constants: {3: np.float64(39.81092735933374), 4: np.float64(39.81092735933374)}\nTree:  ((x39 / (39.81092735933374 + 39.81092735933374)) / x55)', 'Equation constants: {1: np.float64(4.868357922400472), 2: np.float64(4.868357922400472)}\nTree:  ((x39 / ((x55)**(4.868357922400472))**(cos(4.868357922400472))) / x55)', 'Equation constants: {0: np.float64(-11.20014610188353)}\nTree:  cos(cos((x32)**(-11.20014610188353)))', 'Equation constants: {0: np.float64(0.540337700308826), 1: np.float64(0.540337700308826), 2: np.float64(0.540337700308826)}\nTree:  (((x78)**(0.540337700308826) * (0.540337700308826 / x21)) + 0.540337700308826)', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-4.869322397581936), 2: np.float64(-4.869322397581936)}\nTree:  ((x39 / ((x55 / -4.869322397581936))**(cos(-4.869322397581936))) / x55)', 'Equation constants: {0: np.float64(-0.4750997494880746), 2: np.float64(-0.4750997494880746)}\nTree:  (((x78)**(-0.4750997494880746) * (x39 / x21)) + -0.4750997494880746)', 'Equation constants: {0: np.float64(0.5403376847595412), 1: np.float64(0.5403376847595412), 2: np.float64(0.5403376847595412)}\nTree:  (((x78)**(0.5403376847595412) * (0.5403376847595412 / x21)) + 0.5403376847595412)', 'Equation constants: {0: np.float64(0.5403376876919563), 1: np.float64(0.5403376876919563), 2: np.float64(0.5403376876919563)}\nTree:  (((x78)**(0.5403376876919563) * (0.5403376876919563 / x21)) + 0.5403376876919563)', 'Equation constants: {0: np.float64(7.6593937861287245), 1: np.float64(7.6593937861287245), 2: np.float64(7.6593937861287245)}\nTree:  (cos((x32)**(7.6593937861287245)) sin (cos(cos((x5)**(7.6593937861287245))))**(7.6593937861287245))', 'Equation constants: {0: np.float64(-7.304362747001784), 1: np.float64(-7.304362747001784), 2: np.float64(-7.304362747001784)}\nTree:  (cos((x32)**(-7.304362747001784)) cos (cos(cos((x5)**(-7.304362747001784))))**(-7.304362747001784))', 'Equation constants: {1: np.float64(-1.4138540632846681), 2: np.float64(-1.4138540632846681)}\nTree:  ((x39 / ((x55 / -1.4138540632846681))**(cos(-1.4138540632846681))) / x55)', 'Equation constants: {0: np.float64(0.5403377073274679), 1: np.float64(0.5403377073274679), 2: np.float64(0.5403377073274679)}\nTree:  (((x78)**(0.5403377073274679) * (0.5403377073274679 / x21)) + 0.5403377073274679)', 'Equation constants: {0: np.float64(-0.481184268977177), 1: np.float64(-0.481184268977177), 2: np.float64(-0.481184268977177)}\nTree:  (((x78)**(-0.481184268977177))**((-0.481184268977177 / x21)) + -0.481184268977177)', 'Equation constants: {0: np.float64(-0.002522797993847803), 1: np.float64(-0.002522797993847803), 2: np.float64(-0.002522797993847803)}\nTree:  (cos((x32)**(-0.002522797993847803)) cos (cos(cos((x5)**(-0.002522797993847803))))**(-0.002522797993847803))', 'Equation constants: {0: np.float64(0.5403377080308107), 1: np.float64(0.5403377080308107), 2: np.float64(0.5403377080308107)}\nTree:  (((x78)**(0.5403377080308107) * (0.5403377080308107 / x21)) + 0.5403377080308107)', 'Equation constants: {0: np.float64(-4.6138217136098785)}\nTree:  cos(cos((x32)**(-4.6138217136098785)))', 'Equation constants: {1: np.float64(-1.4138558587605328), 2: np.float64(-1.4138558587605328)}\nTree:  ((x39 / ((x55 / -1.4138558587605328))**(cos(-1.4138558587605328))) / x55)', 'Equation constants: {0: np.float64(0.540337736246742), 1: np.float64(0.540337736246742), 2: np.float64(0.540337736246742)}\nTree:  (((x78)**(0.540337736246742) * (0.540337736246742 / x21)) + 0.540337736246742)', 'Equation constants: {1: np.float64(7.698012725064594), 2: np.float64(7.698012725064594)}\nTree:  ((x39 / ((x55)**(7.698012725064594))**(cos(7.698012725064594))) / x55)', 'Equation constants: {0: np.float64(0.5186097679580743), 1: np.float64(0.5186097679580743), 2: np.float64(0.5186097679580743)}\nTree:  (((x78)**(0.5186097679580743))**((0.5186097679580743 / x21)) * 0.5186097679580743)', 'Equation constants: {0: np.float64(0.5403376384458456), 1: np.float64(0.5403376384458456), 2: np.float64(0.5403376384458456)}\nTree:  (((x78((x45)**(x9)))**(0.5403376384458456) * (0.5403376384458456 / x21)) + 0.5403376384458456)', 'Equation constants: {1: np.float64(-6.417496016259461), 2: np.float64(-6.417496016259461), 3: np.float64(-6.417496016259461)}\nTree:  ((x39 / ((x55((x85 * -6.417496016259461)) / -6.417496016259461))**(cos(-6.417496016259461))) / x55)', 'Equation constants: {3: np.float64(-1.9846921738801941), 4: np.float64(-1.9846921738801941)}\nTree:  ((x39 / (-1.9846921738801941 + -1.9846921738801941)) / x55)', 'Equation constants: {0: np.float64(0.5403377046251245), 1: np.float64(0.5403377046251245), 2: np.float64(0.5403377046251245)}\nTree:  (((x78((x45)**(x55)))**(0.5403377046251245) * (0.5403377046251245 / x21)) + 0.5403377046251245)', 'Equation constants: {0: np.float64(0.5403377239105642), 1: np.float64(0.5403377239105642), 2: np.float64(0.5403377239105642)}\nTree:  (((x78)**(0.5403377239105642) * (0.5403377239105642 / x21)) + 0.5403377239105642)', 'Equation constants: {0: np.float64(-0.07145007986393294), 2: np.float64(-0.07145007986393294), 3: np.float64(-0.07145007986393294)}\nTree:  (((x78((x45)**(x9)))**(-0.07145007986393294) * (-0.07145007986393294 / x21)) + -0.07145007986393294)', 'Equation constants: {1: np.float64(-4.6139191656205965)}\nTree:  cos(cos((x32)**(-4.6139191656205965)))']
MSE: [np.float64(0.46196339370301026), np.float64(8.366798824434369e+35), np.float64(0.29451117858538034), np.float64(0.3411291028719716), np.float64(0.2951855598008084), np.float64(0.2951856060214169), np.float64(0.4273297908643157), np.float64(1.7245942376493268), np.float64(119076554142678.31), np.float64(0.45116086918119697), np.float64(0.5830805591420175), np.float64(0.2525872185327251)]
Generators: ['Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(-0.17948142867754932, 1.0205185713224507), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03968253758630983, unit=0.5859747828302897)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-1.88, 3.88), n_g=558, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.021164020046031913, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.03383079588464697, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.88, 3.88), n_g=590, sigma_y=0.006233490807872444, unit=0.839093498567304)', 'Generator(mode=real, range=(0.18000000000000002, 0.8200000000000001), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2.217927403133855, 3.5420725968661446), n_g=590, sigma_y=0.006233490807872444, unit=0.6865310442823396)', 'Generator(mode=real, range=(-1.3039999999999998, 3.304), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.3039999999999998, 3.304), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.12664400658706604, 0.926644006587066), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.18000000000000002, 0.8200000000000001), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.18000000000000002, 0.8200000000000001), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5859747828302897)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.01693121603682553, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.012804371361565698, unit=0.857804846386473)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03968253758630983, unit=0.5859747828302897)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.3039999999999998, 3.304), n_g=590, sigma_y=0.006233490807872444, unit=0.6241191311657632)', 'Generator(mode=real, range=(0.18000000000000002, 0.8200000000000001), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(-1.7647999999999997, 3.7647999999999997), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)']
Gen 11: 7 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {1: np.float64(-7.697046757462657), 2: np.float64(-7.697046757462657)}\nTree:  ((x39 / ((x55 / -7.697046757462657))**(cos(-7.697046757462657))) / x55)', 'Equation constants: {0: np.float64(0.5403376977852793), 1: np.float64(0.5403376977852793), 2: np.float64(0.5403376977852793)}\nTree:  (((x78)**(0.5403376977852793) * (0.5403376977852793 / x21)) + 0.5403376977852793)', 'Equation constants: {0: np.float64(0.5004732830656768), 1: np.float64(0.5004732830656768), 2: np.float64(0.5004732830656768)}\nTree:  (((x78)**(0.5004732830656768) * (0.5004732830656768 / x21)) + 0.5004732830656768)', 'Equation constants: {1: np.float64(1.413855526005103), 2: np.float64(1.413855526005103)}\nTree:  ((x39 / ((x55((x2 + x31)) / 1.413855526005103))**(cos(1.413855526005103))) / x55)', 'Equation constants: {0: np.float64(0.49999999999999956)}\nTree:  0.49999999999999956', 'Equation constants: {3: np.float64(39.81092735933374), 4: np.float64(39.81092735933374)}\nTree:  ((x39 / (39.81092735933374 + 39.81092735933374)) / x55)', 'Equation constants: {1: np.float64(4.868357922400472), 2: np.float64(4.868357922400472)}\nTree:  ((x39 / ((x55)**(4.868357922400472))**(cos(4.868357922400472))) / x55)', 'Equation constants: {0: np.float64(-11.20014610188353)}\nTree:  cos(cos((x32)**(-11.20014610188353)))', 'Equation constants: {0: np.float64(0.540337700308826), 1: np.float64(0.540337700308826), 2: np.float64(0.540337700308826)}\nTree:  (((x78)**(0.540337700308826) * (0.540337700308826 / x21)) + 0.540337700308826)', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-4.869322397581936), 2: np.float64(-4.869322397581936)}\nTree:  ((x39 / ((x55 / -4.869322397581936))**(cos(-4.869322397581936))) / x55)', 'Equation constants: {0: np.float64(-0.4750997494880746), 2: np.float64(-0.4750997494880746)}\nTree:  (((x78)**(-0.4750997494880746) * (x39 / x21)) + -0.4750997494880746)', 'Equation constants: {0: np.float64(0.5403376847595412), 1: np.float64(0.5403376847595412), 2: np.float64(0.5403376847595412)}\nTree:  (((x78)**(0.5403376847595412) * (0.5403376847595412 / x21)) + 0.5403376847595412)', 'Equation constants: {0: np.float64(0.5403376876919563), 1: np.float64(0.5403376876919563), 2: np.float64(0.5403376876919563)}\nTree:  (((x78)**(0.5403376876919563) * (0.5403376876919563 / x21)) + 0.5403376876919563)', 'Equation constants: {0: np.float64(7.6593937861287245), 1: np.float64(7.6593937861287245), 2: np.float64(7.6593937861287245)}\nTree:  (cos((x32)**(7.6593937861287245)) sin (cos(cos((x5)**(7.6593937861287245))))**(7.6593937861287245))', 'Equation constants: {0: np.float64(-7.304362747001784), 1: np.float64(-7.304362747001784), 2: np.float64(-7.304362747001784)}\nTree:  (cos((x32)**(-7.304362747001784)) cos (cos(cos((x5)**(-7.304362747001784))))**(-7.304362747001784))', 'Equation constants: {1: np.float64(-1.4138540632846681), 2: np.float64(-1.4138540632846681)}\nTree:  ((x39 / ((x55 / -1.4138540632846681))**(cos(-1.4138540632846681))) / x55)', 'Equation constants: {0: np.float64(0.5403377073274679), 1: np.float64(0.5403377073274679), 2: np.float64(0.5403377073274679)}\nTree:  (((x78)**(0.5403377073274679) * (0.5403377073274679 / x21)) + 0.5403377073274679)', 'Equation constants: {0: np.float64(-0.481184268977177), 1: np.float64(-0.481184268977177), 2: np.float64(-0.481184268977177)}\nTree:  (((x78)**(-0.481184268977177))**((-0.481184268977177 / x21)) + -0.481184268977177)', 'Equation constants: {0: np.float64(-0.002522797993847803), 1: np.float64(-0.002522797993847803), 2: np.float64(-0.002522797993847803)}\nTree:  (cos((x32)**(-0.002522797993847803)) cos (cos(cos((x5)**(-0.002522797993847803))))**(-0.002522797993847803))', 'Equation constants: {0: np.float64(0.5403377080308107), 1: np.float64(0.5403377080308107), 2: np.float64(0.5403377080308107)}\nTree:  (((x78)**(0.5403377080308107) * (0.5403377080308107 / x21)) + 0.5403377080308107)', 'Equation constants: {0: np.float64(-4.6138217136098785)}\nTree:  cos(cos((x32)**(-4.6138217136098785)))', 'Equation constants: {1: np.float64(-1.4138558587605328), 2: np.float64(-1.4138558587605328)}\nTree:  ((x39 / ((x55 / -1.4138558587605328))**(cos(-1.4138558587605328))) / x55)', 'Equation constants: {0: np.float64(0.540337736246742), 1: np.float64(0.540337736246742), 2: np.float64(0.540337736246742)}\nTree:  (((x78)**(0.540337736246742) * (0.540337736246742 / x21)) + 0.540337736246742)', 'Equation constants: {1: np.float64(7.698012725064594), 2: np.float64(7.698012725064594)}\nTree:  ((x39 / ((x55)**(7.698012725064594))**(cos(7.698012725064594))) / x55)', 'Equation constants: {0: np.float64(0.5186097679580743), 1: np.float64(0.5186097679580743), 2: np.float64(0.5186097679580743)}\nTree:  (((x78)**(0.5186097679580743))**((0.5186097679580743 / x21)) * 0.5186097679580743)', 'Equation constants: {0: np.float64(0.5403376384458456), 1: np.float64(0.5403376384458456), 2: np.float64(0.5403376384458456)}\nTree:  (((x78((x45)**(x9)))**(0.5403376384458456) * (0.5403376384458456 / x21)) + 0.5403376384458456)', 'Equation constants: {1: np.float64(-6.417496016259461), 2: np.float64(-6.417496016259461), 3: np.float64(-6.417496016259461)}\nTree:  ((x39 / ((x55((x85 * -6.417496016259461)) / -6.417496016259461))**(cos(-6.417496016259461))) / x55)', 'Equation constants: {3: np.float64(-1.9846921738801941), 4: np.float64(-1.9846921738801941)}\nTree:  ((x39 / (-1.9846921738801941 + -1.9846921738801941)) / x55)', 'Equation constants: {0: np.float64(0.5403377046251245), 1: np.float64(0.5403377046251245), 2: np.float64(0.5403377046251245)}\nTree:  (((x78((x45)**(x55)))**(0.5403377046251245) * (0.5403377046251245 / x21)) + 0.5403377046251245)', 'Equation constants: {0: np.float64(0.5403377239105642), 1: np.float64(0.5403377239105642), 2: np.float64(0.5403377239105642)}\nTree:  (((x78)**(0.5403377239105642) * (0.5403377239105642 / x21)) + 0.5403377239105642)', 'Equation constants: {0: np.float64(-0.07145007986393294), 2: np.float64(-0.07145007986393294), 3: np.float64(-0.07145007986393294)}\nTree:  (((x78((x45)**(x9)))**(-0.07145007986393294) * (-0.07145007986393294 / x21)) + -0.07145007986393294)', 'Equation constants: {1: np.float64(-4.6139191656205965)}\nTree:  cos(cos((x32)**(-4.6139191656205965)))', 'Equation constants: {1: np.float64(-4.61439743911717)}\nTree:  cos(cos((x32)**(-4.61439743911717)))', 'Equation constants: {0: np.float64(6.286505060720625), 1: np.float64(6.286505060720625), 2: np.float64(6.286505060720625), 3: np.float64(6.286505060720625)}\nTree:  (cos((x32)**(6.286505060720625)) cos (cos(((x5)**(6.286505060720625) cos cos(6.286505060720625))))**(6.286505060720625))', 'Equation constants: {0: np.float64(0.5403377015908631), 1: np.float64(0.5403377015908631), 2: np.float64(0.5403377015908631)}\nTree:  (((x78((x45)**(x9)))**(0.5403377015908631) * (0.5403377015908631 / x21)) + 0.5403377015908631)', 'Equation constants: {0: np.float64(0.5403376838112948), 1: np.float64(0.5403376838112948), 2: np.float64(0.5403376838112948)}\nTree:  (((x78)**(0.5403376838112948) * (0.5403376838112948 / x21)) + 0.5403376838112948)', 'Equation constants: {3: np.float64(15.814201492847708), 4: np.float64(15.814201492847708)}\nTree:  ((x39 / (15.814201492847708 + 15.814201492847708)) / x55)', 'Equation constants: {0: np.float64(-0.9004054977850373), 1: np.float64(-0.9004054977850373), 2: np.float64(-0.9004054977850373), 3: np.float64(-0.9004054977850373)}\nTree:  (pow((x78)**(-0.9004054977850373), (-0.9004054977850373 / x21), (-0.9004054977850373 - x7)) + -0.9004054977850373)', 'Equation constants: {1: np.float64(-8.226190803615713)}\nTree:  cos(cos((x32)**(-8.226190803615713)))']
MSE: [np.float64(3.4279368352713224e+16), np.float64(1.3180124270867381e+34), np.float64(0.25258721853965077), np.float64(0.25350311479410514), np.float64(0.29518559428168234), np.float64(0.2951856014665407), np.float64(0.6632756358508702), np.float64(2.1784210472558243), np.float64(0.25335596343054634), np.float64(0.687837907188934)]
Generators: ['Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.03383079588464697, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.88, 3.88), n_g=590, sigma_y=0.006233490807872444, unit=0.839093498567304)', 'Generator(mode=real, range=(0.18000000000000002, 0.8200000000000001), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2.217927403133855, 3.5420725968661446), n_g=590, sigma_y=0.006233490807872444, unit=0.6865310442823396)', 'Generator(mode=real, range=(-1.3039999999999998, 3.304), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-1.3039999999999998, 3.304), n_g=622, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=373, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.12664400658706604, 0.926644006587066), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.03306878132192486, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.18000000000000002, 0.8200000000000001), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.18000000000000002, 0.8200000000000001), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5859747828302897)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.01693121603682553, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.012804371361565698, unit=0.857804846386473)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03968253758630983, unit=0.5859747828302897)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.3039999999999998, 3.304), n_g=590, sigma_y=0.006233490807872444, unit=0.6241191311657632)', 'Generator(mode=real, range=(0.18000000000000002, 0.8200000000000001), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(-1.7647999999999997, 3.7647999999999997), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(0.15694404225850433, 0.9569440422585044), n_g=341, sigma_y=0.03968253758630983, unit=0.5859747828302897)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.01693121603682553, unit=0.5859747828302897)', 'Generator(mode=real, range=(-4.795427896243155, 5.204572103756845), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5859747828302897)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(-1.7647999999999997, 3.7647999999999997), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.012804371361565698, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03809523608285744, unit=0.5327043480275361)']
Gen 12: 8 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(0.540337700308826), 1: np.float64(0.540337700308826), 2: np.float64(0.540337700308826)}\nTree:  (((x78)**(0.540337700308826) * (0.540337700308826 / x21)) + 0.540337700308826)', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-4.869322397581936), 2: np.float64(-4.869322397581936)}\nTree:  ((x39 / ((x55 / -4.869322397581936))**(cos(-4.869322397581936))) / x55)', 'Equation constants: {0: np.float64(-0.4750997494880746), 2: np.float64(-0.4750997494880746)}\nTree:  (((x78)**(-0.4750997494880746) * (x39 / x21)) + -0.4750997494880746)', 'Equation constants: {0: np.float64(0.5403376847595412), 1: np.float64(0.5403376847595412), 2: np.float64(0.5403376847595412)}\nTree:  (((x78)**(0.5403376847595412) * (0.5403376847595412 / x21)) + 0.5403376847595412)', 'Equation constants: {0: np.float64(0.5403376876919563), 1: np.float64(0.5403376876919563), 2: np.float64(0.5403376876919563)}\nTree:  (((x78)**(0.5403376876919563) * (0.5403376876919563 / x21)) + 0.5403376876919563)', 'Equation constants: {0: np.float64(7.6593937861287245), 1: np.float64(7.6593937861287245), 2: np.float64(7.6593937861287245)}\nTree:  (cos((x32)**(7.6593937861287245)) sin (cos(cos((x5)**(7.6593937861287245))))**(7.6593937861287245))', 'Equation constants: {0: np.float64(-7.304362747001784), 1: np.float64(-7.304362747001784), 2: np.float64(-7.304362747001784)}\nTree:  (cos((x32)**(-7.304362747001784)) cos (cos(cos((x5)**(-7.304362747001784))))**(-7.304362747001784))', 'Equation constants: {1: np.float64(-1.4138540632846681), 2: np.float64(-1.4138540632846681)}\nTree:  ((x39 / ((x55 / -1.4138540632846681))**(cos(-1.4138540632846681))) / x55)', 'Equation constants: {0: np.float64(0.5403377073274679), 1: np.float64(0.5403377073274679), 2: np.float64(0.5403377073274679)}\nTree:  (((x78)**(0.5403377073274679) * (0.5403377073274679 / x21)) + 0.5403377073274679)', 'Equation constants: {0: np.float64(-0.481184268977177), 1: np.float64(-0.481184268977177), 2: np.float64(-0.481184268977177)}\nTree:  (((x78)**(-0.481184268977177))**((-0.481184268977177 / x21)) + -0.481184268977177)', 'Equation constants: {0: np.float64(-0.002522797993847803), 1: np.float64(-0.002522797993847803), 2: np.float64(-0.002522797993847803)}\nTree:  (cos((x32)**(-0.002522797993847803)) cos (cos(cos((x5)**(-0.002522797993847803))))**(-0.002522797993847803))', 'Equation constants: {0: np.float64(0.5403377080308107), 1: np.float64(0.5403377080308107), 2: np.float64(0.5403377080308107)}\nTree:  (((x78)**(0.5403377080308107) * (0.5403377080308107 / x21)) + 0.5403377080308107)', 'Equation constants: {0: np.float64(-4.6138217136098785)}\nTree:  cos(cos((x32)**(-4.6138217136098785)))', 'Equation constants: {1: np.float64(-1.4138558587605328), 2: np.float64(-1.4138558587605328)}\nTree:  ((x39 / ((x55 / -1.4138558587605328))**(cos(-1.4138558587605328))) / x55)', 'Equation constants: {0: np.float64(0.540337736246742), 1: np.float64(0.540337736246742), 2: np.float64(0.540337736246742)}\nTree:  (((x78)**(0.540337736246742) * (0.540337736246742 / x21)) + 0.540337736246742)', 'Equation constants: {1: np.float64(7.698012725064594), 2: np.float64(7.698012725064594)}\nTree:  ((x39 / ((x55)**(7.698012725064594))**(cos(7.698012725064594))) / x55)', 'Equation constants: {0: np.float64(0.5186097679580743), 1: np.float64(0.5186097679580743), 2: np.float64(0.5186097679580743)}\nTree:  (((x78)**(0.5186097679580743))**((0.5186097679580743 / x21)) * 0.5186097679580743)', 'Equation constants: {0: np.float64(0.5403376384458456), 1: np.float64(0.5403376384458456), 2: np.float64(0.5403376384458456)}\nTree:  (((x78((x45)**(x9)))**(0.5403376384458456) * (0.5403376384458456 / x21)) + 0.5403376384458456)', 'Equation constants: {1: np.float64(-6.417496016259461), 2: np.float64(-6.417496016259461), 3: np.float64(-6.417496016259461)}\nTree:  ((x39 / ((x55((x85 * -6.417496016259461)) / -6.417496016259461))**(cos(-6.417496016259461))) / x55)', 'Equation constants: {3: np.float64(-1.9846921738801941), 4: np.float64(-1.9846921738801941)}\nTree:  ((x39 / (-1.9846921738801941 + -1.9846921738801941)) / x55)', 'Equation constants: {0: np.float64(0.5403377046251245), 1: np.float64(0.5403377046251245), 2: np.float64(0.5403377046251245)}\nTree:  (((x78((x45)**(x55)))**(0.5403377046251245) * (0.5403377046251245 / x21)) + 0.5403377046251245)', 'Equation constants: {0: np.float64(0.5403377239105642), 1: np.float64(0.5403377239105642), 2: np.float64(0.5403377239105642)}\nTree:  (((x78)**(0.5403377239105642) * (0.5403377239105642 / x21)) + 0.5403377239105642)', 'Equation constants: {0: np.float64(-0.07145007986393294), 2: np.float64(-0.07145007986393294), 3: np.float64(-0.07145007986393294)}\nTree:  (((x78((x45)**(x9)))**(-0.07145007986393294) * (-0.07145007986393294 / x21)) + -0.07145007986393294)', 'Equation constants: {1: np.float64(-4.6139191656205965)}\nTree:  cos(cos((x32)**(-4.6139191656205965)))', 'Equation constants: {1: np.float64(-4.61439743911717)}\nTree:  cos(cos((x32)**(-4.61439743911717)))', 'Equation constants: {0: np.float64(6.286505060720625), 1: np.float64(6.286505060720625), 2: np.float64(6.286505060720625), 3: np.float64(6.286505060720625)}\nTree:  (cos((x32)**(6.286505060720625)) cos (cos(((x5)**(6.286505060720625) cos cos(6.286505060720625))))**(6.286505060720625))', 'Equation constants: {0: np.float64(0.5403377015908631), 1: np.float64(0.5403377015908631), 2: np.float64(0.5403377015908631)}\nTree:  (((x78((x45)**(x9)))**(0.5403377015908631) * (0.5403377015908631 / x21)) + 0.5403377015908631)', 'Equation constants: {0: np.float64(0.5403376838112948), 1: np.float64(0.5403376838112948), 2: np.float64(0.5403376838112948)}\nTree:  (((x78)**(0.5403376838112948) * (0.5403376838112948 / x21)) + 0.5403376838112948)', 'Equation constants: {3: np.float64(15.814201492847708), 4: np.float64(15.814201492847708)}\nTree:  ((x39 / (15.814201492847708 + 15.814201492847708)) / x55)', 'Equation constants: {0: np.float64(-0.9004054977850373), 1: np.float64(-0.9004054977850373), 2: np.float64(-0.9004054977850373), 3: np.float64(-0.9004054977850373)}\nTree:  (pow((x78)**(-0.9004054977850373), (-0.9004054977850373 / x21), (-0.9004054977850373 - x7)) + -0.9004054977850373)', 'Equation constants: {1: np.float64(-8.226190803615713)}\nTree:  cos(cos((x32)**(-8.226190803615713)))', 'Equation constants: {0: np.float64(0.5403377204862677), 1: np.float64(0.5403377204862677), 2: np.float64(0.5403377204862677)}\nTree:  (((x78((x45)**(x9)))**(0.5403377204862677) * (const((x96 / x86)) / x21)) + 0.5403377204862677)', 'Equation constants: {0: np.float64(-0.0714499191789207), 2: np.float64(-0.0714499191789207), 3: np.float64(-0.0714499191789207)}\nTree:  (((x78((x45)**(x9)))**(const(sin(x48))) * (-0.0714499191789207 / x21)) + -0.0714499191789207)', 'Equation constants: {0: np.float64(-4.614269403452138)}\nTree:  cos(cos((x32)**(-4.614269403452138)))', 'Equation constants: {3: np.float64(0.5000000000000016)}\nTree:  const((x96)**(x24))', 'Equation constants: {1: np.float64(17.434279511281648), 2: np.float64(17.434279511281648)}\nTree:  ((x39 / ((x55)**(17.434279511281648))**(cos(17.434279511281648))) / x55)', 'Equation constants: {0: np.float64(-2.727591684298602), 1: np.float64(-2.727591684298602), 2: np.float64(-2.727591684298602)}\nTree:  (cos((x32)**(-2.727591684298602)) cos (cos(cos((x5)**(-2.727591684298602))))**(-2.727591684298602))', 'Equation constants: {3: np.float64(3.821997259891643), 4: np.float64(3.821997259891643)}\nTree:  ((x39 / (3.821997259891643 + 3.821997259891643)) / x55)', 'Equation constants: {0: np.float64(0.5403376821512907), 1: np.float64(0.5403376821512907), 2: np.float64(0.5403376821512907)}\nTree:  (((x78)**(0.5403376821512907) * (0.5403376821512907 / x21((x6 - x34)))) + 0.5403376821512907)']
MSE: [np.float64(0.29518561372826924), np.float64(2903.0126208942083), np.float64(0.5830811344387947), np.float64(0.2533559633873803), np.float64(0.25), np.float64(0.26473384387743676), np.float64(0.34373432943240706), np.float64(0.5957994741599811), np.float64(3.075703865993599e+18), np.float64(0.2951855773146235)]
Generators: ['Generator(mode=real, range=(0.18000000000000002, 0.8200000000000001), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.18000000000000002, 0.8200000000000001), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5859747828302897)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.01693121603682553, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.012804371361565698, unit=0.857804846386473)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03968253758630983, unit=0.5859747828302897)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.3039999999999998, 3.304), n_g=590, sigma_y=0.006233490807872444, unit=0.6241191311657632)', 'Generator(mode=real, range=(0.18000000000000002, 0.8200000000000001), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(-1.7647999999999997, 3.7647999999999997), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(0.15694404225850433, 0.9569440422585044), n_g=341, sigma_y=0.03968253758630983, unit=0.5859747828302897)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.01693121603682553, unit=0.5859747828302897)', 'Generator(mode=real, range=(-4.795427896243155, 5.204572103756845), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5859747828302897)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(-1.7647999999999997, 3.7647999999999997), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.012804371361565698, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03809523608285744, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5273773045472607)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.15694404225850433, 0.9569440422585044), n_g=341, sigma_y=0.03968253758630983, unit=0.5859747828302897)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.6948219255730432)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5273773045472607)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.9435853310251204)']
Gen 13: 7 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-7.304362747001784), 1: np.float64(-7.304362747001784), 2: np.float64(-7.304362747001784)}\nTree:  (cos((x32)**(-7.304362747001784)) cos (cos(cos((x5)**(-7.304362747001784))))**(-7.304362747001784))', 'Equation constants: {1: np.float64(-1.4138540632846681), 2: np.float64(-1.4138540632846681)}\nTree:  ((x39 / ((x55 / -1.4138540632846681))**(cos(-1.4138540632846681))) / x55)', 'Equation constants: {0: np.float64(0.5403377073274679), 1: np.float64(0.5403377073274679), 2: np.float64(0.5403377073274679)}\nTree:  (((x78)**(0.5403377073274679) * (0.5403377073274679 / x21)) + 0.5403377073274679)', 'Equation constants: {0: np.float64(-0.481184268977177), 1: np.float64(-0.481184268977177), 2: np.float64(-0.481184268977177)}\nTree:  (((x78)**(-0.481184268977177))**((-0.481184268977177 / x21)) + -0.481184268977177)', 'Equation constants: {0: np.float64(-0.002522797993847803), 1: np.float64(-0.002522797993847803), 2: np.float64(-0.002522797993847803)}\nTree:  (cos((x32)**(-0.002522797993847803)) cos (cos(cos((x5)**(-0.002522797993847803))))**(-0.002522797993847803))', 'Equation constants: {0: np.float64(0.5403377080308107), 1: np.float64(0.5403377080308107), 2: np.float64(0.5403377080308107)}\nTree:  (((x78)**(0.5403377080308107) * (0.5403377080308107 / x21)) + 0.5403377080308107)', 'Equation constants: {0: np.float64(-4.6138217136098785)}\nTree:  cos(cos((x32)**(-4.6138217136098785)))', 'Equation constants: {1: np.float64(-1.4138558587605328), 2: np.float64(-1.4138558587605328)}\nTree:  ((x39 / ((x55 / -1.4138558587605328))**(cos(-1.4138558587605328))) / x55)', 'Equation constants: {0: np.float64(0.540337736246742), 1: np.float64(0.540337736246742), 2: np.float64(0.540337736246742)}\nTree:  (((x78)**(0.540337736246742) * (0.540337736246742 / x21)) + 0.540337736246742)', 'Equation constants: {1: np.float64(7.698012725064594), 2: np.float64(7.698012725064594)}\nTree:  ((x39 / ((x55)**(7.698012725064594))**(cos(7.698012725064594))) / x55)', 'Equation constants: {0: np.float64(0.5186097679580743), 1: np.float64(0.5186097679580743), 2: np.float64(0.5186097679580743)}\nTree:  (((x78)**(0.5186097679580743))**((0.5186097679580743 / x21)) * 0.5186097679580743)', 'Equation constants: {0: np.float64(0.5403376384458456), 1: np.float64(0.5403376384458456), 2: np.float64(0.5403376384458456)}\nTree:  (((x78((x45)**(x9)))**(0.5403376384458456) * (0.5403376384458456 / x21)) + 0.5403376384458456)', 'Equation constants: {1: np.float64(-6.417496016259461), 2: np.float64(-6.417496016259461), 3: np.float64(-6.417496016259461)}\nTree:  ((x39 / ((x55((x85 * -6.417496016259461)) / -6.417496016259461))**(cos(-6.417496016259461))) / x55)', 'Equation constants: {3: np.float64(-1.9846921738801941), 4: np.float64(-1.9846921738801941)}\nTree:  ((x39 / (-1.9846921738801941 + -1.9846921738801941)) / x55)', 'Equation constants: {0: np.float64(0.5403377046251245), 1: np.float64(0.5403377046251245), 2: np.float64(0.5403377046251245)}\nTree:  (((x78((x45)**(x55)))**(0.5403377046251245) * (0.5403377046251245 / x21)) + 0.5403377046251245)', 'Equation constants: {0: np.float64(0.5403377239105642), 1: np.float64(0.5403377239105642), 2: np.float64(0.5403377239105642)}\nTree:  (((x78)**(0.5403377239105642) * (0.5403377239105642 / x21)) + 0.5403377239105642)', 'Equation constants: {0: np.float64(-0.07145007986393294), 2: np.float64(-0.07145007986393294), 3: np.float64(-0.07145007986393294)}\nTree:  (((x78((x45)**(x9)))**(-0.07145007986393294) * (-0.07145007986393294 / x21)) + -0.07145007986393294)', 'Equation constants: {1: np.float64(-4.6139191656205965)}\nTree:  cos(cos((x32)**(-4.6139191656205965)))', 'Equation constants: {1: np.float64(-4.61439743911717)}\nTree:  cos(cos((x32)**(-4.61439743911717)))', 'Equation constants: {0: np.float64(6.286505060720625), 1: np.float64(6.286505060720625), 2: np.float64(6.286505060720625), 3: np.float64(6.286505060720625)}\nTree:  (cos((x32)**(6.286505060720625)) cos (cos(((x5)**(6.286505060720625) cos cos(6.286505060720625))))**(6.286505060720625))', 'Equation constants: {0: np.float64(0.5403377015908631), 1: np.float64(0.5403377015908631), 2: np.float64(0.5403377015908631)}\nTree:  (((x78((x45)**(x9)))**(0.5403377015908631) * (0.5403377015908631 / x21)) + 0.5403377015908631)', 'Equation constants: {0: np.float64(0.5403376838112948), 1: np.float64(0.5403376838112948), 2: np.float64(0.5403376838112948)}\nTree:  (((x78)**(0.5403376838112948) * (0.5403376838112948 / x21)) + 0.5403376838112948)', 'Equation constants: {3: np.float64(15.814201492847708), 4: np.float64(15.814201492847708)}\nTree:  ((x39 / (15.814201492847708 + 15.814201492847708)) / x55)', 'Equation constants: {0: np.float64(-0.9004054977850373), 1: np.float64(-0.9004054977850373), 2: np.float64(-0.9004054977850373), 3: np.float64(-0.9004054977850373)}\nTree:  (pow((x78)**(-0.9004054977850373), (-0.9004054977850373 / x21), (-0.9004054977850373 - x7)) + -0.9004054977850373)', 'Equation constants: {1: np.float64(-8.226190803615713)}\nTree:  cos(cos((x32)**(-8.226190803615713)))', 'Equation constants: {0: np.float64(0.5403377204862677), 1: np.float64(0.5403377204862677), 2: np.float64(0.5403377204862677)}\nTree:  (((x78((x45)**(x9)))**(0.5403377204862677) * (const((x96 / x86)) / x21)) + 0.5403377204862677)', 'Equation constants: {0: np.float64(-0.0714499191789207), 2: np.float64(-0.0714499191789207), 3: np.float64(-0.0714499191789207)}\nTree:  (((x78((x45)**(x9)))**(const(sin(x48))) * (-0.0714499191789207 / x21)) + -0.0714499191789207)', 'Equation constants: {0: np.float64(-4.614269403452138)}\nTree:  cos(cos((x32)**(-4.614269403452138)))', 'Equation constants: {3: np.float64(0.5000000000000016)}\nTree:  const((x96)**(x24))', 'Equation constants: {1: np.float64(17.434279511281648), 2: np.float64(17.434279511281648)}\nTree:  ((x39 / ((x55)**(17.434279511281648))**(cos(17.434279511281648))) / x55)', 'Equation constants: {0: np.float64(-2.727591684298602), 1: np.float64(-2.727591684298602), 2: np.float64(-2.727591684298602)}\nTree:  (cos((x32)**(-2.727591684298602)) cos (cos(cos((x5)**(-2.727591684298602))))**(-2.727591684298602))', 'Equation constants: {3: np.float64(3.821997259891643), 4: np.float64(3.821997259891643)}\nTree:  ((x39 / (3.821997259891643 + 3.821997259891643)) / x55)', 'Equation constants: {0: np.float64(0.5403376821512907), 1: np.float64(0.5403376821512907), 2: np.float64(0.5403376821512907)}\nTree:  (((x78)**(0.5403376821512907) * (0.5403376821512907 / x21((x6 - x34)))) + 0.5403376821512907)', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-9.265962360956957)}\nTree:  cos(cos((x32)**(-9.265962360956957)))', 'Equation constants: {0: np.float64(0.5188216419061537), 1: np.float64(0.5188216419061537), 2: np.float64(0.5188216419061537)}\nTree:  (((x78)**(0.5188216419061537))**((0.5188216419061537 / x21)) * 0.5188216419061537)', 'Equation constants: {0: np.float64(0.5403376999749017), 1: np.float64(0.5403376999749017), 2: np.float64(0.5403376999749017)}\nTree:  (((x78)**(0.5403376999749017) * (0.5403376999749017 / x21)) + 0.5403376999749017)', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {0: np.float64(0.540337710876905), 1: np.float64(0.540337710876905), 2: np.float64(0.540337710876905)}\nTree:  (((x78)**(0.540337710876905) * (0.540337710876905 / x21)) + 0.540337710876905)', 'Equation constants: {0: np.float64(0.5403377141922353), 1: np.float64(0.5403377141922353), 2: np.float64(0.5403377141922353)}\nTree:  (((x78)**(0.5403377141922353) * (0.5403377141922353 / x21)) + 0.5403377141922353)']
MSE: [np.float64(0.3384618557835253), np.float64(0.25), np.float64(0.2525872185388802), np.float64(4232.518686210772), np.float64(0.25233112570074373), np.float64(0.2789705321373824), np.float64(0.25), np.float64(0.4518079836536719), np.float64(0.2951856154634875), np.float64(0.29518558371137454)]
Generators: ['Generator(mode=real, range=(-1.3039999999999998, 3.304), n_g=590, sigma_y=0.006233490807872444, unit=0.6241191311657632)', 'Generator(mode=real, range=(0.18000000000000002, 0.8200000000000001), n_g=341, sigma_y=0.03968253758630983, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-0.1, 1.1), n_g=341, sigma_y=0.03306878132192486, unit=0.47943391322478246)', 'Generator(mode=real, range=(-1.7647999999999997, 3.7647999999999997), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5327043480275361)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(0.15694404225850433, 0.9569440422585044), n_g=341, sigma_y=0.03968253758630983, unit=0.5859747828302897)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.01693121603682553, unit=0.5859747828302897)', 'Generator(mode=real, range=(-4.795427896243155, 5.204572103756845), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5859747828302897)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(-1.7647999999999997, 3.7647999999999997), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.012804371361565698, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03809523608285744, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5273773045472607)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.15694404225850433, 0.9569440422585044), n_g=341, sigma_y=0.03968253758630983, unit=0.5859747828302897)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.6948219255730432)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5273773045472607)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.9435853310251204)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.015365245633878836, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.6948219255730432)', 'Generator(mode=real, range=(-1.7647999999999997, 3.7647999999999997), n_g=558, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03809523608285744, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.47463957409253466)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.031746030069047866, unit=0.5273773045472607)', 'Generator(mode=real, range=(-4.795427896243155, 5.204572103756845), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)']
Gen 14: 8 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(0.540337736246742), 1: np.float64(0.540337736246742), 2: np.float64(0.540337736246742)}\nTree:  (((x78)**(0.540337736246742) * (0.540337736246742 / x21)) + 0.540337736246742)', 'Equation constants: {1: np.float64(7.698012725064594), 2: np.float64(7.698012725064594)}\nTree:  ((x39 / ((x55)**(7.698012725064594))**(cos(7.698012725064594))) / x55)', 'Equation constants: {0: np.float64(0.5186097679580743), 1: np.float64(0.5186097679580743), 2: np.float64(0.5186097679580743)}\nTree:  (((x78)**(0.5186097679580743))**((0.5186097679580743 / x21)) * 0.5186097679580743)', 'Equation constants: {0: np.float64(0.5403376384458456), 1: np.float64(0.5403376384458456), 2: np.float64(0.5403376384458456)}\nTree:  (((x78((x45)**(x9)))**(0.5403376384458456) * (0.5403376384458456 / x21)) + 0.5403376384458456)', 'Equation constants: {1: np.float64(-6.417496016259461), 2: np.float64(-6.417496016259461), 3: np.float64(-6.417496016259461)}\nTree:  ((x39 / ((x55((x85 * -6.417496016259461)) / -6.417496016259461))**(cos(-6.417496016259461))) / x55)', 'Equation constants: {3: np.float64(-1.9846921738801941), 4: np.float64(-1.9846921738801941)}\nTree:  ((x39 / (-1.9846921738801941 + -1.9846921738801941)) / x55)', 'Equation constants: {0: np.float64(0.5403377046251245), 1: np.float64(0.5403377046251245), 2: np.float64(0.5403377046251245)}\nTree:  (((x78((x45)**(x55)))**(0.5403377046251245) * (0.5403377046251245 / x21)) + 0.5403377046251245)', 'Equation constants: {0: np.float64(0.5403377239105642), 1: np.float64(0.5403377239105642), 2: np.float64(0.5403377239105642)}\nTree:  (((x78)**(0.5403377239105642) * (0.5403377239105642 / x21)) + 0.5403377239105642)', 'Equation constants: {0: np.float64(-0.07145007986393294), 2: np.float64(-0.07145007986393294), 3: np.float64(-0.07145007986393294)}\nTree:  (((x78((x45)**(x9)))**(-0.07145007986393294) * (-0.07145007986393294 / x21)) + -0.07145007986393294)', 'Equation constants: {1: np.float64(-4.6139191656205965)}\nTree:  cos(cos((x32)**(-4.6139191656205965)))', 'Equation constants: {1: np.float64(-4.61439743911717)}\nTree:  cos(cos((x32)**(-4.61439743911717)))', 'Equation constants: {0: np.float64(6.286505060720625), 1: np.float64(6.286505060720625), 2: np.float64(6.286505060720625), 3: np.float64(6.286505060720625)}\nTree:  (cos((x32)**(6.286505060720625)) cos (cos(((x5)**(6.286505060720625) cos cos(6.286505060720625))))**(6.286505060720625))', 'Equation constants: {0: np.float64(0.5403377015908631), 1: np.float64(0.5403377015908631), 2: np.float64(0.5403377015908631)}\nTree:  (((x78((x45)**(x9)))**(0.5403377015908631) * (0.5403377015908631 / x21)) + 0.5403377015908631)', 'Equation constants: {0: np.float64(0.5403376838112948), 1: np.float64(0.5403376838112948), 2: np.float64(0.5403376838112948)}\nTree:  (((x78)**(0.5403376838112948) * (0.5403376838112948 / x21)) + 0.5403376838112948)', 'Equation constants: {3: np.float64(15.814201492847708), 4: np.float64(15.814201492847708)}\nTree:  ((x39 / (15.814201492847708 + 15.814201492847708)) / x55)', 'Equation constants: {0: np.float64(-0.9004054977850373), 1: np.float64(-0.9004054977850373), 2: np.float64(-0.9004054977850373), 3: np.float64(-0.9004054977850373)}\nTree:  (pow((x78)**(-0.9004054977850373), (-0.9004054977850373 / x21), (-0.9004054977850373 - x7)) + -0.9004054977850373)', 'Equation constants: {1: np.float64(-8.226190803615713)}\nTree:  cos(cos((x32)**(-8.226190803615713)))', 'Equation constants: {0: np.float64(0.5403377204862677), 1: np.float64(0.5403377204862677), 2: np.float64(0.5403377204862677)}\nTree:  (((x78((x45)**(x9)))**(0.5403377204862677) * (const((x96 / x86)) / x21)) + 0.5403377204862677)', 'Equation constants: {0: np.float64(-0.0714499191789207), 2: np.float64(-0.0714499191789207), 3: np.float64(-0.0714499191789207)}\nTree:  (((x78((x45)**(x9)))**(const(sin(x48))) * (-0.0714499191789207 / x21)) + -0.0714499191789207)', 'Equation constants: {0: np.float64(-4.614269403452138)}\nTree:  cos(cos((x32)**(-4.614269403452138)))', 'Equation constants: {3: np.float64(0.5000000000000016)}\nTree:  const((x96)**(x24))', 'Equation constants: {1: np.float64(17.434279511281648), 2: np.float64(17.434279511281648)}\nTree:  ((x39 / ((x55)**(17.434279511281648))**(cos(17.434279511281648))) / x55)', 'Equation constants: {0: np.float64(-2.727591684298602), 1: np.float64(-2.727591684298602), 2: np.float64(-2.727591684298602)}\nTree:  (cos((x32)**(-2.727591684298602)) cos (cos(cos((x5)**(-2.727591684298602))))**(-2.727591684298602))', 'Equation constants: {3: np.float64(3.821997259891643), 4: np.float64(3.821997259891643)}\nTree:  ((x39 / (3.821997259891643 + 3.821997259891643)) / x55)', 'Equation constants: {0: np.float64(0.5403376821512907), 1: np.float64(0.5403376821512907), 2: np.float64(0.5403376821512907)}\nTree:  (((x78)**(0.5403376821512907) * (0.5403376821512907 / x21((x6 - x34)))) + 0.5403376821512907)', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-9.265962360956957)}\nTree:  cos(cos((x32)**(-9.265962360956957)))', 'Equation constants: {0: np.float64(0.5188216419061537), 1: np.float64(0.5188216419061537), 2: np.float64(0.5188216419061537)}\nTree:  (((x78)**(0.5188216419061537))**((0.5188216419061537 / x21)) * 0.5188216419061537)', 'Equation constants: {0: np.float64(0.5403376999749017), 1: np.float64(0.5403376999749017), 2: np.float64(0.5403376999749017)}\nTree:  (((x78)**(0.5403376999749017) * (0.5403376999749017 / x21)) + 0.5403376999749017)', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {0: np.float64(0.540337710876905), 1: np.float64(0.540337710876905), 2: np.float64(0.540337710876905)}\nTree:  (((x78)**(0.540337710876905) * (0.540337710876905 / x21)) + 0.540337710876905)', 'Equation constants: {0: np.float64(0.5403377141922353), 1: np.float64(0.5403377141922353), 2: np.float64(0.5403377141922353)}\nTree:  (((x78)**(0.5403377141922353) * (0.5403377141922353 / x21)) + 0.5403377141922353)', 'Equation constants: {1: np.float64(-4.614007128741271)}\nTree:  cos(cos((x32)**(-4.614007128741271)))', 'Equation constants: {2: np.float64(6.614824875459107e-05), 3: np.float64(6.614824875459107e-05), 4: np.float64(6.614824875459107e-05)}\nTree:  (((x78((x45)**(x9)))**(cos(sin(6.614824875459107e-05))) * (6.614824875459107e-05 / x21)) + 6.614824875459107e-05)', 'Equation constants: {0: np.float64(0.540337698755498), 1: np.float64(0.540337698755498), 2: np.float64(0.540337698755498)}\nTree:  (((x78((x45)**(x9)))**(0.540337698755498) * (const((x76 * x32)) / x21)) + 0.540337698755498)', 'Equation constants: {0: np.float64(-0.4812023533677686), 1: np.float64(-0.4812023533677686), 2: np.float64(-0.4812023533677686)}\nTree:  (((x78)**(-0.4812023533677686))**((-0.4812023533677686 / x21)) + -0.4812023533677686)', 'Equation constants: {0: np.float64(0.5403377024223394), 1: np.float64(0.5403377024223394), 2: np.float64(0.5403377024223394)}\nTree:  (((x78)**(0.5403377024223394) * (const(sin(x16)) / x21)) + 0.5403377024223394)', 'Equation constants: {0: np.float64(5.00891640503667), 1: np.float64(5.00891640503667), 2: np.float64(5.00891640503667)}\nTree:  (cos((x32)**(5.00891640503667)) cos (cos(cos((x5)**(5.00891640503667))))**(5.00891640503667))', 'Equation constants: {0: np.float64(-6.539849524910134)}\nTree:  cos(cos((x32)**(-6.539849524910134)))', 'Equation constants: {0: np.float64(0.5403376831877861), 1: np.float64(0.5403376831877861), 2: np.float64(0.5403376831877861)}\nTree:  (((x78)**(0.5403376831877861) * (const((x96 / x86)) / x21)) + 0.5403376831877861)']
MSE: [np.float64(8969607068.741648), np.float64(0.2525872185289317), np.float64(367.5152902275865), np.float64(0.2951855918174644), np.float64(0.25413019008655136), np.float64(0.29518560118048076), np.float64(1.2175417226224527), np.float64(0.3063729736167944), np.float64(0.25335596340553107), np.float64(0.2951857360442049)]
Generators: ['Generator(mode=real, range=(0.15694404225850433, 0.9569440422585044), n_g=341, sigma_y=0.03968253758630983, unit=0.5859747828302897)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.01693121603682553, unit=0.5859747828302897)', 'Generator(mode=real, range=(-4.795427896243155, 5.204572103756845), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5859747828302897)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(-1.7647999999999997, 3.7647999999999997), n_g=590, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.012804371361565698, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03809523608285744, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5273773045472607)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.15694404225850433, 0.9569440422585044), n_g=341, sigma_y=0.03968253758630983, unit=0.5859747828302897)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.6948219255730432)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5273773045472607)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.9435853310251204)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.015365245633878836, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.6948219255730432)', 'Generator(mode=real, range=(-1.7647999999999997, 3.7647999999999997), n_g=558, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03809523608285744, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.47463957409253466)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.031746030069047866, unit=0.5273773045472607)', 'Generator(mode=real, range=(-4.795427896243155, 5.204572103756845), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.031746030069047866, unit=0.5273773045472607)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.012804371361565698, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=373, sigma_y=0.031746030069047866, unit=0.5273773045472607)', 'Generator(mode=real, range=(-1.7647999999999997, 3.7647999999999997), n_g=558, sigma_y=0.0049867926462979556, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.6948219255730432)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.9435853310251204)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03809523608285744, unit=0.5273773045472607)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.030476188866285954, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)']
Gen 15: 10 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {1: np.float64(-4.61439743911717)}\nTree:  cos(cos((x32)**(-4.61439743911717)))', 'Equation constants: {0: np.float64(6.286505060720625), 1: np.float64(6.286505060720625), 2: np.float64(6.286505060720625), 3: np.float64(6.286505060720625)}\nTree:  (cos((x32)**(6.286505060720625)) cos (cos(((x5)**(6.286505060720625) cos cos(6.286505060720625))))**(6.286505060720625))', 'Equation constants: {0: np.float64(0.5403377015908631), 1: np.float64(0.5403377015908631), 2: np.float64(0.5403377015908631)}\nTree:  (((x78((x45)**(x9)))**(0.5403377015908631) * (0.5403377015908631 / x21)) + 0.5403377015908631)', 'Equation constants: {0: np.float64(0.5403376838112948), 1: np.float64(0.5403376838112948), 2: np.float64(0.5403376838112948)}\nTree:  (((x78)**(0.5403376838112948) * (0.5403376838112948 / x21)) + 0.5403376838112948)', 'Equation constants: {3: np.float64(15.814201492847708), 4: np.float64(15.814201492847708)}\nTree:  ((x39 / (15.814201492847708 + 15.814201492847708)) / x55)', 'Equation constants: {0: np.float64(-0.9004054977850373), 1: np.float64(-0.9004054977850373), 2: np.float64(-0.9004054977850373), 3: np.float64(-0.9004054977850373)}\nTree:  (pow((x78)**(-0.9004054977850373), (-0.9004054977850373 / x21), (-0.9004054977850373 - x7)) + -0.9004054977850373)', 'Equation constants: {1: np.float64(-8.226190803615713)}\nTree:  cos(cos((x32)**(-8.226190803615713)))', 'Equation constants: {0: np.float64(0.5403377204862677), 1: np.float64(0.5403377204862677), 2: np.float64(0.5403377204862677)}\nTree:  (((x78((x45)**(x9)))**(0.5403377204862677) * (const((x96 / x86)) / x21)) + 0.5403377204862677)', 'Equation constants: {0: np.float64(-0.0714499191789207), 2: np.float64(-0.0714499191789207), 3: np.float64(-0.0714499191789207)}\nTree:  (((x78((x45)**(x9)))**(const(sin(x48))) * (-0.0714499191789207 / x21)) + -0.0714499191789207)', 'Equation constants: {0: np.float64(-4.614269403452138)}\nTree:  cos(cos((x32)**(-4.614269403452138)))', 'Equation constants: {3: np.float64(0.5000000000000016)}\nTree:  const((x96)**(x24))', 'Equation constants: {1: np.float64(17.434279511281648), 2: np.float64(17.434279511281648)}\nTree:  ((x39 / ((x55)**(17.434279511281648))**(cos(17.434279511281648))) / x55)', 'Equation constants: {0: np.float64(-2.727591684298602), 1: np.float64(-2.727591684298602), 2: np.float64(-2.727591684298602)}\nTree:  (cos((x32)**(-2.727591684298602)) cos (cos(cos((x5)**(-2.727591684298602))))**(-2.727591684298602))', 'Equation constants: {3: np.float64(3.821997259891643), 4: np.float64(3.821997259891643)}\nTree:  ((x39 / (3.821997259891643 + 3.821997259891643)) / x55)', 'Equation constants: {0: np.float64(0.5403376821512907), 1: np.float64(0.5403376821512907), 2: np.float64(0.5403376821512907)}\nTree:  (((x78)**(0.5403376821512907) * (0.5403376821512907 / x21((x6 - x34)))) + 0.5403376821512907)', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-9.265962360956957)}\nTree:  cos(cos((x32)**(-9.265962360956957)))', 'Equation constants: {0: np.float64(0.5188216419061537), 1: np.float64(0.5188216419061537), 2: np.float64(0.5188216419061537)}\nTree:  (((x78)**(0.5188216419061537))**((0.5188216419061537 / x21)) * 0.5188216419061537)', 'Equation constants: {0: np.float64(0.5403376999749017), 1: np.float64(0.5403376999749017), 2: np.float64(0.5403376999749017)}\nTree:  (((x78)**(0.5403376999749017) * (0.5403376999749017 / x21)) + 0.5403376999749017)', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {0: np.float64(0.540337710876905), 1: np.float64(0.540337710876905), 2: np.float64(0.540337710876905)}\nTree:  (((x78)**(0.540337710876905) * (0.540337710876905 / x21)) + 0.540337710876905)', 'Equation constants: {0: np.float64(0.5403377141922353), 1: np.float64(0.5403377141922353), 2: np.float64(0.5403377141922353)}\nTree:  (((x78)**(0.5403377141922353) * (0.5403377141922353 / x21)) + 0.5403377141922353)', 'Equation constants: {1: np.float64(-4.614007128741271)}\nTree:  cos(cos((x32)**(-4.614007128741271)))', 'Equation constants: {2: np.float64(6.614824875459107e-05), 3: np.float64(6.614824875459107e-05), 4: np.float64(6.614824875459107e-05)}\nTree:  (((x78((x45)**(x9)))**(cos(sin(6.614824875459107e-05))) * (6.614824875459107e-05 / x21)) + 6.614824875459107e-05)', 'Equation constants: {0: np.float64(0.540337698755498), 1: np.float64(0.540337698755498), 2: np.float64(0.540337698755498)}\nTree:  (((x78((x45)**(x9)))**(0.540337698755498) * (const((x76 * x32)) / x21)) + 0.540337698755498)', 'Equation constants: {0: np.float64(-0.4812023533677686), 1: np.float64(-0.4812023533677686), 2: np.float64(-0.4812023533677686)}\nTree:  (((x78)**(-0.4812023533677686))**((-0.4812023533677686 / x21)) + -0.4812023533677686)', 'Equation constants: {0: np.float64(0.5403377024223394), 1: np.float64(0.5403377024223394), 2: np.float64(0.5403377024223394)}\nTree:  (((x78)**(0.5403377024223394) * (const(sin(x16)) / x21)) + 0.5403377024223394)', 'Equation constants: {0: np.float64(5.00891640503667), 1: np.float64(5.00891640503667), 2: np.float64(5.00891640503667)}\nTree:  (cos((x32)**(5.00891640503667)) cos (cos(cos((x5)**(5.00891640503667))))**(5.00891640503667))', 'Equation constants: {0: np.float64(-6.539849524910134)}\nTree:  cos(cos((x32)**(-6.539849524910134)))', 'Equation constants: {0: np.float64(0.5403376831877861), 1: np.float64(0.5403376831877861), 2: np.float64(0.5403376831877861)}\nTree:  (((x78)**(0.5403376831877861) * (const((x96 / x86)) / x21)) + 0.5403376831877861)', 'Equation constants: {0: np.float64(0.5403377453703397), 1: np.float64(0.5403377453703397), 2: np.float64(0.5403377453703397)}\nTree:  (((x78)**(0.5403377453703397) * (0.5403377453703397 / x21)) + 0.5403377453703397)', 'Equation constants: {0: np.float64(0.5403376964096993), 1: np.float64(0.5403376964096993), 2: np.float64(0.5403376964096993)}\nTree:  (((x78)**(const((x20 + x60))) * (0.5403376964096993 / x21)) + 0.5403376964096993)', 'Equation constants: {2: np.float64(0.009300772992299278)}\nTree:  cos(((x20 + x1))**(0.009300772992299278))', 'Equation constants: {3: np.float64(21.494339865142642), 4: np.float64(21.494339865142642)}\nTree:  ((x39 / (21.494339865142642 + 21.494339865142642)) / x55)', 'Equation constants: {0: np.float64(0.5403376997736592), 1: np.float64(0.5403376997736592), 2: np.float64(0.5403376997736592)}\nTree:  (((x78)**(0.5403376997736592) * (0.5403376997736592 / x21)) + 0.5403376997736592)', 'Equation constants: {0: np.float64(0.5403377141666834), 1: np.float64(0.5403377141666834), 2: np.float64(0.5403377141666834)}\nTree:  (((x78)**(0.5403377141666834) * (0.5403377141666834 / x21)) + 0.5403377141666834)', 'Equation constants: {0: np.float64(0.540337654770702), 1: np.float64(0.540337654770702), 2: np.float64(0.540337654770702)}\nTree:  (((x78((x45)**(x9)))**(0.540337654770702) * /(0.540337654770702, x21, (x15)**(x95))) + 0.540337654770702)', 'Equation constants: {1: np.float64(-6.539556371223377)}\nTree:  cos(((x32)**(-6.539556371223377) cos sin(x35)))', 'Equation constants: {0: np.float64(0.5403378124633971), 1: np.float64(0.5403378124633971), 2: np.float64(0.5403378124633971)}\nTree:  (((x78((x21)**(x9)))**(0.5403378124633971) * (0.5403378124633971 / x21)) + 0.5403378124633971)', 'Equation constants: {0: np.float64(0.5005291303310683), 1: np.float64(0.5005291303310683), 2: np.float64(0.5005291303310683)}\nTree:  (((x78)**(0.5005291303310683) * (0.5005291303310683 / x45)) + 0.5005291303310683)']
MSE: [np.float64(400335405.6163382), np.float64(0.2951855974100571), np.float64(0.29518561048161224), np.float64(0.25051152785739217), np.float64(0.5536705504800815), np.float64(9721306534018.049), np.float64(0.2951855981419584), np.float64(0.2951855951037926), np.float64(0.2951856235958288), np.float64(0.25258721852967486), np.float64(0.29518560292702095), np.float64(0.29416225931846196)]
Generators: ['Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5273773045472607)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.15694404225850433, 0.9569440422585044), n_g=341, sigma_y=0.03968253758630983, unit=0.5859747828302897)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.6948219255730432)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5273773045472607)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.9435853310251204)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.015365245633878836, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.6948219255730432)', 'Generator(mode=real, range=(-1.7647999999999997, 3.7647999999999997), n_g=558, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03809523608285744, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.47463957409253466)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.031746030069047866, unit=0.5273773045472607)', 'Generator(mode=real, range=(-4.795427896243155, 5.204572103756845), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.031746030069047866, unit=0.5273773045472607)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.012804371361565698, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=373, sigma_y=0.031746030069047866, unit=0.5273773045472607)', 'Generator(mode=real, range=(-1.7647999999999997, 3.7647999999999997), n_g=558, sigma_y=0.0049867926462979556, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.6948219255730432)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.9435853310251204)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03809523608285744, unit=0.5273773045472607)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.030476188866285954, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-4.795427896243155, 5.204572103756845), n_g=548, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.01693121603682553, unit=0.5859747828302897)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5859747828302897)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.625339733015739)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.015365245633878836, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.008536247574377131, unit=0.9435853310251204)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.15694404225850433, 0.9569440422585044), n_g=341, sigma_y=0.03968253758630983, unit=0.5859747828302897)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.024380951093028763, unit=0.5327043480275361)']
Gen 16: 5 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.9004054977850373), 1: np.float64(-0.9004054977850373), 2: np.float64(-0.9004054977850373), 3: np.float64(-0.9004054977850373)}\nTree:  (pow((x78)**(-0.9004054977850373), (-0.9004054977850373 / x21), (-0.9004054977850373 - x7)) + -0.9004054977850373)', 'Equation constants: {1: np.float64(-8.226190803615713)}\nTree:  cos(cos((x32)**(-8.226190803615713)))', 'Equation constants: {0: np.float64(0.5403377204862677), 1: np.float64(0.5403377204862677), 2: np.float64(0.5403377204862677)}\nTree:  (((x78((x45)**(x9)))**(0.5403377204862677) * (const((x96 / x86)) / x21)) + 0.5403377204862677)', 'Equation constants: {0: np.float64(-0.0714499191789207), 2: np.float64(-0.0714499191789207), 3: np.float64(-0.0714499191789207)}\nTree:  (((x78((x45)**(x9)))**(const(sin(x48))) * (-0.0714499191789207 / x21)) + -0.0714499191789207)', 'Equation constants: {0: np.float64(-4.614269403452138)}\nTree:  cos(cos((x32)**(-4.614269403452138)))', 'Equation constants: {3: np.float64(0.5000000000000016)}\nTree:  const((x96)**(x24))', 'Equation constants: {1: np.float64(17.434279511281648), 2: np.float64(17.434279511281648)}\nTree:  ((x39 / ((x55)**(17.434279511281648))**(cos(17.434279511281648))) / x55)', 'Equation constants: {0: np.float64(-2.727591684298602), 1: np.float64(-2.727591684298602), 2: np.float64(-2.727591684298602)}\nTree:  (cos((x32)**(-2.727591684298602)) cos (cos(cos((x5)**(-2.727591684298602))))**(-2.727591684298602))', 'Equation constants: {3: np.float64(3.821997259891643), 4: np.float64(3.821997259891643)}\nTree:  ((x39 / (3.821997259891643 + 3.821997259891643)) / x55)', 'Equation constants: {0: np.float64(0.5403376821512907), 1: np.float64(0.5403376821512907), 2: np.float64(0.5403376821512907)}\nTree:  (((x78)**(0.5403376821512907) * (0.5403376821512907 / x21((x6 - x34)))) + 0.5403376821512907)', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-9.265962360956957)}\nTree:  cos(cos((x32)**(-9.265962360956957)))', 'Equation constants: {0: np.float64(0.5188216419061537), 1: np.float64(0.5188216419061537), 2: np.float64(0.5188216419061537)}\nTree:  (((x78)**(0.5188216419061537))**((0.5188216419061537 / x21)) * 0.5188216419061537)', 'Equation constants: {0: np.float64(0.5403376999749017), 1: np.float64(0.5403376999749017), 2: np.float64(0.5403376999749017)}\nTree:  (((x78)**(0.5403376999749017) * (0.5403376999749017 / x21)) + 0.5403376999749017)', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {0: np.float64(0.540337710876905), 1: np.float64(0.540337710876905), 2: np.float64(0.540337710876905)}\nTree:  (((x78)**(0.540337710876905) * (0.540337710876905 / x21)) + 0.540337710876905)', 'Equation constants: {0: np.float64(0.5403377141922353), 1: np.float64(0.5403377141922353), 2: np.float64(0.5403377141922353)}\nTree:  (((x78)**(0.5403377141922353) * (0.5403377141922353 / x21)) + 0.5403377141922353)', 'Equation constants: {1: np.float64(-4.614007128741271)}\nTree:  cos(cos((x32)**(-4.614007128741271)))', 'Equation constants: {2: np.float64(6.614824875459107e-05), 3: np.float64(6.614824875459107e-05), 4: np.float64(6.614824875459107e-05)}\nTree:  (((x78((x45)**(x9)))**(cos(sin(6.614824875459107e-05))) * (6.614824875459107e-05 / x21)) + 6.614824875459107e-05)', 'Equation constants: {0: np.float64(0.540337698755498), 1: np.float64(0.540337698755498), 2: np.float64(0.540337698755498)}\nTree:  (((x78((x45)**(x9)))**(0.540337698755498) * (const((x76 * x32)) / x21)) + 0.540337698755498)', 'Equation constants: {0: np.float64(-0.4812023533677686), 1: np.float64(-0.4812023533677686), 2: np.float64(-0.4812023533677686)}\nTree:  (((x78)**(-0.4812023533677686))**((-0.4812023533677686 / x21)) + -0.4812023533677686)', 'Equation constants: {0: np.float64(0.5403377024223394), 1: np.float64(0.5403377024223394), 2: np.float64(0.5403377024223394)}\nTree:  (((x78)**(0.5403377024223394) * (const(sin(x16)) / x21)) + 0.5403377024223394)', 'Equation constants: {0: np.float64(5.00891640503667), 1: np.float64(5.00891640503667), 2: np.float64(5.00891640503667)}\nTree:  (cos((x32)**(5.00891640503667)) cos (cos(cos((x5)**(5.00891640503667))))**(5.00891640503667))', 'Equation constants: {0: np.float64(-6.539849524910134)}\nTree:  cos(cos((x32)**(-6.539849524910134)))', 'Equation constants: {0: np.float64(0.5403376831877861), 1: np.float64(0.5403376831877861), 2: np.float64(0.5403376831877861)}\nTree:  (((x78)**(0.5403376831877861) * (const((x96 / x86)) / x21)) + 0.5403376831877861)', 'Equation constants: {0: np.float64(0.5403377453703397), 1: np.float64(0.5403377453703397), 2: np.float64(0.5403377453703397)}\nTree:  (((x78)**(0.5403377453703397) * (0.5403377453703397 / x21)) + 0.5403377453703397)', 'Equation constants: {0: np.float64(0.5403376964096993), 1: np.float64(0.5403376964096993), 2: np.float64(0.5403376964096993)}\nTree:  (((x78)**(const((x20 + x60))) * (0.5403376964096993 / x21)) + 0.5403376964096993)', 'Equation constants: {2: np.float64(0.009300772992299278)}\nTree:  cos(((x20 + x1))**(0.009300772992299278))', 'Equation constants: {3: np.float64(21.494339865142642), 4: np.float64(21.494339865142642)}\nTree:  ((x39 / (21.494339865142642 + 21.494339865142642)) / x55)', 'Equation constants: {0: np.float64(0.5403376997736592), 1: np.float64(0.5403376997736592), 2: np.float64(0.5403376997736592)}\nTree:  (((x78)**(0.5403376997736592) * (0.5403376997736592 / x21)) + 0.5403376997736592)', 'Equation constants: {0: np.float64(0.5403377141666834), 1: np.float64(0.5403377141666834), 2: np.float64(0.5403377141666834)}\nTree:  (((x78)**(0.5403377141666834) * (0.5403377141666834 / x21)) + 0.5403377141666834)', 'Equation constants: {0: np.float64(0.540337654770702), 1: np.float64(0.540337654770702), 2: np.float64(0.540337654770702)}\nTree:  (((x78((x45)**(x9)))**(0.540337654770702) * /(0.540337654770702, x21, (x15)**(x95))) + 0.540337654770702)', 'Equation constants: {1: np.float64(-6.539556371223377)}\nTree:  cos(((x32)**(-6.539556371223377) cos sin(x35)))', 'Equation constants: {0: np.float64(0.5403378124633971), 1: np.float64(0.5403378124633971), 2: np.float64(0.5403378124633971)}\nTree:  (((x78((x21)**(x9)))**(0.5403378124633971) * (0.5403378124633971 / x21)) + 0.5403378124633971)', 'Equation constants: {0: np.float64(0.5005291303310683), 1: np.float64(0.5005291303310683), 2: np.float64(0.5005291303310683)}\nTree:  (((x78)**(0.5005291303310683) * (0.5005291303310683 / x45)) + 0.5005291303310683)', 'Equation constants: {0: np.float64(0.5403377061392978), 1: np.float64(0.5403377061392978), 2: np.float64(0.5403377061392978)}\nTree:  (((x78)**(0.5403377061392978) * (const(sin(x16)) / x21)) + 0.5403377061392978)', 'Equation constants: {1: np.float64(-8.226247160185762)}\nTree:  cos(cos((x32)**(-8.226247160185762)))', 'Equation constants: {0: np.float64(0.5403377225124223), 1: np.float64(0.5403377225124223), 2: np.float64(0.5403377225124223)}\nTree:  (((x78)**(0.5403377225124223) * (0.5403377225124223 / x21)) + 0.5403377225124223)', 'Equation constants: {0: np.float64(0.5403376553931779), 1: np.float64(0.5403376553931779), 2: np.float64(0.5403376553931779)}\nTree:  (((x78)**(0.5403376553931779) * (0.5403376553931779 / x21)) + 0.5403376553931779)', 'Equation constants: {0: np.float64(0.5403377107835947), 1: np.float64(0.5403377107835947), 2: np.float64(0.5403377107835947)}\nTree:  (((x78)**(0.5403377107835947) * (0.5403377107835947 / x21(cos(x9)))) + 0.5403377107835947)']
MSE: [np.float64(0.2951856109514251), np.float64(0.31865197443082843), np.float64(2.3337524776989687e+36), np.float64(0.25344443223499885), np.float64(0.2951855884792444), np.float64(0.295185606018894), np.float64(18.70766916079136), np.float64(16.812741755083607), np.float64(1.2238292568183257e+272), np.float64(0.2951856068004381)]
Generators: ['Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.015365245633878836, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.6948219255730432)', 'Generator(mode=real, range=(-1.7647999999999997, 3.7647999999999997), n_g=558, sigma_y=0.006233490807872444, unit=0.6934657012952925)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03809523608285744, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.47463957409253466)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.031746030069047866, unit=0.5273773045472607)', 'Generator(mode=real, range=(-4.795427896243155, 5.204572103756845), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.031746030069047866, unit=0.5273773045472607)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.012804371361565698, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=373, sigma_y=0.031746030069047866, unit=0.5273773045472607)', 'Generator(mode=real, range=(-1.7647999999999997, 3.7647999999999997), n_g=558, sigma_y=0.0049867926462979556, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.6948219255730432)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.9435853310251204)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03809523608285744, unit=0.5273773045472607)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.030476188866285954, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-4.795427896243155, 5.204572103756845), n_g=548, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.01693121603682553, unit=0.5859747828302897)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5859747828302897)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.625339733015739)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.015365245633878836, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.008536247574377131, unit=0.9435853310251204)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.15694404225850433, 0.9569440422585044), n_g=341, sigma_y=0.03968253758630983, unit=0.5859747828302897)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.024380951093028763, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5859747828302897)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03809523608285744, unit=0.5273773045472607)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03809523608285744, unit=0.5859747828302897)', 'Generator(mode=real, range=(-1.9228964391187189, 2.077103560881281), n_g=838, sigma_y=0.010670309467971414, unit=0.625339733015739)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-4.795427896243155, 5.204572103756845), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.018043091138478386, unit=0.9022846433438121)']
Gen 17: 5 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {3: np.float64(0.5000000000000016)}\nTree:  const((x96)**(x24))', 'Equation constants: {1: np.float64(17.434279511281648), 2: np.float64(17.434279511281648)}\nTree:  ((x39 / ((x55)**(17.434279511281648))**(cos(17.434279511281648))) / x55)', 'Equation constants: {0: np.float64(-2.727591684298602), 1: np.float64(-2.727591684298602), 2: np.float64(-2.727591684298602)}\nTree:  (cos((x32)**(-2.727591684298602)) cos (cos(cos((x5)**(-2.727591684298602))))**(-2.727591684298602))', 'Equation constants: {3: np.float64(3.821997259891643), 4: np.float64(3.821997259891643)}\nTree:  ((x39 / (3.821997259891643 + 3.821997259891643)) / x55)', 'Equation constants: {0: np.float64(0.5403376821512907), 1: np.float64(0.5403376821512907), 2: np.float64(0.5403376821512907)}\nTree:  (((x78)**(0.5403376821512907) * (0.5403376821512907 / x21((x6 - x34)))) + 0.5403376821512907)', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-9.265962360956957)}\nTree:  cos(cos((x32)**(-9.265962360956957)))', 'Equation constants: {0: np.float64(0.5188216419061537), 1: np.float64(0.5188216419061537), 2: np.float64(0.5188216419061537)}\nTree:  (((x78)**(0.5188216419061537))**((0.5188216419061537 / x21)) * 0.5188216419061537)', 'Equation constants: {0: np.float64(0.5403376999749017), 1: np.float64(0.5403376999749017), 2: np.float64(0.5403376999749017)}\nTree:  (((x78)**(0.5403376999749017) * (0.5403376999749017 / x21)) + 0.5403376999749017)', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {0: np.float64(0.540337710876905), 1: np.float64(0.540337710876905), 2: np.float64(0.540337710876905)}\nTree:  (((x78)**(0.540337710876905) * (0.540337710876905 / x21)) + 0.540337710876905)', 'Equation constants: {0: np.float64(0.5403377141922353), 1: np.float64(0.5403377141922353), 2: np.float64(0.5403377141922353)}\nTree:  (((x78)**(0.5403377141922353) * (0.5403377141922353 / x21)) + 0.5403377141922353)', 'Equation constants: {1: np.float64(-4.614007128741271)}\nTree:  cos(cos((x32)**(-4.614007128741271)))', 'Equation constants: {2: np.float64(6.614824875459107e-05), 3: np.float64(6.614824875459107e-05), 4: np.float64(6.614824875459107e-05)}\nTree:  (((x78((x45)**(x9)))**(cos(sin(6.614824875459107e-05))) * (6.614824875459107e-05 / x21)) + 6.614824875459107e-05)', 'Equation constants: {0: np.float64(0.540337698755498), 1: np.float64(0.540337698755498), 2: np.float64(0.540337698755498)}\nTree:  (((x78((x45)**(x9)))**(0.540337698755498) * (const((x76 * x32)) / x21)) + 0.540337698755498)', 'Equation constants: {0: np.float64(-0.4812023533677686), 1: np.float64(-0.4812023533677686), 2: np.float64(-0.4812023533677686)}\nTree:  (((x78)**(-0.4812023533677686))**((-0.4812023533677686 / x21)) + -0.4812023533677686)', 'Equation constants: {0: np.float64(0.5403377024223394), 1: np.float64(0.5403377024223394), 2: np.float64(0.5403377024223394)}\nTree:  (((x78)**(0.5403377024223394) * (const(sin(x16)) / x21)) + 0.5403377024223394)', 'Equation constants: {0: np.float64(5.00891640503667), 1: np.float64(5.00891640503667), 2: np.float64(5.00891640503667)}\nTree:  (cos((x32)**(5.00891640503667)) cos (cos(cos((x5)**(5.00891640503667))))**(5.00891640503667))', 'Equation constants: {0: np.float64(-6.539849524910134)}\nTree:  cos(cos((x32)**(-6.539849524910134)))', 'Equation constants: {0: np.float64(0.5403376831877861), 1: np.float64(0.5403376831877861), 2: np.float64(0.5403376831877861)}\nTree:  (((x78)**(0.5403376831877861) * (const((x96 / x86)) / x21)) + 0.5403376831877861)', 'Equation constants: {0: np.float64(0.5403377453703397), 1: np.float64(0.5403377453703397), 2: np.float64(0.5403377453703397)}\nTree:  (((x78)**(0.5403377453703397) * (0.5403377453703397 / x21)) + 0.5403377453703397)', 'Equation constants: {0: np.float64(0.5403376964096993), 1: np.float64(0.5403376964096993), 2: np.float64(0.5403376964096993)}\nTree:  (((x78)**(const((x20 + x60))) * (0.5403376964096993 / x21)) + 0.5403376964096993)', 'Equation constants: {2: np.float64(0.009300772992299278)}\nTree:  cos(((x20 + x1))**(0.009300772992299278))', 'Equation constants: {3: np.float64(21.494339865142642), 4: np.float64(21.494339865142642)}\nTree:  ((x39 / (21.494339865142642 + 21.494339865142642)) / x55)', 'Equation constants: {0: np.float64(0.5403376997736592), 1: np.float64(0.5403376997736592), 2: np.float64(0.5403376997736592)}\nTree:  (((x78)**(0.5403376997736592) * (0.5403376997736592 / x21)) + 0.5403376997736592)', 'Equation constants: {0: np.float64(0.5403377141666834), 1: np.float64(0.5403377141666834), 2: np.float64(0.5403377141666834)}\nTree:  (((x78)**(0.5403377141666834) * (0.5403377141666834 / x21)) + 0.5403377141666834)', 'Equation constants: {0: np.float64(0.540337654770702), 1: np.float64(0.540337654770702), 2: np.float64(0.540337654770702)}\nTree:  (((x78((x45)**(x9)))**(0.540337654770702) * /(0.540337654770702, x21, (x15)**(x95))) + 0.540337654770702)', 'Equation constants: {1: np.float64(-6.539556371223377)}\nTree:  cos(((x32)**(-6.539556371223377) cos sin(x35)))', 'Equation constants: {0: np.float64(0.5403378124633971), 1: np.float64(0.5403378124633971), 2: np.float64(0.5403378124633971)}\nTree:  (((x78((x21)**(x9)))**(0.5403378124633971) * (0.5403378124633971 / x21)) + 0.5403378124633971)', 'Equation constants: {0: np.float64(0.5005291303310683), 1: np.float64(0.5005291303310683), 2: np.float64(0.5005291303310683)}\nTree:  (((x78)**(0.5005291303310683) * (0.5005291303310683 / x45)) + 0.5005291303310683)', 'Equation constants: {0: np.float64(0.5403377061392978), 1: np.float64(0.5403377061392978), 2: np.float64(0.5403377061392978)}\nTree:  (((x78)**(0.5403377061392978) * (const(sin(x16)) / x21)) + 0.5403377061392978)', 'Equation constants: {1: np.float64(-8.226247160185762)}\nTree:  cos(cos((x32)**(-8.226247160185762)))', 'Equation constants: {0: np.float64(0.5403377225124223), 1: np.float64(0.5403377225124223), 2: np.float64(0.5403377225124223)}\nTree:  (((x78)**(0.5403377225124223) * (0.5403377225124223 / x21)) + 0.5403377225124223)', 'Equation constants: {0: np.float64(0.5403376553931779), 1: np.float64(0.5403376553931779), 2: np.float64(0.5403376553931779)}\nTree:  (((x78)**(0.5403376553931779) * (0.5403376553931779 / x21)) + 0.5403376553931779)', 'Equation constants: {0: np.float64(0.5403377107835947), 1: np.float64(0.5403377107835947), 2: np.float64(0.5403377107835947)}\nTree:  (((x78)**(0.5403377107835947) * (0.5403377107835947 / x21(cos(x9)))) + 0.5403377107835947)', 'Equation constants: {0: np.float64(0.5403376966389769), 1: np.float64(0.5403376966389769), 2: np.float64(0.5403376966389769)}\nTree:  (((x78)**(0.5403376966389769) * (const(sin(x16)) / x21)) + 0.5403376966389769)', 'Equation constants: {3: np.float64(-4.712387380510724)}\nTree:  cos(sin(-4.712387380510724))', 'Equation constants: {0: np.float64(0.540337733641789), 1: np.float64(0.540337733641789), 2: np.float64(0.540337733641789)}\nTree:  (((x78)**(0.540337733641789) * (0.540337733641789 / x21)) + 0.540337733641789)', 'Equation constants: {2: np.float64(-4.594113738951945), 3: np.float64(-4.594113738951945)}\nTree:  cos((cos(-4.594113738951945) * -4.594113738951945))', 'Equation constants: {0: np.float64(0.5403377071639033), 1: np.float64(0.5403377071639033), 2: np.float64(0.5403377071639033)}\nTree:  (((x78((x21)**(x9)))**(0.5403377071639033) * (0.5403377071639033 / x21)) + 0.5403377071639033)']
MSE: [np.float64(390215989.17727745), np.float64(4142.858343266589), np.float64(0.3209164047013721), np.float64(2.6913871373732804e+30), np.float64(0.2951856131529749), np.float64(0.25162427586098457), np.float64(128761037543.46962), np.float64(0.29518560292914237), np.float64(2.1447099520735144), np.float64(0.29518559128884053)]
Generators: ['Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.031746030069047866, unit=0.5273773045472607)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.012804371361565698, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=373, sigma_y=0.031746030069047866, unit=0.5273773045472607)', 'Generator(mode=real, range=(-1.7647999999999997, 3.7647999999999997), n_g=558, sigma_y=0.0049867926462979556, unit=0.6934657012952925)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.6948219255730432)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.9435853310251204)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.010670309467971414, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03809523608285744, unit=0.5273773045472607)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.030476188866285954, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.857804846386473)', 'Generator(mode=real, range=(-4.795427896243155, 5.204572103756845), n_g=548, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.01693121603682553, unit=0.5859747828302897)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5859747828302897)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.625339733015739)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.015365245633878836, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.008536247574377131, unit=0.9435853310251204)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.15694404225850433, 0.9569440422585044), n_g=341, sigma_y=0.03968253758630983, unit=0.5859747828302897)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.024380951093028763, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5859747828302897)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03809523608285744, unit=0.5273773045472607)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03809523608285744, unit=0.5859747828302897)', 'Generator(mode=real, range=(-1.9228964391187189, 2.077103560881281), n_g=838, sigma_y=0.010670309467971414, unit=0.625339733015739)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-4.795427896243155, 5.204572103756845), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.008536247574377131, unit=0.6948219255730432)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.012804371361565698, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.031746030069047866, unit=0.5801150350019868)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.012804371361565698, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.03247756404926109, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.019504760874423013, unit=0.5327043480275361)']
Gen 18: 5 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-9.265962360956957)}\nTree:  cos(cos((x32)**(-9.265962360956957)))', 'Equation constants: {0: np.float64(0.5188216419061537), 1: np.float64(0.5188216419061537), 2: np.float64(0.5188216419061537)}\nTree:  (((x78)**(0.5188216419061537))**((0.5188216419061537 / x21)) * 0.5188216419061537)', 'Equation constants: {0: np.float64(0.5403376999749017), 1: np.float64(0.5403376999749017), 2: np.float64(0.5403376999749017)}\nTree:  (((x78)**(0.5403376999749017) * (0.5403376999749017 / x21)) + 0.5403376999749017)', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {0: np.float64(0.540337710876905), 1: np.float64(0.540337710876905), 2: np.float64(0.540337710876905)}\nTree:  (((x78)**(0.540337710876905) * (0.540337710876905 / x21)) + 0.540337710876905)', 'Equation constants: {0: np.float64(0.5403377141922353), 1: np.float64(0.5403377141922353), 2: np.float64(0.5403377141922353)}\nTree:  (((x78)**(0.5403377141922353) * (0.5403377141922353 / x21)) + 0.5403377141922353)', 'Equation constants: {1: np.float64(-4.614007128741271)}\nTree:  cos(cos((x32)**(-4.614007128741271)))', 'Equation constants: {2: np.float64(6.614824875459107e-05), 3: np.float64(6.614824875459107e-05), 4: np.float64(6.614824875459107e-05)}\nTree:  (((x78((x45)**(x9)))**(cos(sin(6.614824875459107e-05))) * (6.614824875459107e-05 / x21)) + 6.614824875459107e-05)', 'Equation constants: {0: np.float64(0.540337698755498), 1: np.float64(0.540337698755498), 2: np.float64(0.540337698755498)}\nTree:  (((x78((x45)**(x9)))**(0.540337698755498) * (const((x76 * x32)) / x21)) + 0.540337698755498)', 'Equation constants: {0: np.float64(-0.4812023533677686), 1: np.float64(-0.4812023533677686), 2: np.float64(-0.4812023533677686)}\nTree:  (((x78)**(-0.4812023533677686))**((-0.4812023533677686 / x21)) + -0.4812023533677686)', 'Equation constants: {0: np.float64(0.5403377024223394), 1: np.float64(0.5403377024223394), 2: np.float64(0.5403377024223394)}\nTree:  (((x78)**(0.5403377024223394) * (const(sin(x16)) / x21)) + 0.5403377024223394)', 'Equation constants: {0: np.float64(5.00891640503667), 1: np.float64(5.00891640503667), 2: np.float64(5.00891640503667)}\nTree:  (cos((x32)**(5.00891640503667)) cos (cos(cos((x5)**(5.00891640503667))))**(5.00891640503667))', 'Equation constants: {0: np.float64(-6.539849524910134)}\nTree:  cos(cos((x32)**(-6.539849524910134)))', 'Equation constants: {0: np.float64(0.5403376831877861), 1: np.float64(0.5403376831877861), 2: np.float64(0.5403376831877861)}\nTree:  (((x78)**(0.5403376831877861) * (const((x96 / x86)) / x21)) + 0.5403376831877861)', 'Equation constants: {0: np.float64(0.5403377453703397), 1: np.float64(0.5403377453703397), 2: np.float64(0.5403377453703397)}\nTree:  (((x78)**(0.5403377453703397) * (0.5403377453703397 / x21)) + 0.5403377453703397)', 'Equation constants: {0: np.float64(0.5403376964096993), 1: np.float64(0.5403376964096993), 2: np.float64(0.5403376964096993)}\nTree:  (((x78)**(const((x20 + x60))) * (0.5403376964096993 / x21)) + 0.5403376964096993)', 'Equation constants: {2: np.float64(0.009300772992299278)}\nTree:  cos(((x20 + x1))**(0.009300772992299278))', 'Equation constants: {3: np.float64(21.494339865142642), 4: np.float64(21.494339865142642)}\nTree:  ((x39 / (21.494339865142642 + 21.494339865142642)) / x55)', 'Equation constants: {0: np.float64(0.5403376997736592), 1: np.float64(0.5403376997736592), 2: np.float64(0.5403376997736592)}\nTree:  (((x78)**(0.5403376997736592) * (0.5403376997736592 / x21)) + 0.5403376997736592)', 'Equation constants: {0: np.float64(0.5403377141666834), 1: np.float64(0.5403377141666834), 2: np.float64(0.5403377141666834)}\nTree:  (((x78)**(0.5403377141666834) * (0.5403377141666834 / x21)) + 0.5403377141666834)', 'Equation constants: {0: np.float64(0.540337654770702), 1: np.float64(0.540337654770702), 2: np.float64(0.540337654770702)}\nTree:  (((x78((x45)**(x9)))**(0.540337654770702) * /(0.540337654770702, x21, (x15)**(x95))) + 0.540337654770702)', 'Equation constants: {1: np.float64(-6.539556371223377)}\nTree:  cos(((x32)**(-6.539556371223377) cos sin(x35)))', 'Equation constants: {0: np.float64(0.5403378124633971), 1: np.float64(0.5403378124633971), 2: np.float64(0.5403378124633971)}\nTree:  (((x78((x21)**(x9)))**(0.5403378124633971) * (0.5403378124633971 / x21)) + 0.5403378124633971)', 'Equation constants: {0: np.float64(0.5005291303310683), 1: np.float64(0.5005291303310683), 2: np.float64(0.5005291303310683)}\nTree:  (((x78)**(0.5005291303310683) * (0.5005291303310683 / x45)) + 0.5005291303310683)', 'Equation constants: {0: np.float64(0.5403377061392978), 1: np.float64(0.5403377061392978), 2: np.float64(0.5403377061392978)}\nTree:  (((x78)**(0.5403377061392978) * (const(sin(x16)) / x21)) + 0.5403377061392978)', 'Equation constants: {1: np.float64(-8.226247160185762)}\nTree:  cos(cos((x32)**(-8.226247160185762)))', 'Equation constants: {0: np.float64(0.5403377225124223), 1: np.float64(0.5403377225124223), 2: np.float64(0.5403377225124223)}\nTree:  (((x78)**(0.5403377225124223) * (0.5403377225124223 / x21)) + 0.5403377225124223)', 'Equation constants: {0: np.float64(0.5403376553931779), 1: np.float64(0.5403376553931779), 2: np.float64(0.5403376553931779)}\nTree:  (((x78)**(0.5403376553931779) * (0.5403376553931779 / x21)) + 0.5403376553931779)', 'Equation constants: {0: np.float64(0.5403377107835947), 1: np.float64(0.5403377107835947), 2: np.float64(0.5403377107835947)}\nTree:  (((x78)**(0.5403377107835947) * (0.5403377107835947 / x21(cos(x9)))) + 0.5403377107835947)', 'Equation constants: {0: np.float64(0.5403376966389769), 1: np.float64(0.5403376966389769), 2: np.float64(0.5403376966389769)}\nTree:  (((x78)**(0.5403376966389769) * (const(sin(x16)) / x21)) + 0.5403376966389769)', 'Equation constants: {3: np.float64(-4.712387380510724)}\nTree:  cos(sin(-4.712387380510724))', 'Equation constants: {0: np.float64(0.540337733641789), 1: np.float64(0.540337733641789), 2: np.float64(0.540337733641789)}\nTree:  (((x78)**(0.540337733641789) * (0.540337733641789 / x21)) + 0.540337733641789)', 'Equation constants: {2: np.float64(-4.594113738951945), 3: np.float64(-4.594113738951945)}\nTree:  cos((cos(-4.594113738951945) * -4.594113738951945))', 'Equation constants: {0: np.float64(0.5403377071639033), 1: np.float64(0.5403377071639033), 2: np.float64(0.5403377071639033)}\nTree:  (((x78((x21)**(x9)))**(0.5403377071639033) * (0.5403377071639033 / x21)) + 0.5403377071639033)', 'Equation constants: {1: np.float64(-4.614284381360904)}\nTree:  cos(cos((x32)**(-4.614284381360904)))', 'Equation constants: {1: np.float64(7.161687747532767), 2: np.float64(7.161687747532767)}\nTree:  cos(((x32)**(7.161687747532767) cos sin(x35((x19 / 7.161687747532767)))))', 'Equation constants: {0: np.float64(0.5403376866534869), 1: np.float64(0.5403376866534869), 2: np.float64(0.5403376866534869)}\nTree:  (((x78)**(0.5403376866534869) * (0.5403376866534869 / x21(cos(x9)))) + 0.5403376866534869)', 'Equation constants: {0: np.float64(-8.959548009848437), 1: np.float64(-8.959548009848437), 2: np.float64(-8.959548009848437)}\nTree:  (cos((x32)**(-8.959548009848437)) cos (cos(cos((x5 * -8.959548009848437))))**(-8.959548009848437))', 'Equation constants: {0: np.float64(0.5403377061355079), 1: np.float64(0.5403377061355079), 2: np.float64(0.5403377061355079)}\nTree:  (((x78)**(0.5403377061355079) * (0.5403377061355079 / x21)) + 0.5403377061355079)']
MSE: [np.float64(0.25344443217760876), np.float64(0.25350480484579707), np.float64(21.778320782829955), np.float64(0.2951856082439692), np.float64(1.5378747631645123e+37), np.float64(1397.0966040119415), np.float64(0.25523411209932306), np.float64(0.27897057316085927), np.float64(697.2597222651392), np.float64(0.3459558880489647)]
Generators: ['Generator(mode=real, range=(-4.795427896243155, 5.204572103756845), n_g=548, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.01693121603682553, unit=0.5859747828302897)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5859747828302897)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.625339733015739)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.015365245633878836, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.008536247574377131, unit=0.9435853310251204)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.15694404225850433, 0.9569440422585044), n_g=341, sigma_y=0.03968253758630983, unit=0.5859747828302897)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.024380951093028763, unit=0.5327043480275361)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5859747828302897)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03809523608285744, unit=0.5273773045472607)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03809523608285744, unit=0.5859747828302897)', 'Generator(mode=real, range=(-1.9228964391187189, 2.077103560881281), n_g=838, sigma_y=0.010670309467971414, unit=0.625339733015739)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-4.795427896243155, 5.204572103756845), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.008536247574377131, unit=0.6948219255730432)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.012804371361565698, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.031746030069047866, unit=0.5801150350019868)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.012804371361565698, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.03247756404926109, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.019504760874423013, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.01229219650710307, unit=0.857804846386473)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.03809523608285744, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.019504760874423013, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.9435853310251204)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.03247756404926109, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9925131076781933)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.625339733015739)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.7720243617478257)']
Gen 19: 7 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {1: np.float64(-4.614007128741271)}\nTree:  cos(cos((x32)**(-4.614007128741271)))', 'Equation constants: {2: np.float64(6.614824875459107e-05), 3: np.float64(6.614824875459107e-05), 4: np.float64(6.614824875459107e-05)}\nTree:  (((x78((x45)**(x9)))**(cos(sin(6.614824875459107e-05))) * (6.614824875459107e-05 / x21)) + 6.614824875459107e-05)', 'Equation constants: {0: np.float64(0.540337698755498), 1: np.float64(0.540337698755498), 2: np.float64(0.540337698755498)}\nTree:  (((x78((x45)**(x9)))**(0.540337698755498) * (const((x76 * x32)) / x21)) + 0.540337698755498)', 'Equation constants: {0: np.float64(-0.4812023533677686), 1: np.float64(-0.4812023533677686), 2: np.float64(-0.4812023533677686)}\nTree:  (((x78)**(-0.4812023533677686))**((-0.4812023533677686 / x21)) + -0.4812023533677686)', 'Equation constants: {0: np.float64(0.5403377024223394), 1: np.float64(0.5403377024223394), 2: np.float64(0.5403377024223394)}\nTree:  (((x78)**(0.5403377024223394) * (const(sin(x16)) / x21)) + 0.5403377024223394)', 'Equation constants: {0: np.float64(5.00891640503667), 1: np.float64(5.00891640503667), 2: np.float64(5.00891640503667)}\nTree:  (cos((x32)**(5.00891640503667)) cos (cos(cos((x5)**(5.00891640503667))))**(5.00891640503667))', 'Equation constants: {0: np.float64(-6.539849524910134)}\nTree:  cos(cos((x32)**(-6.539849524910134)))', 'Equation constants: {0: np.float64(0.5403376831877861), 1: np.float64(0.5403376831877861), 2: np.float64(0.5403376831877861)}\nTree:  (((x78)**(0.5403376831877861) * (const((x96 / x86)) / x21)) + 0.5403376831877861)', 'Equation constants: {0: np.float64(0.5403377453703397), 1: np.float64(0.5403377453703397), 2: np.float64(0.5403377453703397)}\nTree:  (((x78)**(0.5403377453703397) * (0.5403377453703397 / x21)) + 0.5403377453703397)', 'Equation constants: {0: np.float64(0.5403376964096993), 1: np.float64(0.5403376964096993), 2: np.float64(0.5403376964096993)}\nTree:  (((x78)**(const((x20 + x60))) * (0.5403376964096993 / x21)) + 0.5403376964096993)', 'Equation constants: {2: np.float64(0.009300772992299278)}\nTree:  cos(((x20 + x1))**(0.009300772992299278))', 'Equation constants: {3: np.float64(21.494339865142642), 4: np.float64(21.494339865142642)}\nTree:  ((x39 / (21.494339865142642 + 21.494339865142642)) / x55)', 'Equation constants: {0: np.float64(0.5403376997736592), 1: np.float64(0.5403376997736592), 2: np.float64(0.5403376997736592)}\nTree:  (((x78)**(0.5403376997736592) * (0.5403376997736592 / x21)) + 0.5403376997736592)', 'Equation constants: {0: np.float64(0.5403377141666834), 1: np.float64(0.5403377141666834), 2: np.float64(0.5403377141666834)}\nTree:  (((x78)**(0.5403377141666834) * (0.5403377141666834 / x21)) + 0.5403377141666834)', 'Equation constants: {0: np.float64(0.540337654770702), 1: np.float64(0.540337654770702), 2: np.float64(0.540337654770702)}\nTree:  (((x78((x45)**(x9)))**(0.540337654770702) * /(0.540337654770702, x21, (x15)**(x95))) + 0.540337654770702)', 'Equation constants: {1: np.float64(-6.539556371223377)}\nTree:  cos(((x32)**(-6.539556371223377) cos sin(x35)))', 'Equation constants: {0: np.float64(0.5403378124633971), 1: np.float64(0.5403378124633971), 2: np.float64(0.5403378124633971)}\nTree:  (((x78((x21)**(x9)))**(0.5403378124633971) * (0.5403378124633971 / x21)) + 0.5403378124633971)', 'Equation constants: {0: np.float64(0.5005291303310683), 1: np.float64(0.5005291303310683), 2: np.float64(0.5005291303310683)}\nTree:  (((x78)**(0.5005291303310683) * (0.5005291303310683 / x45)) + 0.5005291303310683)', 'Equation constants: {0: np.float64(0.5403377061392978), 1: np.float64(0.5403377061392978), 2: np.float64(0.5403377061392978)}\nTree:  (((x78)**(0.5403377061392978) * (const(sin(x16)) / x21)) + 0.5403377061392978)', 'Equation constants: {1: np.float64(-8.226247160185762)}\nTree:  cos(cos((x32)**(-8.226247160185762)))', 'Equation constants: {0: np.float64(0.5403377225124223), 1: np.float64(0.5403377225124223), 2: np.float64(0.5403377225124223)}\nTree:  (((x78)**(0.5403377225124223) * (0.5403377225124223 / x21)) + 0.5403377225124223)', 'Equation constants: {0: np.float64(0.5403376553931779), 1: np.float64(0.5403376553931779), 2: np.float64(0.5403376553931779)}\nTree:  (((x78)**(0.5403376553931779) * (0.5403376553931779 / x21)) + 0.5403376553931779)', 'Equation constants: {0: np.float64(0.5403377107835947), 1: np.float64(0.5403377107835947), 2: np.float64(0.5403377107835947)}\nTree:  (((x78)**(0.5403377107835947) * (0.5403377107835947 / x21(cos(x9)))) + 0.5403377107835947)', 'Equation constants: {0: np.float64(0.5403376966389769), 1: np.float64(0.5403376966389769), 2: np.float64(0.5403376966389769)}\nTree:  (((x78)**(0.5403376966389769) * (const(sin(x16)) / x21)) + 0.5403376966389769)', 'Equation constants: {3: np.float64(-4.712387380510724)}\nTree:  cos(sin(-4.712387380510724))', 'Equation constants: {0: np.float64(0.540337733641789), 1: np.float64(0.540337733641789), 2: np.float64(0.540337733641789)}\nTree:  (((x78)**(0.540337733641789) * (0.540337733641789 / x21)) + 0.540337733641789)', 'Equation constants: {2: np.float64(-4.594113738951945), 3: np.float64(-4.594113738951945)}\nTree:  cos((cos(-4.594113738951945) * -4.594113738951945))', 'Equation constants: {0: np.float64(0.5403377071639033), 1: np.float64(0.5403377071639033), 2: np.float64(0.5403377071639033)}\nTree:  (((x78((x21)**(x9)))**(0.5403377071639033) * (0.5403377071639033 / x21)) + 0.5403377071639033)', 'Equation constants: {1: np.float64(-4.614284381360904)}\nTree:  cos(cos((x32)**(-4.614284381360904)))', 'Equation constants: {1: np.float64(7.161687747532767), 2: np.float64(7.161687747532767)}\nTree:  cos(((x32)**(7.161687747532767) cos sin(x35((x19 / 7.161687747532767)))))', 'Equation constants: {0: np.float64(0.5403376866534869), 1: np.float64(0.5403376866534869), 2: np.float64(0.5403376866534869)}\nTree:  (((x78)**(0.5403376866534869) * (0.5403376866534869 / x21(cos(x9)))) + 0.5403376866534869)', 'Equation constants: {0: np.float64(-8.959548009848437), 1: np.float64(-8.959548009848437), 2: np.float64(-8.959548009848437)}\nTree:  (cos((x32)**(-8.959548009848437)) cos (cos(cos((x5 * -8.959548009848437))))**(-8.959548009848437))', 'Equation constants: {0: np.float64(0.5403377061355079), 1: np.float64(0.5403377061355079), 2: np.float64(0.5403377061355079)}\nTree:  (((x78)**(0.5403377061355079) * (0.5403377061355079 / x21)) + 0.5403377061355079)', 'Equation constants: {0: np.float64(0.5403376317806463), 1: np.float64(0.5403376317806463), 2: np.float64(0.5403376317806463)}\nTree:  (((x78)**(0.5403376317806463) * (0.5403376317806463 / x21)) + 0.5403376317806463)', 'Equation constants: {0: np.float64(0.5403377017770346), 1: np.float64(0.5403377017770346), 2: np.float64(0.5403377017770346)}\nTree:  (((x78)**(0.5403377017770346) * (const((x96 / x86)) / x21)) + 0.5403377017770346)', 'Equation constants: {1: np.float64(1.9496062357785462), 2: np.float64(1.9496062357785462)}\nTree:  (cos((x32)**(1.9496062357785462)) cos (1.9496062357785462 / x74))', 'Equation constants: {0: np.float64(0.5403376546030288), 1: np.float64(0.5403376546030288), 2: np.float64(0.5403376546030288)}\nTree:  (((x78)**(0.5403376546030288) * (0.5403376546030288 / x21)) + 0.5403376546030288)', 'Equation constants: {0: np.float64(0.540337708175974), 1: np.float64(0.540337708175974), 2: np.float64(0.540337708175974)}\nTree:  (((x78)**(0.540337708175974) * (const((sin(x90) / x86)) / x21)) + 0.540337708175974)', 'Equation constants: {0: np.float64(0.5403379322177034), 1: np.float64(0.5403379322177034), 2: np.float64(0.5403379322177034)}\nTree:  (((x78)**(0.5403379322177034) * (const(sin(x16)) / x21)) + 0.5403379322177034)', 'Equation constants: {0: np.float64(0.5403376854220472), 1: np.float64(0.5403376854220472), 2: np.float64(0.5403376854220472)}\nTree:  (((x78)**(0.5403376854220472) * (0.5403376854220472 / x21)) + 0.5403376854220472)']
MSE: [np.float64(6282397165476.165), np.float64(0.29518560383444764), np.float64(0.29518563158482014), np.float64(0.4363085026802926), np.float64(0.29518559711594405), np.float64(0.2951856028956065), np.float64(2.0067824357376427), np.float64(0.2951856050054112), np.float64(0.29518561935454274), np.float64(84158333333.82202)]
Generators: ['Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.5859747828302897)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03809523608285744, unit=0.5273773045472607)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.03809523608285744, unit=0.5859747828302897)', 'Generator(mode=real, range=(-1.9228964391187189, 2.077103560881281), n_g=838, sigma_y=0.010670309467971414, unit=0.625339733015739)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-4.795427896243155, 5.204572103756845), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.008536247574377131, unit=0.6948219255730432)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.012804371361565698, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.031746030069047866, unit=0.5801150350019868)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.012804371361565698, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.03247756404926109, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.019504760874423013, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.01229219650710307, unit=0.857804846386473)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.03809523608285744, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.019504760874423013, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.9435853310251204)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.03247756404926109, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9925131076781933)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.625339733015739)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.9435853310251204)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.012804371361565698, unit=0.625339733015739)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.03809523608285744, unit=0.5273773045472607)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=548, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.03247756404926109, unit=0.812056179009431)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.6445722611133187)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.01024349708925256, unit=0.7720243617478257)']
Gen 20: 7 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(0.5403376831877861), 1: np.float64(0.5403376831877861), 2: np.float64(0.5403376831877861)}\nTree:  (((x78)**(0.5403376831877861) * (const((x96 / x86)) / x21)) + 0.5403376831877861)', 'Equation constants: {0: np.float64(0.5403377453703397), 1: np.float64(0.5403377453703397), 2: np.float64(0.5403377453703397)}\nTree:  (((x78)**(0.5403377453703397) * (0.5403377453703397 / x21)) + 0.5403377453703397)', 'Equation constants: {0: np.float64(0.5403376964096993), 1: np.float64(0.5403376964096993), 2: np.float64(0.5403376964096993)}\nTree:  (((x78)**(const((x20 + x60))) * (0.5403376964096993 / x21)) + 0.5403376964096993)', 'Equation constants: {2: np.float64(0.009300772992299278)}\nTree:  cos(((x20 + x1))**(0.009300772992299278))', 'Equation constants: {3: np.float64(21.494339865142642), 4: np.float64(21.494339865142642)}\nTree:  ((x39 / (21.494339865142642 + 21.494339865142642)) / x55)', 'Equation constants: {0: np.float64(0.5403376997736592), 1: np.float64(0.5403376997736592), 2: np.float64(0.5403376997736592)}\nTree:  (((x78)**(0.5403376997736592) * (0.5403376997736592 / x21)) + 0.5403376997736592)', 'Equation constants: {0: np.float64(0.5403377141666834), 1: np.float64(0.5403377141666834), 2: np.float64(0.5403377141666834)}\nTree:  (((x78)**(0.5403377141666834) * (0.5403377141666834 / x21)) + 0.5403377141666834)', 'Equation constants: {0: np.float64(0.540337654770702), 1: np.float64(0.540337654770702), 2: np.float64(0.540337654770702)}\nTree:  (((x78((x45)**(x9)))**(0.540337654770702) * /(0.540337654770702, x21, (x15)**(x95))) + 0.540337654770702)', 'Equation constants: {1: np.float64(-6.539556371223377)}\nTree:  cos(((x32)**(-6.539556371223377) cos sin(x35)))', 'Equation constants: {0: np.float64(0.5403378124633971), 1: np.float64(0.5403378124633971), 2: np.float64(0.5403378124633971)}\nTree:  (((x78((x21)**(x9)))**(0.5403378124633971) * (0.5403378124633971 / x21)) + 0.5403378124633971)', 'Equation constants: {0: np.float64(0.5005291303310683), 1: np.float64(0.5005291303310683), 2: np.float64(0.5005291303310683)}\nTree:  (((x78)**(0.5005291303310683) * (0.5005291303310683 / x45)) + 0.5005291303310683)', 'Equation constants: {0: np.float64(0.5403377061392978), 1: np.float64(0.5403377061392978), 2: np.float64(0.5403377061392978)}\nTree:  (((x78)**(0.5403377061392978) * (const(sin(x16)) / x21)) + 0.5403377061392978)', 'Equation constants: {1: np.float64(-8.226247160185762)}\nTree:  cos(cos((x32)**(-8.226247160185762)))', 'Equation constants: {0: np.float64(0.5403377225124223), 1: np.float64(0.5403377225124223), 2: np.float64(0.5403377225124223)}\nTree:  (((x78)**(0.5403377225124223) * (0.5403377225124223 / x21)) + 0.5403377225124223)', 'Equation constants: {0: np.float64(0.5403376553931779), 1: np.float64(0.5403376553931779), 2: np.float64(0.5403376553931779)}\nTree:  (((x78)**(0.5403376553931779) * (0.5403376553931779 / x21)) + 0.5403376553931779)', 'Equation constants: {0: np.float64(0.5403377107835947), 1: np.float64(0.5403377107835947), 2: np.float64(0.5403377107835947)}\nTree:  (((x78)**(0.5403377107835947) * (0.5403377107835947 / x21(cos(x9)))) + 0.5403377107835947)', 'Equation constants: {0: np.float64(0.5403376966389769), 1: np.float64(0.5403376966389769), 2: np.float64(0.5403376966389769)}\nTree:  (((x78)**(0.5403376966389769) * (const(sin(x16)) / x21)) + 0.5403376966389769)', 'Equation constants: {3: np.float64(-4.712387380510724)}\nTree:  cos(sin(-4.712387380510724))', 'Equation constants: {0: np.float64(0.540337733641789), 1: np.float64(0.540337733641789), 2: np.float64(0.540337733641789)}\nTree:  (((x78)**(0.540337733641789) * (0.540337733641789 / x21)) + 0.540337733641789)', 'Equation constants: {2: np.float64(-4.594113738951945), 3: np.float64(-4.594113738951945)}\nTree:  cos((cos(-4.594113738951945) * -4.594113738951945))', 'Equation constants: {0: np.float64(0.5403377071639033), 1: np.float64(0.5403377071639033), 2: np.float64(0.5403377071639033)}\nTree:  (((x78((x21)**(x9)))**(0.5403377071639033) * (0.5403377071639033 / x21)) + 0.5403377071639033)', 'Equation constants: {1: np.float64(-4.614284381360904)}\nTree:  cos(cos((x32)**(-4.614284381360904)))', 'Equation constants: {1: np.float64(7.161687747532767), 2: np.float64(7.161687747532767)}\nTree:  cos(((x32)**(7.161687747532767) cos sin(x35((x19 / 7.161687747532767)))))', 'Equation constants: {0: np.float64(0.5403376866534869), 1: np.float64(0.5403376866534869), 2: np.float64(0.5403376866534869)}\nTree:  (((x78)**(0.5403376866534869) * (0.5403376866534869 / x21(cos(x9)))) + 0.5403376866534869)', 'Equation constants: {0: np.float64(-8.959548009848437), 1: np.float64(-8.959548009848437), 2: np.float64(-8.959548009848437)}\nTree:  (cos((x32)**(-8.959548009848437)) cos (cos(cos((x5 * -8.959548009848437))))**(-8.959548009848437))', 'Equation constants: {0: np.float64(0.5403377061355079), 1: np.float64(0.5403377061355079), 2: np.float64(0.5403377061355079)}\nTree:  (((x78)**(0.5403377061355079) * (0.5403377061355079 / x21)) + 0.5403377061355079)', 'Equation constants: {0: np.float64(0.5403376317806463), 1: np.float64(0.5403376317806463), 2: np.float64(0.5403376317806463)}\nTree:  (((x78)**(0.5403376317806463) * (0.5403376317806463 / x21)) + 0.5403376317806463)', 'Equation constants: {0: np.float64(0.5403377017770346), 1: np.float64(0.5403377017770346), 2: np.float64(0.5403377017770346)}\nTree:  (((x78)**(0.5403377017770346) * (const((x96 / x86)) / x21)) + 0.5403377017770346)', 'Equation constants: {1: np.float64(1.9496062357785462), 2: np.float64(1.9496062357785462)}\nTree:  (cos((x32)**(1.9496062357785462)) cos (1.9496062357785462 / x74))', 'Equation constants: {0: np.float64(0.5403376546030288), 1: np.float64(0.5403376546030288), 2: np.float64(0.5403376546030288)}\nTree:  (((x78)**(0.5403376546030288) * (0.5403376546030288 / x21)) + 0.5403376546030288)', 'Equation constants: {0: np.float64(0.540337708175974), 1: np.float64(0.540337708175974), 2: np.float64(0.540337708175974)}\nTree:  (((x78)**(0.540337708175974) * (const((sin(x90) / x86)) / x21)) + 0.540337708175974)', 'Equation constants: {0: np.float64(0.5403379322177034), 1: np.float64(0.5403379322177034), 2: np.float64(0.5403379322177034)}\nTree:  (((x78)**(0.5403379322177034) * (const(sin(x16)) / x21)) + 0.5403379322177034)', 'Equation constants: {0: np.float64(0.5403376854220472), 1: np.float64(0.5403376854220472), 2: np.float64(0.5403376854220472)}\nTree:  (((x78)**(0.5403376854220472) * (0.5403376854220472 / x21)) + 0.5403376854220472)', 'Equation constants: {0: np.float64(0.5501488488512954), 1: np.float64(0.5501488488512954), 2: np.float64(0.5501488488512954)}\nTree:  (((x90)**(0.5501488488512954) * (0.5501488488512954 / x21)) + 0.5501488488512954)', 'Equation constants: {3: np.float64(-2.2273070388701637), 4: np.float64(-2.2273070388701637), 5: np.float64(-2.2273070388701637)}\nTree:  /((x39 / (-2.2273070388701637 + -2.2273070388701637)), x55, (x38)**(-2.2273070388701637))', 'Equation constants: {1: np.float64(-4.684042875818708), 2: np.float64(-4.684042875818708)}\nTree:  cos(((x32)**(-4.684042875818708) cos sin(x35((x19 / -4.684042875818708)))))', 'Equation constants: {0: np.float64(0.5403377171225677), 1: np.float64(0.5403377171225677), 2: np.float64(0.5403377171225677)}\nTree:  (((x78((sin(x11) + x34)))**(0.5403377171225677) * (0.5403377171225677 / x21)) + 0.5403377171225677)', 'Equation constants: {0: np.float64(0.5062783296419003), 1: np.float64(0.5062783296419003), 2: np.float64(0.5062783296419003)}\nTree:  (((x78)**(0.5062783296419003) * (const((x96 / x86)))**(x21)) + 0.5062783296419003)', 'Equation constants: {2: np.float64(0.009300772992299278)}\nTree:  cos(((x20 + x1))**(const((x54 + x79))))', 'Equation constants: {1: np.float64(-4.614324374429808)}\nTree:  cos(((x32)**(-4.614324374429808) cos sin(x35((x19 / x21)))))']
MSE: [np.float64(0.3016927918178493), np.float64(19.702397302452514), np.float64(0.25260372277478155), np.float64(0.29518562148792005), np.float64(4.545778832583854e+37), np.float64(105.98405870379796), np.float64(73576106345.90828), np.float64(0.4974859724198679), np.float64(0.25051152785739217), np.float64(0.2527703251358463), np.float64(0.2521612222031974), np.float64(3.044751945542768)]
Generators: ['Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.008536247574377131, unit=0.6948219255730432)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.012804371361565698, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.031746030069047866, unit=0.5801150350019868)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.012804371361565698, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.03247756404926109, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.019504760874423013, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.01229219650710307, unit=0.857804846386473)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.03809523608285744, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.019504760874423013, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.9435853310251204)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.03247756404926109, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9925131076781933)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.625339733015739)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.9435853310251204)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.012804371361565698, unit=0.625339733015739)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.03809523608285744, unit=0.5273773045472607)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=548, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.03247756404926109, unit=0.812056179009431)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.6445722611133187)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.03247756404926109, unit=0.812056179009431)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=580, sigma_y=0.03247756404926109, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=838, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.031746030069047866, unit=0.5801150350019868)', 'Generator(mode=real, range=(0.1, 0.9), n_g=277, sigma_y=0.03809523608285744, unit=0.5273773045472607)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.01024349708925256, unit=0.7720243617478257)']
Gen 21: 6 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(0.5403377141666834), 1: np.float64(0.5403377141666834), 2: np.float64(0.5403377141666834)}\nTree:  (((x78)**(0.5403377141666834) * (0.5403377141666834 / x21)) + 0.5403377141666834)', 'Equation constants: {0: np.float64(0.540337654770702), 1: np.float64(0.540337654770702), 2: np.float64(0.540337654770702)}\nTree:  (((x78((x45)**(x9)))**(0.540337654770702) * /(0.540337654770702, x21, (x15)**(x95))) + 0.540337654770702)', 'Equation constants: {1: np.float64(-6.539556371223377)}\nTree:  cos(((x32)**(-6.539556371223377) cos sin(x35)))', 'Equation constants: {0: np.float64(0.5403378124633971), 1: np.float64(0.5403378124633971), 2: np.float64(0.5403378124633971)}\nTree:  (((x78((x21)**(x9)))**(0.5403378124633971) * (0.5403378124633971 / x21)) + 0.5403378124633971)', 'Equation constants: {0: np.float64(0.5005291303310683), 1: np.float64(0.5005291303310683), 2: np.float64(0.5005291303310683)}\nTree:  (((x78)**(0.5005291303310683) * (0.5005291303310683 / x45)) + 0.5005291303310683)', 'Equation constants: {0: np.float64(0.5403377061392978), 1: np.float64(0.5403377061392978), 2: np.float64(0.5403377061392978)}\nTree:  (((x78)**(0.5403377061392978) * (const(sin(x16)) / x21)) + 0.5403377061392978)', 'Equation constants: {1: np.float64(-8.226247160185762)}\nTree:  cos(cos((x32)**(-8.226247160185762)))', 'Equation constants: {0: np.float64(0.5403377225124223), 1: np.float64(0.5403377225124223), 2: np.float64(0.5403377225124223)}\nTree:  (((x78)**(0.5403377225124223) * (0.5403377225124223 / x21)) + 0.5403377225124223)', 'Equation constants: {0: np.float64(0.5403376553931779), 1: np.float64(0.5403376553931779), 2: np.float64(0.5403376553931779)}\nTree:  (((x78)**(0.5403376553931779) * (0.5403376553931779 / x21)) + 0.5403376553931779)', 'Equation constants: {0: np.float64(0.5403377107835947), 1: np.float64(0.5403377107835947), 2: np.float64(0.5403377107835947)}\nTree:  (((x78)**(0.5403377107835947) * (0.5403377107835947 / x21(cos(x9)))) + 0.5403377107835947)', 'Equation constants: {0: np.float64(0.5403376966389769), 1: np.float64(0.5403376966389769), 2: np.float64(0.5403376966389769)}\nTree:  (((x78)**(0.5403376966389769) * (const(sin(x16)) / x21)) + 0.5403376966389769)', 'Equation constants: {3: np.float64(-4.712387380510724)}\nTree:  cos(sin(-4.712387380510724))', 'Equation constants: {0: np.float64(0.540337733641789), 1: np.float64(0.540337733641789), 2: np.float64(0.540337733641789)}\nTree:  (((x78)**(0.540337733641789) * (0.540337733641789 / x21)) + 0.540337733641789)', 'Equation constants: {2: np.float64(-4.594113738951945), 3: np.float64(-4.594113738951945)}\nTree:  cos((cos(-4.594113738951945) * -4.594113738951945))', 'Equation constants: {0: np.float64(0.5403377071639033), 1: np.float64(0.5403377071639033), 2: np.float64(0.5403377071639033)}\nTree:  (((x78((x21)**(x9)))**(0.5403377071639033) * (0.5403377071639033 / x21)) + 0.5403377071639033)', 'Equation constants: {1: np.float64(-4.614284381360904)}\nTree:  cos(cos((x32)**(-4.614284381360904)))', 'Equation constants: {1: np.float64(7.161687747532767), 2: np.float64(7.161687747532767)}\nTree:  cos(((x32)**(7.161687747532767) cos sin(x35((x19 / 7.161687747532767)))))', 'Equation constants: {0: np.float64(0.5403376866534869), 1: np.float64(0.5403376866534869), 2: np.float64(0.5403376866534869)}\nTree:  (((x78)**(0.5403376866534869) * (0.5403376866534869 / x21(cos(x9)))) + 0.5403376866534869)', 'Equation constants: {0: np.float64(-8.959548009848437), 1: np.float64(-8.959548009848437), 2: np.float64(-8.959548009848437)}\nTree:  (cos((x32)**(-8.959548009848437)) cos (cos(cos((x5 * -8.959548009848437))))**(-8.959548009848437))', 'Equation constants: {0: np.float64(0.5403377061355079), 1: np.float64(0.5403377061355079), 2: np.float64(0.5403377061355079)}\nTree:  (((x78)**(0.5403377061355079) * (0.5403377061355079 / x21)) + 0.5403377061355079)', 'Equation constants: {0: np.float64(0.5403376317806463), 1: np.float64(0.5403376317806463), 2: np.float64(0.5403376317806463)}\nTree:  (((x78)**(0.5403376317806463) * (0.5403376317806463 / x21)) + 0.5403376317806463)', 'Equation constants: {0: np.float64(0.5403377017770346), 1: np.float64(0.5403377017770346), 2: np.float64(0.5403377017770346)}\nTree:  (((x78)**(0.5403377017770346) * (const((x96 / x86)) / x21)) + 0.5403377017770346)', 'Equation constants: {1: np.float64(1.9496062357785462), 2: np.float64(1.9496062357785462)}\nTree:  (cos((x32)**(1.9496062357785462)) cos (1.9496062357785462 / x74))', 'Equation constants: {0: np.float64(0.5403376546030288), 1: np.float64(0.5403376546030288), 2: np.float64(0.5403376546030288)}\nTree:  (((x78)**(0.5403376546030288) * (0.5403376546030288 / x21)) + 0.5403376546030288)', 'Equation constants: {0: np.float64(0.540337708175974), 1: np.float64(0.540337708175974), 2: np.float64(0.540337708175974)}\nTree:  (((x78)**(0.540337708175974) * (const((sin(x90) / x86)) / x21)) + 0.540337708175974)', 'Equation constants: {0: np.float64(0.5403379322177034), 1: np.float64(0.5403379322177034), 2: np.float64(0.5403379322177034)}\nTree:  (((x78)**(0.5403379322177034) * (const(sin(x16)) / x21)) + 0.5403379322177034)', 'Equation constants: {0: np.float64(0.5403376854220472), 1: np.float64(0.5403376854220472), 2: np.float64(0.5403376854220472)}\nTree:  (((x78)**(0.5403376854220472) * (0.5403376854220472 / x21)) + 0.5403376854220472)', 'Equation constants: {0: np.float64(0.5501488488512954), 1: np.float64(0.5501488488512954), 2: np.float64(0.5501488488512954)}\nTree:  (((x90)**(0.5501488488512954) * (0.5501488488512954 / x21)) + 0.5501488488512954)', 'Equation constants: {3: np.float64(-2.2273070388701637), 4: np.float64(-2.2273070388701637), 5: np.float64(-2.2273070388701637)}\nTree:  /((x39 / (-2.2273070388701637 + -2.2273070388701637)), x55, (x38)**(-2.2273070388701637))', 'Equation constants: {1: np.float64(-4.684042875818708), 2: np.float64(-4.684042875818708)}\nTree:  cos(((x32)**(-4.684042875818708) cos sin(x35((x19 / -4.684042875818708)))))', 'Equation constants: {0: np.float64(0.5403377171225677), 1: np.float64(0.5403377171225677), 2: np.float64(0.5403377171225677)}\nTree:  (((x78((sin(x11) + x34)))**(0.5403377171225677) * (0.5403377171225677 / x21)) + 0.5403377171225677)', 'Equation constants: {0: np.float64(0.5062783296419003), 1: np.float64(0.5062783296419003), 2: np.float64(0.5062783296419003)}\nTree:  (((x78)**(0.5062783296419003) * (const((x96 / x86)))**(x21)) + 0.5062783296419003)', 'Equation constants: {2: np.float64(0.009300772992299278)}\nTree:  cos(((x20 + x1))**(const((x54 + x79))))', 'Equation constants: {1: np.float64(-4.614324374429808)}\nTree:  cos(((x32)**(-4.614324374429808) cos sin(x35((x19 / x21)))))', 'Equation constants: {1: np.float64(8.140893025168097), 2: np.float64(8.140893025168097)}\nTree:  cos(((x32)**(8.140893025168097) cos sin(x35((x19 / 8.140893025168097)))))', 'Equation constants: {1: np.float64(2.2954393082986986), 2: np.float64(2.2954393082986986)}\nTree:  (cos((x32)**(2.2954393082986986)) cos (2.2954393082986986)**(x86))', 'Equation constants: {1: np.float64(-4.614352049162409)}\nTree:  cos(((x32)**(-4.614352049162409) cos sin(x35((x19 / x21)))))', 'Equation constants: {0: np.float64(0.5403377082445898), 1: np.float64(0.5403377082445898), 2: np.float64(0.5403377082445898)}\nTree:  (((x78)**(0.5403377082445898) * (0.5403377082445898 / x21)) + 0.5403377082445898)', 'Equation constants: {0: np.float64(0.5403377159444804), 1: np.float64(0.5403377159444804), 2: np.float64(0.5403377159444804)}\nTree:  (((x78)**(0.5403377159444804) * (0.5403377159444804 / x21(cos(x9)))) + 0.5403377159444804)', 'Equation constants: {1: np.float64(-8.797808705875275), 2: np.float64(-8.797808705875275)}\nTree:  cos(((x32)**(-8.797808705875275) cos sin(x35((x19 / -8.797808705875275)))))']
MSE: [np.float64(0.3713041063269964), np.float64(73576111612.89601), np.float64(2.207697483920458), np.float64(6.245831308043551e+39), np.float64(0.32299882277912706), np.float64(0.3027932625878034), np.float64(0.25344443232963876), np.float64(0.29518559381088655), np.float64(0.29518555655020895), np.float64(0.2545566150190195)]
Generators: ['Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.01229219650710307, unit=0.857804846386473)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.03809523608285744, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.019504760874423013, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.9435853310251204)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.03247756404926109, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9925131076781933)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.625339733015739)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.9435853310251204)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.012804371361565698, unit=0.625339733015739)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.03809523608285744, unit=0.5273773045472607)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=548, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.03247756404926109, unit=0.812056179009431)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.6445722611133187)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.03247756404926109, unit=0.812056179009431)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=580, sigma_y=0.03247756404926109, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=838, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.031746030069047866, unit=0.5801150350019868)', 'Generator(mode=real, range=(0.1, 0.9), n_g=277, sigma_y=0.03809523608285744, unit=0.5273773045472607)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02165170936617406, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.625339733015739)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.019504760874423013, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.7720243617478257)']
Gen 22: 7 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(0.5403377225124223), 1: np.float64(0.5403377225124223), 2: np.float64(0.5403377225124223)}\nTree:  (((x78)**(0.5403377225124223) * (0.5403377225124223 / x21)) + 0.5403377225124223)', 'Equation constants: {0: np.float64(0.5403376553931779), 1: np.float64(0.5403376553931779), 2: np.float64(0.5403376553931779)}\nTree:  (((x78)**(0.5403376553931779) * (0.5403376553931779 / x21)) + 0.5403376553931779)', 'Equation constants: {0: np.float64(0.5403377107835947), 1: np.float64(0.5403377107835947), 2: np.float64(0.5403377107835947)}\nTree:  (((x78)**(0.5403377107835947) * (0.5403377107835947 / x21(cos(x9)))) + 0.5403377107835947)', 'Equation constants: {0: np.float64(0.5403376966389769), 1: np.float64(0.5403376966389769), 2: np.float64(0.5403376966389769)}\nTree:  (((x78)**(0.5403376966389769) * (const(sin(x16)) / x21)) + 0.5403376966389769)', 'Equation constants: {3: np.float64(-4.712387380510724)}\nTree:  cos(sin(-4.712387380510724))', 'Equation constants: {0: np.float64(0.540337733641789), 1: np.float64(0.540337733641789), 2: np.float64(0.540337733641789)}\nTree:  (((x78)**(0.540337733641789) * (0.540337733641789 / x21)) + 0.540337733641789)', 'Equation constants: {2: np.float64(-4.594113738951945), 3: np.float64(-4.594113738951945)}\nTree:  cos((cos(-4.594113738951945) * -4.594113738951945))', 'Equation constants: {0: np.float64(0.5403377071639033), 1: np.float64(0.5403377071639033), 2: np.float64(0.5403377071639033)}\nTree:  (((x78((x21)**(x9)))**(0.5403377071639033) * (0.5403377071639033 / x21)) + 0.5403377071639033)', 'Equation constants: {1: np.float64(-4.614284381360904)}\nTree:  cos(cos((x32)**(-4.614284381360904)))', 'Equation constants: {1: np.float64(7.161687747532767), 2: np.float64(7.161687747532767)}\nTree:  cos(((x32)**(7.161687747532767) cos sin(x35((x19 / 7.161687747532767)))))', 'Equation constants: {0: np.float64(0.5403376866534869), 1: np.float64(0.5403376866534869), 2: np.float64(0.5403376866534869)}\nTree:  (((x78)**(0.5403376866534869) * (0.5403376866534869 / x21(cos(x9)))) + 0.5403376866534869)', 'Equation constants: {0: np.float64(-8.959548009848437), 1: np.float64(-8.959548009848437), 2: np.float64(-8.959548009848437)}\nTree:  (cos((x32)**(-8.959548009848437)) cos (cos(cos((x5 * -8.959548009848437))))**(-8.959548009848437))', 'Equation constants: {0: np.float64(0.5403377061355079), 1: np.float64(0.5403377061355079), 2: np.float64(0.5403377061355079)}\nTree:  (((x78)**(0.5403377061355079) * (0.5403377061355079 / x21)) + 0.5403377061355079)', 'Equation constants: {0: np.float64(0.5403376317806463), 1: np.float64(0.5403376317806463), 2: np.float64(0.5403376317806463)}\nTree:  (((x78)**(0.5403376317806463) * (0.5403376317806463 / x21)) + 0.5403376317806463)', 'Equation constants: {0: np.float64(0.5403377017770346), 1: np.float64(0.5403377017770346), 2: np.float64(0.5403377017770346)}\nTree:  (((x78)**(0.5403377017770346) * (const((x96 / x86)) / x21)) + 0.5403377017770346)', 'Equation constants: {1: np.float64(1.9496062357785462), 2: np.float64(1.9496062357785462)}\nTree:  (cos((x32)**(1.9496062357785462)) cos (1.9496062357785462 / x74))', 'Equation constants: {0: np.float64(0.5403376546030288), 1: np.float64(0.5403376546030288), 2: np.float64(0.5403376546030288)}\nTree:  (((x78)**(0.5403376546030288) * (0.5403376546030288 / x21)) + 0.5403376546030288)', 'Equation constants: {0: np.float64(0.540337708175974), 1: np.float64(0.540337708175974), 2: np.float64(0.540337708175974)}\nTree:  (((x78)**(0.540337708175974) * (const((sin(x90) / x86)) / x21)) + 0.540337708175974)', 'Equation constants: {0: np.float64(0.5403379322177034), 1: np.float64(0.5403379322177034), 2: np.float64(0.5403379322177034)}\nTree:  (((x78)**(0.5403379322177034) * (const(sin(x16)) / x21)) + 0.5403379322177034)', 'Equation constants: {0: np.float64(0.5403376854220472), 1: np.float64(0.5403376854220472), 2: np.float64(0.5403376854220472)}\nTree:  (((x78)**(0.5403376854220472) * (0.5403376854220472 / x21)) + 0.5403376854220472)', 'Equation constants: {0: np.float64(0.5501488488512954), 1: np.float64(0.5501488488512954), 2: np.float64(0.5501488488512954)}\nTree:  (((x90)**(0.5501488488512954) * (0.5501488488512954 / x21)) + 0.5501488488512954)', 'Equation constants: {3: np.float64(-2.2273070388701637), 4: np.float64(-2.2273070388701637), 5: np.float64(-2.2273070388701637)}\nTree:  /((x39 / (-2.2273070388701637 + -2.2273070388701637)), x55, (x38)**(-2.2273070388701637))', 'Equation constants: {1: np.float64(-4.684042875818708), 2: np.float64(-4.684042875818708)}\nTree:  cos(((x32)**(-4.684042875818708) cos sin(x35((x19 / -4.684042875818708)))))', 'Equation constants: {0: np.float64(0.5403377171225677), 1: np.float64(0.5403377171225677), 2: np.float64(0.5403377171225677)}\nTree:  (((x78((sin(x11) + x34)))**(0.5403377171225677) * (0.5403377171225677 / x21)) + 0.5403377171225677)', 'Equation constants: {0: np.float64(0.5062783296419003), 1: np.float64(0.5062783296419003), 2: np.float64(0.5062783296419003)}\nTree:  (((x78)**(0.5062783296419003) * (const((x96 / x86)))**(x21)) + 0.5062783296419003)', 'Equation constants: {2: np.float64(0.009300772992299278)}\nTree:  cos(((x20 + x1))**(const((x54 + x79))))', 'Equation constants: {1: np.float64(-4.614324374429808)}\nTree:  cos(((x32)**(-4.614324374429808) cos sin(x35((x19 / x21)))))', 'Equation constants: {1: np.float64(8.140893025168097), 2: np.float64(8.140893025168097)}\nTree:  cos(((x32)**(8.140893025168097) cos sin(x35((x19 / 8.140893025168097)))))', 'Equation constants: {1: np.float64(2.2954393082986986), 2: np.float64(2.2954393082986986)}\nTree:  (cos((x32)**(2.2954393082986986)) cos (2.2954393082986986)**(x86))', 'Equation constants: {1: np.float64(-4.614352049162409)}\nTree:  cos(((x32)**(-4.614352049162409) cos sin(x35((x19 / x21)))))', 'Equation constants: {0: np.float64(0.5403377082445898), 1: np.float64(0.5403377082445898), 2: np.float64(0.5403377082445898)}\nTree:  (((x78)**(0.5403377082445898) * (0.5403377082445898 / x21)) + 0.5403377082445898)', 'Equation constants: {0: np.float64(0.5403377159444804), 1: np.float64(0.5403377159444804), 2: np.float64(0.5403377159444804)}\nTree:  (((x78)**(0.5403377159444804) * (0.5403377159444804 / x21(cos(x9)))) + 0.5403377159444804)', 'Equation constants: {1: np.float64(-8.797808705875275), 2: np.float64(-8.797808705875275)}\nTree:  cos(((x32)**(-8.797808705875275) cos sin(x35((x19 / -8.797808705875275)))))', 'Equation constants: {0: np.float64(0.540337673554071), 1: np.float64(0.540337673554071), 2: np.float64(0.540337673554071)}\nTree:  ((pow(x78, 0.540337673554071, (x75 / x33)) * (0.540337673554071 / x21)) + 0.540337673554071)', 'Equation constants: {0: np.float64(0.5403376742196646), 1: np.float64(0.5403376742196646), 2: np.float64(0.5403376742196646)}\nTree:  (((x78)**(0.5403376742196646) * (const((x25 / x86)) / x21)) + 0.5403376742196646)', 'Equation constants: {0: np.float64(0.5403378742364792), 1: np.float64(0.5403378742364792), 2: np.float64(0.5403378742364792)}\nTree:  (((x78)**(0.5403378742364792) * (0.5403378742364792 / x21)) + 0.5403378742364792)', 'Equation constants: {1: np.float64(-10.505425371294276)}\nTree:  cos(cos((x32)**(-10.505425371294276)))', 'Equation constants: {0: np.float64(0.5403376110665167), 1: np.float64(0.5403376110665167), 2: np.float64(0.5403376110665167)}\nTree:  (((x78)**(0.5403376110665167) * (0.5403376110665167 / x21)) + 0.5403376110665167)', 'Equation constants: {0: np.float64(0.5403376180978453), 1: np.float64(0.5403376180978453), 2: np.float64(0.5403376180978453)}\nTree:  (((x78((x21)**(x9)))**(0.5403376180978453) * (0.5403376180978453 / x21)) + 0.5403376180978453)', 'Equation constants: {1: np.float64(0.0018175490910036943)}\nTree:  sin(cos((x32)**(0.0018175490910036943)))']
MSE: [np.float64(0.2951856030743144), np.float64(0.2951855895645313), np.float64(0.29518559875059996), np.float64(4.408817329781664), np.float64(0.25335596339254024), np.float64(0.29518561538457616), np.float64(0.2951856041737958), np.float64(0.9988902732244945), np.float64(0.30291762142518425), np.float64(0.3656862027240827)]
Generators: ['Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.9435853310251204)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.012804371361565698, unit=0.625339733015739)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.03809523608285744, unit=0.5273773045472607)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=548, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.03247756404926109, unit=0.812056179009431)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.031746030069047866, unit=0.6445722611133187)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.03247756404926109, unit=0.812056179009431)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=580, sigma_y=0.03247756404926109, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=838, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.031746030069047866, unit=0.5801150350019868)', 'Generator(mode=real, range=(0.1, 0.9), n_g=277, sigma_y=0.03809523608285744, unit=0.5273773045472607)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02165170936617406, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.625339733015739)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.019504760874423013, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-2, 2), n_g=870, sigma_y=0.01229219650710307, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.025396824055238295, unit=0.6445722611133187)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.012292196507103071, unit=0.9435853310251204)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9925131076781933)']
Gen 23: 7 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(0.5403377071639033), 1: np.float64(0.5403377071639033), 2: np.float64(0.5403377071639033)}\nTree:  (((x78((x21)**(x9)))**(0.5403377071639033) * (0.5403377071639033 / x21)) + 0.5403377071639033)', 'Equation constants: {1: np.float64(-4.614284381360904)}\nTree:  cos(cos((x32)**(-4.614284381360904)))', 'Equation constants: {1: np.float64(7.161687747532767), 2: np.float64(7.161687747532767)}\nTree:  cos(((x32)**(7.161687747532767) cos sin(x35((x19 / 7.161687747532767)))))', 'Equation constants: {0: np.float64(0.5403376866534869), 1: np.float64(0.5403376866534869), 2: np.float64(0.5403376866534869)}\nTree:  (((x78)**(0.5403376866534869) * (0.5403376866534869 / x21(cos(x9)))) + 0.5403376866534869)', 'Equation constants: {0: np.float64(-8.959548009848437), 1: np.float64(-8.959548009848437), 2: np.float64(-8.959548009848437)}\nTree:  (cos((x32)**(-8.959548009848437)) cos (cos(cos((x5 * -8.959548009848437))))**(-8.959548009848437))', 'Equation constants: {0: np.float64(0.5403377061355079), 1: np.float64(0.5403377061355079), 2: np.float64(0.5403377061355079)}\nTree:  (((x78)**(0.5403377061355079) * (0.5403377061355079 / x21)) + 0.5403377061355079)', 'Equation constants: {0: np.float64(0.5403376317806463), 1: np.float64(0.5403376317806463), 2: np.float64(0.5403376317806463)}\nTree:  (((x78)**(0.5403376317806463) * (0.5403376317806463 / x21)) + 0.5403376317806463)', 'Equation constants: {0: np.float64(0.5403377017770346), 1: np.float64(0.5403377017770346), 2: np.float64(0.5403377017770346)}\nTree:  (((x78)**(0.5403377017770346) * (const((x96 / x86)) / x21)) + 0.5403377017770346)', 'Equation constants: {1: np.float64(1.9496062357785462), 2: np.float64(1.9496062357785462)}\nTree:  (cos((x32)**(1.9496062357785462)) cos (1.9496062357785462 / x74))', 'Equation constants: {0: np.float64(0.5403376546030288), 1: np.float64(0.5403376546030288), 2: np.float64(0.5403376546030288)}\nTree:  (((x78)**(0.5403376546030288) * (0.5403376546030288 / x21)) + 0.5403376546030288)', 'Equation constants: {0: np.float64(0.540337708175974), 1: np.float64(0.540337708175974), 2: np.float64(0.540337708175974)}\nTree:  (((x78)**(0.540337708175974) * (const((sin(x90) / x86)) / x21)) + 0.540337708175974)', 'Equation constants: {0: np.float64(0.5403379322177034), 1: np.float64(0.5403379322177034), 2: np.float64(0.5403379322177034)}\nTree:  (((x78)**(0.5403379322177034) * (const(sin(x16)) / x21)) + 0.5403379322177034)', 'Equation constants: {0: np.float64(0.5403376854220472), 1: np.float64(0.5403376854220472), 2: np.float64(0.5403376854220472)}\nTree:  (((x78)**(0.5403376854220472) * (0.5403376854220472 / x21)) + 0.5403376854220472)', 'Equation constants: {0: np.float64(0.5501488488512954), 1: np.float64(0.5501488488512954), 2: np.float64(0.5501488488512954)}\nTree:  (((x90)**(0.5501488488512954) * (0.5501488488512954 / x21)) + 0.5501488488512954)', 'Equation constants: {3: np.float64(-2.2273070388701637), 4: np.float64(-2.2273070388701637), 5: np.float64(-2.2273070388701637)}\nTree:  /((x39 / (-2.2273070388701637 + -2.2273070388701637)), x55, (x38)**(-2.2273070388701637))', 'Equation constants: {1: np.float64(-4.684042875818708), 2: np.float64(-4.684042875818708)}\nTree:  cos(((x32)**(-4.684042875818708) cos sin(x35((x19 / -4.684042875818708)))))', 'Equation constants: {0: np.float64(0.5403377171225677), 1: np.float64(0.5403377171225677), 2: np.float64(0.5403377171225677)}\nTree:  (((x78((sin(x11) + x34)))**(0.5403377171225677) * (0.5403377171225677 / x21)) + 0.5403377171225677)', 'Equation constants: {0: np.float64(0.5062783296419003), 1: np.float64(0.5062783296419003), 2: np.float64(0.5062783296419003)}\nTree:  (((x78)**(0.5062783296419003) * (const((x96 / x86)))**(x21)) + 0.5062783296419003)', 'Equation constants: {2: np.float64(0.009300772992299278)}\nTree:  cos(((x20 + x1))**(const((x54 + x79))))', 'Equation constants: {1: np.float64(-4.614324374429808)}\nTree:  cos(((x32)**(-4.614324374429808) cos sin(x35((x19 / x21)))))', 'Equation constants: {1: np.float64(8.140893025168097), 2: np.float64(8.140893025168097)}\nTree:  cos(((x32)**(8.140893025168097) cos sin(x35((x19 / 8.140893025168097)))))', 'Equation constants: {1: np.float64(2.2954393082986986), 2: np.float64(2.2954393082986986)}\nTree:  (cos((x32)**(2.2954393082986986)) cos (2.2954393082986986)**(x86))', 'Equation constants: {1: np.float64(-4.614352049162409)}\nTree:  cos(((x32)**(-4.614352049162409) cos sin(x35((x19 / x21)))))', 'Equation constants: {0: np.float64(0.5403377082445898), 1: np.float64(0.5403377082445898), 2: np.float64(0.5403377082445898)}\nTree:  (((x78)**(0.5403377082445898) * (0.5403377082445898 / x21)) + 0.5403377082445898)', 'Equation constants: {0: np.float64(0.5403377159444804), 1: np.float64(0.5403377159444804), 2: np.float64(0.5403377159444804)}\nTree:  (((x78)**(0.5403377159444804) * (0.5403377159444804 / x21(cos(x9)))) + 0.5403377159444804)', 'Equation constants: {1: np.float64(-8.797808705875275), 2: np.float64(-8.797808705875275)}\nTree:  cos(((x32)**(-8.797808705875275) cos sin(x35((x19 / -8.797808705875275)))))', 'Equation constants: {0: np.float64(0.540337673554071), 1: np.float64(0.540337673554071), 2: np.float64(0.540337673554071)}\nTree:  ((pow(x78, 0.540337673554071, (x75 / x33)) * (0.540337673554071 / x21)) + 0.540337673554071)', 'Equation constants: {0: np.float64(0.5403376742196646), 1: np.float64(0.5403376742196646), 2: np.float64(0.5403376742196646)}\nTree:  (((x78)**(0.5403376742196646) * (const((x25 / x86)) / x21)) + 0.5403376742196646)', 'Equation constants: {0: np.float64(0.5403378742364792), 1: np.float64(0.5403378742364792), 2: np.float64(0.5403378742364792)}\nTree:  (((x78)**(0.5403378742364792) * (0.5403378742364792 / x21)) + 0.5403378742364792)', 'Equation constants: {1: np.float64(-10.505425371294276)}\nTree:  cos(cos((x32)**(-10.505425371294276)))', 'Equation constants: {0: np.float64(0.5403376110665167), 1: np.float64(0.5403376110665167), 2: np.float64(0.5403376110665167)}\nTree:  (((x78)**(0.5403376110665167) * (0.5403376110665167 / x21)) + 0.5403376110665167)', 'Equation constants: {0: np.float64(0.5403376180978453), 1: np.float64(0.5403376180978453), 2: np.float64(0.5403376180978453)}\nTree:  (((x78((x21)**(x9)))**(0.5403376180978453) * (0.5403376180978453 / x21)) + 0.5403376180978453)', 'Equation constants: {1: np.float64(0.0018175490910036943)}\nTree:  sin(cos((x32)**(0.0018175490910036943)))', 'Equation constants: {2: np.float64(-4.455864355193361), 3: np.float64(-4.455864355193361)}\nTree:  cos((cos(-4.455864355193361) + -4.455864355193361))', 'Equation constants: {1: np.float64(1.3935320423707829), 2: np.float64(1.3935320423707829)}\nTree:  (cos((x32)**(1.3935320423707829)) cos (1.3935320423707829)**(x18))', 'Equation constants: {1: np.float64(-3.9586706913578578), 2: np.float64(-3.9586706913578578), 3: np.float64(-3.9586706913578578)}\nTree:  cos(((x32(sin(-3.9586706913578578)))**(-3.9586706913578578) cos sin(x35((x19 / -3.9586706913578578)))))', 'Equation constants: {0: np.float64(0.5403376927763255), 1: np.float64(0.5403376927763255), 2: np.float64(0.5403376927763255)}\nTree:  (((x78)**(0.5403376927763255) * (const((sin(x90) / x86)) / x21)) + 0.5403376927763255)', 'Equation constants: {0: np.float64(0.5501488555031915), 1: np.float64(0.5501488555031915), 2: np.float64(0.5501488555031915)}\nTree:  (((x90)**(0.5501488555031915) * (0.5501488555031915 / x21)) + 0.5501488555031915)', 'Equation constants: {1: np.float64(-13.952958858311401)}\nTree:  cos(((x32)**(-13.952958858311401) cos sin(x35(/(x19, x21, cos(x40))))))', 'Equation constants: {0: np.float64(-0.11244473932523802), 2: np.float64(-0.11244473932523802), 3: np.float64(-0.11244473932523802)}\nTree:  (((x90)**(-0.11244473932523802) * ((-0.11244473932523802 * x60) / x21)) + -0.11244473932523802)']
MSE: [np.float64(0.5727115758205933), np.float64(0.3154378630306247), np.float64(0.2525997884906643), np.float64(0.2951856169457924), np.float64(0.30169278827997426), np.float64(0.8606111251913464), np.float64(0.2529082775694787), np.float64(0.3204080736480078), np.float64(0.7241336813964709), np.float64(2.6622728995590066)]
Generators: ['Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.03247756404926109, unit=0.812056179009431)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=580, sigma_y=0.03247756404926109, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=838, sigma_y=0.01024349708925256, unit=0.857804846386473)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.031746030069047866, unit=0.5801150350019868)', 'Generator(mode=real, range=(0.1, 0.9), n_g=277, sigma_y=0.03809523608285744, unit=0.5273773045472607)', 'Generator(mode=real, range=(-1.6, 1.6), n_g=806, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02165170936617406, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.625339733015739)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.019504760874423013, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-2, 2), n_g=870, sigma_y=0.01229219650710307, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.025396824055238295, unit=0.6445722611133187)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.012292196507103071, unit=0.9435853310251204)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=277, sigma_y=0.03809523608285744, unit=0.5801150350019868)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=516, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-5.170419763586739, 4.829580236413261), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.812056179009431)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.012292196507103071, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.033148712183507914, 0.833148712183508), n_g=341, sigma_y=0.019504760874423013, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.01024349708925256, unit=0.9435853310251204)', 'Generator(mode=real, range=(-1.28, 1.28), n_g=806, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)']
Gen 24: 7 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(0.5403377017770346), 1: np.float64(0.5403377017770346), 2: np.float64(0.5403377017770346)}\nTree:  (((x78)**(0.5403377017770346) * (const((x96 / x86)) / x21)) + 0.5403377017770346)', 'Equation constants: {1: np.float64(1.9496062357785462), 2: np.float64(1.9496062357785462)}\nTree:  (cos((x32)**(1.9496062357785462)) cos (1.9496062357785462 / x74))', 'Equation constants: {0: np.float64(0.5403376546030288), 1: np.float64(0.5403376546030288), 2: np.float64(0.5403376546030288)}\nTree:  (((x78)**(0.5403376546030288) * (0.5403376546030288 / x21)) + 0.5403376546030288)', 'Equation constants: {0: np.float64(0.540337708175974), 1: np.float64(0.540337708175974), 2: np.float64(0.540337708175974)}\nTree:  (((x78)**(0.540337708175974) * (const((sin(x90) / x86)) / x21)) + 0.540337708175974)', 'Equation constants: {0: np.float64(0.5403379322177034), 1: np.float64(0.5403379322177034), 2: np.float64(0.5403379322177034)}\nTree:  (((x78)**(0.5403379322177034) * (const(sin(x16)) / x21)) + 0.5403379322177034)', 'Equation constants: {0: np.float64(0.5403376854220472), 1: np.float64(0.5403376854220472), 2: np.float64(0.5403376854220472)}\nTree:  (((x78)**(0.5403376854220472) * (0.5403376854220472 / x21)) + 0.5403376854220472)', 'Equation constants: {0: np.float64(0.5501488488512954), 1: np.float64(0.5501488488512954), 2: np.float64(0.5501488488512954)}\nTree:  (((x90)**(0.5501488488512954) * (0.5501488488512954 / x21)) + 0.5501488488512954)', 'Equation constants: {3: np.float64(-2.2273070388701637), 4: np.float64(-2.2273070388701637), 5: np.float64(-2.2273070388701637)}\nTree:  /((x39 / (-2.2273070388701637 + -2.2273070388701637)), x55, (x38)**(-2.2273070388701637))', 'Equation constants: {1: np.float64(-4.684042875818708), 2: np.float64(-4.684042875818708)}\nTree:  cos(((x32)**(-4.684042875818708) cos sin(x35((x19 / -4.684042875818708)))))', 'Equation constants: {0: np.float64(0.5403377171225677), 1: np.float64(0.5403377171225677), 2: np.float64(0.5403377171225677)}\nTree:  (((x78((sin(x11) + x34)))**(0.5403377171225677) * (0.5403377171225677 / x21)) + 0.5403377171225677)', 'Equation constants: {0: np.float64(0.5062783296419003), 1: np.float64(0.5062783296419003), 2: np.float64(0.5062783296419003)}\nTree:  (((x78)**(0.5062783296419003) * (const((x96 / x86)))**(x21)) + 0.5062783296419003)', 'Equation constants: {2: np.float64(0.009300772992299278)}\nTree:  cos(((x20 + x1))**(const((x54 + x79))))', 'Equation constants: {1: np.float64(-4.614324374429808)}\nTree:  cos(((x32)**(-4.614324374429808) cos sin(x35((x19 / x21)))))', 'Equation constants: {1: np.float64(8.140893025168097), 2: np.float64(8.140893025168097)}\nTree:  cos(((x32)**(8.140893025168097) cos sin(x35((x19 / 8.140893025168097)))))', 'Equation constants: {1: np.float64(2.2954393082986986), 2: np.float64(2.2954393082986986)}\nTree:  (cos((x32)**(2.2954393082986986)) cos (2.2954393082986986)**(x86))', 'Equation constants: {1: np.float64(-4.614352049162409)}\nTree:  cos(((x32)**(-4.614352049162409) cos sin(x35((x19 / x21)))))', 'Equation constants: {0: np.float64(0.5403377082445898), 1: np.float64(0.5403377082445898), 2: np.float64(0.5403377082445898)}\nTree:  (((x78)**(0.5403377082445898) * (0.5403377082445898 / x21)) + 0.5403377082445898)', 'Equation constants: {0: np.float64(0.5403377159444804), 1: np.float64(0.5403377159444804), 2: np.float64(0.5403377159444804)}\nTree:  (((x78)**(0.5403377159444804) * (0.5403377159444804 / x21(cos(x9)))) + 0.5403377159444804)', 'Equation constants: {1: np.float64(-8.797808705875275), 2: np.float64(-8.797808705875275)}\nTree:  cos(((x32)**(-8.797808705875275) cos sin(x35((x19 / -8.797808705875275)))))', 'Equation constants: {0: np.float64(0.540337673554071), 1: np.float64(0.540337673554071), 2: np.float64(0.540337673554071)}\nTree:  ((pow(x78, 0.540337673554071, (x75 / x33)) * (0.540337673554071 / x21)) + 0.540337673554071)', 'Equation constants: {0: np.float64(0.5403376742196646), 1: np.float64(0.5403376742196646), 2: np.float64(0.5403376742196646)}\nTree:  (((x78)**(0.5403376742196646) * (const((x25 / x86)) / x21)) + 0.5403376742196646)', 'Equation constants: {0: np.float64(0.5403378742364792), 1: np.float64(0.5403378742364792), 2: np.float64(0.5403378742364792)}\nTree:  (((x78)**(0.5403378742364792) * (0.5403378742364792 / x21)) + 0.5403378742364792)', 'Equation constants: {1: np.float64(-10.505425371294276)}\nTree:  cos(cos((x32)**(-10.505425371294276)))', 'Equation constants: {0: np.float64(0.5403376110665167), 1: np.float64(0.5403376110665167), 2: np.float64(0.5403376110665167)}\nTree:  (((x78)**(0.5403376110665167) * (0.5403376110665167 / x21)) + 0.5403376110665167)', 'Equation constants: {0: np.float64(0.5403376180978453), 1: np.float64(0.5403376180978453), 2: np.float64(0.5403376180978453)}\nTree:  (((x78((x21)**(x9)))**(0.5403376180978453) * (0.5403376180978453 / x21)) + 0.5403376180978453)', 'Equation constants: {1: np.float64(0.0018175490910036943)}\nTree:  sin(cos((x32)**(0.0018175490910036943)))', 'Equation constants: {2: np.float64(-4.455864355193361), 3: np.float64(-4.455864355193361)}\nTree:  cos((cos(-4.455864355193361) + -4.455864355193361))', 'Equation constants: {1: np.float64(1.3935320423707829), 2: np.float64(1.3935320423707829)}\nTree:  (cos((x32)**(1.3935320423707829)) cos (1.3935320423707829)**(x18))', 'Equation constants: {1: np.float64(-3.9586706913578578), 2: np.float64(-3.9586706913578578), 3: np.float64(-3.9586706913578578)}\nTree:  cos(((x32(sin(-3.9586706913578578)))**(-3.9586706913578578) cos sin(x35((x19 / -3.9586706913578578)))))', 'Equation constants: {0: np.float64(0.5403376927763255), 1: np.float64(0.5403376927763255), 2: np.float64(0.5403376927763255)}\nTree:  (((x78)**(0.5403376927763255) * (const((sin(x90) / x86)) / x21)) + 0.5403376927763255)', 'Equation constants: {0: np.float64(0.5501488555031915), 1: np.float64(0.5501488555031915), 2: np.float64(0.5501488555031915)}\nTree:  (((x90)**(0.5501488555031915) * (0.5501488555031915 / x21)) + 0.5501488555031915)', 'Equation constants: {1: np.float64(-13.952958858311401)}\nTree:  cos(((x32)**(-13.952958858311401) cos sin(x35(/(x19, x21, cos(x40))))))', 'Equation constants: {0: np.float64(-0.11244473932523802), 2: np.float64(-0.11244473932523802), 3: np.float64(-0.11244473932523802)}\nTree:  (((x90)**(-0.11244473932523802) * ((-0.11244473932523802 * x60) / x21)) + -0.11244473932523802)', 'Equation constants: {0: np.float64(0.5004766188974736), 1: np.float64(0.5004766188974736), 2: np.float64(0.5004766188974736)}\nTree:  (((x78)**(0.5004766188974736) * (0.5004766188974736 / x13)) + 0.5004766188974736)', 'Equation constants: {1: np.float64(-1.1026229734368727), 2: np.float64(-1.1026229734368727)}\nTree:  (cos((x32)**(-1.1026229734368727)) cos (-1.1026229734368727 / x74))', 'Equation constants: {0: np.float64(0.5403376929138247), 1: np.float64(0.5403376929138247), 2: np.float64(0.5403376929138247)}\nTree:  (((x78((x21)**(x9)))**(0.5403376929138247) * (0.5403376929138247 / x21)) + 0.5403376929138247)', 'Equation constants: {0: np.float64(0.5403377247345035), 1: np.float64(0.5403377247345035), 2: np.float64(0.5403377247345035)}\nTree:  (((x78((x5)**(x9)))**(0.5403377247345035) * (0.5403377247345035 / x21)) + 0.5403377247345035)', 'Equation constants: {0: np.float64(0.540337710341648), 1: np.float64(0.540337710341648), 2: np.float64(0.540337710341648)}\nTree:  (((x78)**(0.540337710341648) * (const(sin(x16)) / x21)) + 0.540337710341648)', 'Equation constants: {1: np.float64(7.628653608645056), 2: np.float64(7.628653608645056), 3: np.float64(7.628653608645056)}\nTree:  cos(cos((x32)**(7.628653608645056), sin(x35((x19 / 7.628653608645056))), cos(7.628653608645056)))', 'Equation constants: {0: np.float64(0.5403377026418426), 1: np.float64(0.5403377026418426), 2: np.float64(0.5403377026418426)}\nTree:  (((x78)**(0.5403377026418426) * (0.5403377026418426 / x21)) + 0.5403377026418426)']
MSE: [np.float64(0.27680921370945355), np.float64(0.2530618866928318), np.float64(33320476863.393604), np.float64(0.2951856006410696), np.float64(0.2951855691220268), np.float64(0.2951856209047477), np.float64(0.42710436043820493), np.float64(1.318011789957819e+34), np.float64(0.2951856132805358), np.float64(5.26177303360918e+30)]
Generators: ['Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02165170936617406, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-2, 2), n_g=838, sigma_y=0.010670309467971414, unit=0.625339733015739)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.019504760874423013, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-2, 2), n_g=870, sigma_y=0.01229219650710307, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.025396824055238295, unit=0.6445722611133187)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.012292196507103071, unit=0.9435853310251204)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=277, sigma_y=0.03809523608285744, unit=0.5801150350019868)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=516, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-5.170419763586739, 4.829580236413261), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.812056179009431)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.012292196507103071, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.033148712183507914, 0.833148712183508), n_g=341, sigma_y=0.019504760874423013, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.01024349708925256, unit=0.9435853310251204)', 'Generator(mode=real, range=(-1.28, 1.28), n_g=806, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.756611424626608, 5.243388575373392), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=516, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=580, sigma_y=0.027064636707717575, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=548, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)']
Gen 25: 8 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {1: np.float64(-4.684042875818708), 2: np.float64(-4.684042875818708)}\nTree:  cos(((x32)**(-4.684042875818708) cos sin(x35((x19 / -4.684042875818708)))))', 'Equation constants: {0: np.float64(0.5403377171225677), 1: np.float64(0.5403377171225677), 2: np.float64(0.5403377171225677)}\nTree:  (((x78((sin(x11) + x34)))**(0.5403377171225677) * (0.5403377171225677 / x21)) + 0.5403377171225677)', 'Equation constants: {0: np.float64(0.5062783296419003), 1: np.float64(0.5062783296419003), 2: np.float64(0.5062783296419003)}\nTree:  (((x78)**(0.5062783296419003) * (const((x96 / x86)))**(x21)) + 0.5062783296419003)', 'Equation constants: {2: np.float64(0.009300772992299278)}\nTree:  cos(((x20 + x1))**(const((x54 + x79))))', 'Equation constants: {1: np.float64(-4.614324374429808)}\nTree:  cos(((x32)**(-4.614324374429808) cos sin(x35((x19 / x21)))))', 'Equation constants: {1: np.float64(8.140893025168097), 2: np.float64(8.140893025168097)}\nTree:  cos(((x32)**(8.140893025168097) cos sin(x35((x19 / 8.140893025168097)))))', 'Equation constants: {1: np.float64(2.2954393082986986), 2: np.float64(2.2954393082986986)}\nTree:  (cos((x32)**(2.2954393082986986)) cos (2.2954393082986986)**(x86))', 'Equation constants: {1: np.float64(-4.614352049162409)}\nTree:  cos(((x32)**(-4.614352049162409) cos sin(x35((x19 / x21)))))', 'Equation constants: {0: np.float64(0.5403377082445898), 1: np.float64(0.5403377082445898), 2: np.float64(0.5403377082445898)}\nTree:  (((x78)**(0.5403377082445898) * (0.5403377082445898 / x21)) + 0.5403377082445898)', 'Equation constants: {0: np.float64(0.5403377159444804), 1: np.float64(0.5403377159444804), 2: np.float64(0.5403377159444804)}\nTree:  (((x78)**(0.5403377159444804) * (0.5403377159444804 / x21(cos(x9)))) + 0.5403377159444804)', 'Equation constants: {1: np.float64(-8.797808705875275), 2: np.float64(-8.797808705875275)}\nTree:  cos(((x32)**(-8.797808705875275) cos sin(x35((x19 / -8.797808705875275)))))', 'Equation constants: {0: np.float64(0.540337673554071), 1: np.float64(0.540337673554071), 2: np.float64(0.540337673554071)}\nTree:  ((pow(x78, 0.540337673554071, (x75 / x33)) * (0.540337673554071 / x21)) + 0.540337673554071)', 'Equation constants: {0: np.float64(0.5403376742196646), 1: np.float64(0.5403376742196646), 2: np.float64(0.5403376742196646)}\nTree:  (((x78)**(0.5403376742196646) * (const((x25 / x86)) / x21)) + 0.5403376742196646)', 'Equation constants: {0: np.float64(0.5403378742364792), 1: np.float64(0.5403378742364792), 2: np.float64(0.5403378742364792)}\nTree:  (((x78)**(0.5403378742364792) * (0.5403378742364792 / x21)) + 0.5403378742364792)', 'Equation constants: {1: np.float64(-10.505425371294276)}\nTree:  cos(cos((x32)**(-10.505425371294276)))', 'Equation constants: {0: np.float64(0.5403376110665167), 1: np.float64(0.5403376110665167), 2: np.float64(0.5403376110665167)}\nTree:  (((x78)**(0.5403376110665167) * (0.5403376110665167 / x21)) + 0.5403376110665167)', 'Equation constants: {0: np.float64(0.5403376180978453), 1: np.float64(0.5403376180978453), 2: np.float64(0.5403376180978453)}\nTree:  (((x78((x21)**(x9)))**(0.5403376180978453) * (0.5403376180978453 / x21)) + 0.5403376180978453)', 'Equation constants: {1: np.float64(0.0018175490910036943)}\nTree:  sin(cos((x32)**(0.0018175490910036943)))', 'Equation constants: {2: np.float64(-4.455864355193361), 3: np.float64(-4.455864355193361)}\nTree:  cos((cos(-4.455864355193361) + -4.455864355193361))', 'Equation constants: {1: np.float64(1.3935320423707829), 2: np.float64(1.3935320423707829)}\nTree:  (cos((x32)**(1.3935320423707829)) cos (1.3935320423707829)**(x18))', 'Equation constants: {1: np.float64(-3.9586706913578578), 2: np.float64(-3.9586706913578578), 3: np.float64(-3.9586706913578578)}\nTree:  cos(((x32(sin(-3.9586706913578578)))**(-3.9586706913578578) cos sin(x35((x19 / -3.9586706913578578)))))', 'Equation constants: {0: np.float64(0.5403376927763255), 1: np.float64(0.5403376927763255), 2: np.float64(0.5403376927763255)}\nTree:  (((x78)**(0.5403376927763255) * (const((sin(x90) / x86)) / x21)) + 0.5403376927763255)', 'Equation constants: {0: np.float64(0.5501488555031915), 1: np.float64(0.5501488555031915), 2: np.float64(0.5501488555031915)}\nTree:  (((x90)**(0.5501488555031915) * (0.5501488555031915 / x21)) + 0.5501488555031915)', 'Equation constants: {1: np.float64(-13.952958858311401)}\nTree:  cos(((x32)**(-13.952958858311401) cos sin(x35(/(x19, x21, cos(x40))))))', 'Equation constants: {0: np.float64(-0.11244473932523802), 2: np.float64(-0.11244473932523802), 3: np.float64(-0.11244473932523802)}\nTree:  (((x90)**(-0.11244473932523802) * ((-0.11244473932523802 * x60) / x21)) + -0.11244473932523802)', 'Equation constants: {0: np.float64(0.5004766188974736), 1: np.float64(0.5004766188974736), 2: np.float64(0.5004766188974736)}\nTree:  (((x78)**(0.5004766188974736) * (0.5004766188974736 / x13)) + 0.5004766188974736)', 'Equation constants: {1: np.float64(-1.1026229734368727), 2: np.float64(-1.1026229734368727)}\nTree:  (cos((x32)**(-1.1026229734368727)) cos (-1.1026229734368727 / x74))', 'Equation constants: {0: np.float64(0.5403376929138247), 1: np.float64(0.5403376929138247), 2: np.float64(0.5403376929138247)}\nTree:  (((x78((x21)**(x9)))**(0.5403376929138247) * (0.5403376929138247 / x21)) + 0.5403376929138247)', 'Equation constants: {0: np.float64(0.5403377247345035), 1: np.float64(0.5403377247345035), 2: np.float64(0.5403377247345035)}\nTree:  (((x78((x5)**(x9)))**(0.5403377247345035) * (0.5403377247345035 / x21)) + 0.5403377247345035)', 'Equation constants: {0: np.float64(0.540337710341648), 1: np.float64(0.540337710341648), 2: np.float64(0.540337710341648)}\nTree:  (((x78)**(0.540337710341648) * (const(sin(x16)) / x21)) + 0.540337710341648)', 'Equation constants: {1: np.float64(7.628653608645056), 2: np.float64(7.628653608645056), 3: np.float64(7.628653608645056)}\nTree:  cos(cos((x32)**(7.628653608645056), sin(x35((x19 / 7.628653608645056))), cos(7.628653608645056)))', 'Equation constants: {0: np.float64(0.5403377026418426), 1: np.float64(0.5403377026418426), 2: np.float64(0.5403377026418426)}\nTree:  (((x78)**(0.5403377026418426) * (0.5403377026418426 / x21)) + 0.5403377026418426)', 'Equation constants: {1: np.float64(7.440761480463063), 2: np.float64(7.440761480463063)}\nTree:  cos(((x32)**(7.440761480463063) cos (x35(/(x19, x21, cos(x40))) sin (x95 + 7.440761480463063))))', 'Equation constants: {0: np.float64(0.49999858261192104), 1: np.float64(0.49999858261192104), 2: np.float64(0.49999858261192104)}\nTree:  (((x78)**(0.49999858261192104) * (0.49999858261192104)**(x21)) + 0.49999858261192104)', 'Equation constants: {3: np.float64(0.4999999999999989)}\nTree:  0.4999999999999989', 'Equation constants: {1: np.float64(-4.613959156192887)}\nTree:  (cos((x32)**(-4.613959156192887)) cos (x62)**(x86))', 'Equation constants: {0: np.float64(0.5400277434149038), 1: np.float64(0.5400277434149038), 2: np.float64(0.5400277434149038)}\nTree:  (((x78((x21)**(x9)))**(0.5400277434149038) * (0.5400277434149038 / x27)) + 0.5400277434149038)', 'Equation constants: {1: np.float64(-10.512177731382057)}\nTree:  cos(((x32)**(-10.512177731382057) cos sin(x35(/(x19, x21, cos(x40))))))', 'Equation constants: {0: np.float64(0.5402585499950692), 1: np.float64(0.5402585499950692), 2: np.float64(0.5402585499950692)}\nTree:  (((x19)**(0.5402585499950692) * (0.5402585499950692 / x21)) + 0.5402585499950692)', 'Equation constants: {1: np.float64(-6.540000043575996)}\nTree:  cos(((x32)**(-6.540000043575996) cos sin(x35(/(x90, x21, cos(x40))))))']
MSE: [np.float64(0.25372842691290287), np.float64(73576096017.78087), np.float64(0.5004677305588812), np.float64(0.25), np.float64(0.2534444321779107), np.float64(0.2559221952536664), np.float64(0.2956351380813102), np.float64(0.25434712462328446), np.float64(0.25335596338020955), np.float64(0.5456325394937853), np.float64(0.29464204002931593), np.float64(0.2533559634991328)]
Generators: ['Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-2, 2), n_g=870, sigma_y=0.01229219650710307, unit=0.857804846386473)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.025396824055238295, unit=0.6445722611133187)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-2, 2), n_g=806, sigma_y=0.012292196507103071, unit=0.9435853310251204)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=277, sigma_y=0.03809523608285744, unit=0.5801150350019868)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=516, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-5.170419763586739, 4.829580236413261), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.812056179009431)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.012292196507103071, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.033148712183507914, 0.833148712183508), n_g=341, sigma_y=0.019504760874423013, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.01024349708925256, unit=0.9435853310251204)', 'Generator(mode=real, range=(-1.28, 1.28), n_g=806, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.756611424626608, 5.243388575373392), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=516, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=580, sigma_y=0.027064636707717575, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=548, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-0.07600000000000001, 1.076), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.033148712183507914, 0.833148712183508), n_g=341, sigma_y=0.019504760874423013, unit=0.47943391322478246)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(0.1, 0.9), n_g=277, sigma_y=0.03809523608285744, unit=0.5801150350019868)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5.170419763586739, 4.829580236413261), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)']
Gen 26: 8 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(0.5403377082445898), 1: np.float64(0.5403377082445898), 2: np.float64(0.5403377082445898)}\nTree:  (((x78)**(0.5403377082445898) * (0.5403377082445898 / x21)) + 0.5403377082445898)', 'Equation constants: {0: np.float64(0.5403377159444804), 1: np.float64(0.5403377159444804), 2: np.float64(0.5403377159444804)}\nTree:  (((x78)**(0.5403377159444804) * (0.5403377159444804 / x21(cos(x9)))) + 0.5403377159444804)', 'Equation constants: {1: np.float64(-8.797808705875275), 2: np.float64(-8.797808705875275)}\nTree:  cos(((x32)**(-8.797808705875275) cos sin(x35((x19 / -8.797808705875275)))))', 'Equation constants: {0: np.float64(0.540337673554071), 1: np.float64(0.540337673554071), 2: np.float64(0.540337673554071)}\nTree:  ((pow(x78, 0.540337673554071, (x75 / x33)) * (0.540337673554071 / x21)) + 0.540337673554071)', 'Equation constants: {0: np.float64(0.5403376742196646), 1: np.float64(0.5403376742196646), 2: np.float64(0.5403376742196646)}\nTree:  (((x78)**(0.5403376742196646) * (const((x25 / x86)) / x21)) + 0.5403376742196646)', 'Equation constants: {0: np.float64(0.5403378742364792), 1: np.float64(0.5403378742364792), 2: np.float64(0.5403378742364792)}\nTree:  (((x78)**(0.5403378742364792) * (0.5403378742364792 / x21)) + 0.5403378742364792)', 'Equation constants: {1: np.float64(-10.505425371294276)}\nTree:  cos(cos((x32)**(-10.505425371294276)))', 'Equation constants: {0: np.float64(0.5403376110665167), 1: np.float64(0.5403376110665167), 2: np.float64(0.5403376110665167)}\nTree:  (((x78)**(0.5403376110665167) * (0.5403376110665167 / x21)) + 0.5403376110665167)', 'Equation constants: {0: np.float64(0.5403376180978453), 1: np.float64(0.5403376180978453), 2: np.float64(0.5403376180978453)}\nTree:  (((x78((x21)**(x9)))**(0.5403376180978453) * (0.5403376180978453 / x21)) + 0.5403376180978453)', 'Equation constants: {1: np.float64(0.0018175490910036943)}\nTree:  sin(cos((x32)**(0.0018175490910036943)))', 'Equation constants: {2: np.float64(-4.455864355193361), 3: np.float64(-4.455864355193361)}\nTree:  cos((cos(-4.455864355193361) + -4.455864355193361))', 'Equation constants: {1: np.float64(1.3935320423707829), 2: np.float64(1.3935320423707829)}\nTree:  (cos((x32)**(1.3935320423707829)) cos (1.3935320423707829)**(x18))', 'Equation constants: {1: np.float64(-3.9586706913578578), 2: np.float64(-3.9586706913578578), 3: np.float64(-3.9586706913578578)}\nTree:  cos(((x32(sin(-3.9586706913578578)))**(-3.9586706913578578) cos sin(x35((x19 / -3.9586706913578578)))))', 'Equation constants: {0: np.float64(0.5403376927763255), 1: np.float64(0.5403376927763255), 2: np.float64(0.5403376927763255)}\nTree:  (((x78)**(0.5403376927763255) * (const((sin(x90) / x86)) / x21)) + 0.5403376927763255)', 'Equation constants: {0: np.float64(0.5501488555031915), 1: np.float64(0.5501488555031915), 2: np.float64(0.5501488555031915)}\nTree:  (((x90)**(0.5501488555031915) * (0.5501488555031915 / x21)) + 0.5501488555031915)', 'Equation constants: {1: np.float64(-13.952958858311401)}\nTree:  cos(((x32)**(-13.952958858311401) cos sin(x35(/(x19, x21, cos(x40))))))', 'Equation constants: {0: np.float64(-0.11244473932523802), 2: np.float64(-0.11244473932523802), 3: np.float64(-0.11244473932523802)}\nTree:  (((x90)**(-0.11244473932523802) * ((-0.11244473932523802 * x60) / x21)) + -0.11244473932523802)', 'Equation constants: {0: np.float64(0.5004766188974736), 1: np.float64(0.5004766188974736), 2: np.float64(0.5004766188974736)}\nTree:  (((x78)**(0.5004766188974736) * (0.5004766188974736 / x13)) + 0.5004766188974736)', 'Equation constants: {1: np.float64(-1.1026229734368727), 2: np.float64(-1.1026229734368727)}\nTree:  (cos((x32)**(-1.1026229734368727)) cos (-1.1026229734368727 / x74))', 'Equation constants: {0: np.float64(0.5403376929138247), 1: np.float64(0.5403376929138247), 2: np.float64(0.5403376929138247)}\nTree:  (((x78((x21)**(x9)))**(0.5403376929138247) * (0.5403376929138247 / x21)) + 0.5403376929138247)', 'Equation constants: {0: np.float64(0.5403377247345035), 1: np.float64(0.5403377247345035), 2: np.float64(0.5403377247345035)}\nTree:  (((x78((x5)**(x9)))**(0.5403377247345035) * (0.5403377247345035 / x21)) + 0.5403377247345035)', 'Equation constants: {0: np.float64(0.540337710341648), 1: np.float64(0.540337710341648), 2: np.float64(0.540337710341648)}\nTree:  (((x78)**(0.540337710341648) * (const(sin(x16)) / x21)) + 0.540337710341648)', 'Equation constants: {1: np.float64(7.628653608645056), 2: np.float64(7.628653608645056), 3: np.float64(7.628653608645056)}\nTree:  cos(cos((x32)**(7.628653608645056), sin(x35((x19 / 7.628653608645056))), cos(7.628653608645056)))', 'Equation constants: {0: np.float64(0.5403377026418426), 1: np.float64(0.5403377026418426), 2: np.float64(0.5403377026418426)}\nTree:  (((x78)**(0.5403377026418426) * (0.5403377026418426 / x21)) + 0.5403377026418426)', 'Equation constants: {1: np.float64(7.440761480463063), 2: np.float64(7.440761480463063)}\nTree:  cos(((x32)**(7.440761480463063) cos (x35(/(x19, x21, cos(x40))) sin (x95 + 7.440761480463063))))', 'Equation constants: {0: np.float64(0.49999858261192104), 1: np.float64(0.49999858261192104), 2: np.float64(0.49999858261192104)}\nTree:  (((x78)**(0.49999858261192104) * (0.49999858261192104)**(x21)) + 0.49999858261192104)', 'Equation constants: {3: np.float64(0.4999999999999989)}\nTree:  0.4999999999999989', 'Equation constants: {1: np.float64(-4.613959156192887)}\nTree:  (cos((x32)**(-4.613959156192887)) cos (x62)**(x86))', 'Equation constants: {0: np.float64(0.5400277434149038), 1: np.float64(0.5400277434149038), 2: np.float64(0.5400277434149038)}\nTree:  (((x78((x21)**(x9)))**(0.5400277434149038) * (0.5400277434149038 / x27)) + 0.5400277434149038)', 'Equation constants: {1: np.float64(-10.512177731382057)}\nTree:  cos(((x32)**(-10.512177731382057) cos sin(x35(/(x19, x21, cos(x40))))))', 'Equation constants: {0: np.float64(0.5402585499950692), 1: np.float64(0.5402585499950692), 2: np.float64(0.5402585499950692)}\nTree:  (((x19)**(0.5402585499950692) * (0.5402585499950692 / x21)) + 0.5402585499950692)', 'Equation constants: {1: np.float64(-6.540000043575996)}\nTree:  cos(((x32)**(-6.540000043575996) cos sin(x35(/(x90, x21, cos(x40))))))', 'Equation constants: {0: np.float64(0.4697620426194788), 2: np.float64(0.4697620426194788)}\nTree:  (((x78((x21)**(x9)))**(0.4697620426194788) * (sin(x67) / x21)) + 0.4697620426194788)', 'Equation constants: {0: np.float64(0.49984142362643924), 1: np.float64(0.49984142362643924), 2: np.float64(0.49984142362643924)}\nTree:  (((x90)**(0.49984142362643924) * (0.49984142362643924 / x21)) + 0.49984142362643924)', 'Equation constants: {2: np.float64(6.0235594616497465), 3: np.float64(6.0235594616497465), 4: np.float64(6.0235594616497465)}\nTree:  cos(+(cos(6.0235594616497465), 6.0235594616497465, cos(6.0235594616497465)))', 'Equation constants: {1: np.float64(9.77315900479796), 2: np.float64(9.77315900479796)}\nTree:  (cos((x32)**(9.77315900479796)) cos (9.77315900479796)**(x86))', 'Equation constants: {1: np.float64(-4.6145118347462475)}\nTree:  cos(cos((x32)**(-4.6145118347462475)))', 'Equation constants: {1: np.float64(4.580898281089063), 2: np.float64(4.580898281089063)}\nTree:  cos(((x32)**(4.580898281089063) cos sin(x35(/(x19, x21, cos(x40), sin(4.580898281089063))))))', 'Equation constants: {0: np.float64(0.5403376341727063), 1: np.float64(0.5403376341727063), 2: np.float64(0.5403376341727063)}\nTree:  +(((x78)**(0.5403376341727063) * (0.5403376341727063 / x21)), 0.5403376341727063, (x77 - x73))', 'Equation constants: {0: np.float64(-0.4806398204313897), 1: np.float64(-0.4806398204313897), 2: np.float64(-0.4806398204313897)}\nTree:  (((x19)**(-0.4806398204313897))**((-0.4806398204313897 / x21)) + -0.4806398204313897)']
MSE: [np.float64(19.508640156278044), np.float64(0.3067534602149582), np.float64(0.3016927891821357), np.float64(2.475371184104258), np.float64(0.25360219229200603), np.float64(0.25290827714232433), np.float64(0.25302085298684807), np.float64(0.29518558495899844), np.float64(0.25403761494006627), np.float64(382989004.1048134)]
Generators: ['Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=277, sigma_y=0.03809523608285744, unit=0.5801150350019868)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=516, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-5.170419763586739, 4.829580236413261), n_g=580, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.812056179009431)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.012292196507103071, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.033148712183507914, 0.833148712183508), n_g=341, sigma_y=0.019504760874423013, unit=0.5327043480275361)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.01024349708925256, unit=0.9435853310251204)', 'Generator(mode=real, range=(-1.28, 1.28), n_g=806, sigma_y=0.01024349708925256, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.756611424626608, 5.243388575373392), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=516, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=580, sigma_y=0.027064636707717575, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=548, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-0.07600000000000001, 1.076), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.033148712183507914, 0.833148712183508), n_g=341, sigma_y=0.019504760874423013, unit=0.47943391322478246)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(0.1, 0.9), n_g=277, sigma_y=0.03809523608285744, unit=0.5801150350019868)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5.170419763586739, 4.829580236413261), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(0.021018807162579756, 0.9810188071625797), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.030476188866285954, unit=0.6445722611133187)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(0.02835792516339454, 0.8283579251633946), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-0.02523999103404772, 0.9347600089659522), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(-3.2, 3.2), n_g=516, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)']
Gen 27: 8 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(0.5403376180978453), 1: np.float64(0.5403376180978453), 2: np.float64(0.5403376180978453)}\nTree:  (((x78((x21)**(x9)))**(0.5403376180978453) * (0.5403376180978453 / x21)) + 0.5403376180978453)', 'Equation constants: {1: np.float64(0.0018175490910036943)}\nTree:  sin(cos((x32)**(0.0018175490910036943)))', 'Equation constants: {2: np.float64(-4.455864355193361), 3: np.float64(-4.455864355193361)}\nTree:  cos((cos(-4.455864355193361) + -4.455864355193361))', 'Equation constants: {1: np.float64(1.3935320423707829), 2: np.float64(1.3935320423707829)}\nTree:  (cos((x32)**(1.3935320423707829)) cos (1.3935320423707829)**(x18))', 'Equation constants: {1: np.float64(-3.9586706913578578), 2: np.float64(-3.9586706913578578), 3: np.float64(-3.9586706913578578)}\nTree:  cos(((x32(sin(-3.9586706913578578)))**(-3.9586706913578578) cos sin(x35((x19 / -3.9586706913578578)))))', 'Equation constants: {0: np.float64(0.5403376927763255), 1: np.float64(0.5403376927763255), 2: np.float64(0.5403376927763255)}\nTree:  (((x78)**(0.5403376927763255) * (const((sin(x90) / x86)) / x21)) + 0.5403376927763255)', 'Equation constants: {0: np.float64(0.5501488555031915), 1: np.float64(0.5501488555031915), 2: np.float64(0.5501488555031915)}\nTree:  (((x90)**(0.5501488555031915) * (0.5501488555031915 / x21)) + 0.5501488555031915)', 'Equation constants: {1: np.float64(-13.952958858311401)}\nTree:  cos(((x32)**(-13.952958858311401) cos sin(x35(/(x19, x21, cos(x40))))))', 'Equation constants: {0: np.float64(-0.11244473932523802), 2: np.float64(-0.11244473932523802), 3: np.float64(-0.11244473932523802)}\nTree:  (((x90)**(-0.11244473932523802) * ((-0.11244473932523802 * x60) / x21)) + -0.11244473932523802)', 'Equation constants: {0: np.float64(0.5004766188974736), 1: np.float64(0.5004766188974736), 2: np.float64(0.5004766188974736)}\nTree:  (((x78)**(0.5004766188974736) * (0.5004766188974736 / x13)) + 0.5004766188974736)', 'Equation constants: {1: np.float64(-1.1026229734368727), 2: np.float64(-1.1026229734368727)}\nTree:  (cos((x32)**(-1.1026229734368727)) cos (-1.1026229734368727 / x74))', 'Equation constants: {0: np.float64(0.5403376929138247), 1: np.float64(0.5403376929138247), 2: np.float64(0.5403376929138247)}\nTree:  (((x78((x21)**(x9)))**(0.5403376929138247) * (0.5403376929138247 / x21)) + 0.5403376929138247)', 'Equation constants: {0: np.float64(0.5403377247345035), 1: np.float64(0.5403377247345035), 2: np.float64(0.5403377247345035)}\nTree:  (((x78((x5)**(x9)))**(0.5403377247345035) * (0.5403377247345035 / x21)) + 0.5403377247345035)', 'Equation constants: {0: np.float64(0.540337710341648), 1: np.float64(0.540337710341648), 2: np.float64(0.540337710341648)}\nTree:  (((x78)**(0.540337710341648) * (const(sin(x16)) / x21)) + 0.540337710341648)', 'Equation constants: {1: np.float64(7.628653608645056), 2: np.float64(7.628653608645056), 3: np.float64(7.628653608645056)}\nTree:  cos(cos((x32)**(7.628653608645056), sin(x35((x19 / 7.628653608645056))), cos(7.628653608645056)))', 'Equation constants: {0: np.float64(0.5403377026418426), 1: np.float64(0.5403377026418426), 2: np.float64(0.5403377026418426)}\nTree:  (((x78)**(0.5403377026418426) * (0.5403377026418426 / x21)) + 0.5403377026418426)', 'Equation constants: {1: np.float64(7.440761480463063), 2: np.float64(7.440761480463063)}\nTree:  cos(((x32)**(7.440761480463063) cos (x35(/(x19, x21, cos(x40))) sin (x95 + 7.440761480463063))))', 'Equation constants: {0: np.float64(0.49999858261192104), 1: np.float64(0.49999858261192104), 2: np.float64(0.49999858261192104)}\nTree:  (((x78)**(0.49999858261192104) * (0.49999858261192104)**(x21)) + 0.49999858261192104)', 'Equation constants: {3: np.float64(0.4999999999999989)}\nTree:  0.4999999999999989', 'Equation constants: {1: np.float64(-4.613959156192887)}\nTree:  (cos((x32)**(-4.613959156192887)) cos (x62)**(x86))', 'Equation constants: {0: np.float64(0.5400277434149038), 1: np.float64(0.5400277434149038), 2: np.float64(0.5400277434149038)}\nTree:  (((x78((x21)**(x9)))**(0.5400277434149038) * (0.5400277434149038 / x27)) + 0.5400277434149038)', 'Equation constants: {1: np.float64(-10.512177731382057)}\nTree:  cos(((x32)**(-10.512177731382057) cos sin(x35(/(x19, x21, cos(x40))))))', 'Equation constants: {0: np.float64(0.5402585499950692), 1: np.float64(0.5402585499950692), 2: np.float64(0.5402585499950692)}\nTree:  (((x19)**(0.5402585499950692) * (0.5402585499950692 / x21)) + 0.5402585499950692)', 'Equation constants: {1: np.float64(-6.540000043575996)}\nTree:  cos(((x32)**(-6.540000043575996) cos sin(x35(/(x90, x21, cos(x40))))))', 'Equation constants: {0: np.float64(0.4697620426194788), 2: np.float64(0.4697620426194788)}\nTree:  (((x78((x21)**(x9)))**(0.4697620426194788) * (sin(x67) / x21)) + 0.4697620426194788)', 'Equation constants: {0: np.float64(0.49984142362643924), 1: np.float64(0.49984142362643924), 2: np.float64(0.49984142362643924)}\nTree:  (((x90)**(0.49984142362643924) * (0.49984142362643924 / x21)) + 0.49984142362643924)', 'Equation constants: {2: np.float64(6.0235594616497465), 3: np.float64(6.0235594616497465), 4: np.float64(6.0235594616497465)}\nTree:  cos(+(cos(6.0235594616497465), 6.0235594616497465, cos(6.0235594616497465)))', 'Equation constants: {1: np.float64(9.77315900479796), 2: np.float64(9.77315900479796)}\nTree:  (cos((x32)**(9.77315900479796)) cos (9.77315900479796)**(x86))', 'Equation constants: {1: np.float64(-4.6145118347462475)}\nTree:  cos(cos((x32)**(-4.6145118347462475)))', 'Equation constants: {1: np.float64(4.580898281089063), 2: np.float64(4.580898281089063)}\nTree:  cos(((x32)**(4.580898281089063) cos sin(x35(/(x19, x21, cos(x40), sin(4.580898281089063))))))', 'Equation constants: {0: np.float64(0.5403376341727063), 1: np.float64(0.5403376341727063), 2: np.float64(0.5403376341727063)}\nTree:  +(((x78)**(0.5403376341727063) * (0.5403376341727063 / x21)), 0.5403376341727063, (x77 - x73))', 'Equation constants: {0: np.float64(-0.4806398204313897), 1: np.float64(-0.4806398204313897), 2: np.float64(-0.4806398204313897)}\nTree:  (((x19)**(-0.4806398204313897))**((-0.4806398204313897 / x21)) + -0.4806398204313897)', 'Equation constants: {1: np.float64(0.0018175490910036943)}\nTree:  sin(cos((x32)**(0.0018175490910036943)))', 'Equation constants: {0: np.float64(0.5403377088102994), 1: np.float64(0.5403377088102994), 2: np.float64(0.5403377088102994)}\nTree:  (((x78)**(0.5403377088102994) * (const((sin(x90) / x86)) / x21)) + 0.5403377088102994)', 'Equation constants: {0: np.float64(-0.47732156190909897), 2: np.float64(-0.47732156190909897)}\nTree:  (((x78)**(-0.47732156190909897) * (x40 / x21)) + -0.47732156190909897)', 'Equation constants: {1: np.float64(-1.5687788223710424), 2: np.float64(-1.5687788223710424), 3: np.float64(-1.5687788223710424)}\nTree:  (cos((((x57 / -1.5687788223710424) / -1.5687788223710424))**(-1.5687788223710424)) cos (x62)**(x86))', 'Equation constants: {0: np.float64(0.5400277816941943), 1: np.float64(0.5400277816941943), 2: np.float64(0.5400277816941943)}\nTree:  (((x78((x21)**(x9)))**(0.5400277816941943) * (0.5400277816941943 / x27)) + 0.5400277816941943)', 'Equation constants: {1: np.float64(-3.887287722218553e-06), 2: np.float64(-3.887287722218553e-06), 3: np.float64(-3.887287722218553e-06)}\nTree:  ((pow(x78, cos(-3.887287722218553e-06), (x75 / x33)) * (-3.887287722218553e-06 / x21)) + -3.887287722218553e-06)', 'Equation constants: {1: np.float64(-9.215090741716985), 2: np.float64(-9.215090741716985)}\nTree:  cos(((x32)**(-9.215090741716985) cos sin(x35((x19 / -9.215090741716985)))))', 'Equation constants: {0: np.float64(0.5403377047286522), 1: np.float64(0.5403377047286522), 2: np.float64(0.5403377047286522)}\nTree:  (((x78((x21)**(x9)))**(0.5403377047286522) * (0.5403377047286522 / x21)) + 0.5403377047286522)']
MSE: [np.float64(0.25017961034537584), np.float64(1.0955443344118213e+22), np.float64(0.2951855992236462), np.float64(0.8639444144558006), np.float64(0.32490195732891747), np.float64(0.295635281723547), np.float64(105.98025068592064), np.float64(6.039992483282489e+39), np.float64(0.3066960133205442), np.float64(0.29518560168743213)]
Generators: ['Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.756611424626608, 5.243388575373392), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=516, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=580, sigma_y=0.027064636707717575, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=548, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-0.07600000000000001, 1.076), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.033148712183507914, 0.833148712183508), n_g=341, sigma_y=0.019504760874423013, unit=0.47943391322478246)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(0.1, 0.9), n_g=277, sigma_y=0.03809523608285744, unit=0.5801150350019868)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5.170419763586739, 4.829580236413261), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(0.021018807162579756, 0.9810188071625797), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.030476188866285954, unit=0.6445722611133187)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(0.02835792516339454, 0.8283579251633946), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-0.02523999103404772, 0.9347600089659522), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(-3.2, 3.2), n_g=516, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.033148712183507914, 0.833148712183508), n_g=341, sigma_y=0.019504760874423013, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.012292196507103071, unit=0.7720243617478257)', 'Generator(mode=real, range=(-1.28, 1.28), n_g=806, sigma_y=0.01024349708925256, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=516, sigma_y=0.02255386392309798, unit=0.8039356172193367)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-0.07600000000000001, 1.076), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(0.02835792516339454, 0.8283579251633946), n_g=277, sigma_y=0.030476188866285954, unit=0.5273773045472607)']
Gen 28: 4 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {1: np.float64(-3.9586706913578578), 2: np.float64(-3.9586706913578578), 3: np.float64(-3.9586706913578578)}\nTree:  cos(((x32(sin(-3.9586706913578578)))**(-3.9586706913578578) cos sin(x35((x19 / -3.9586706913578578)))))', 'Equation constants: {0: np.float64(0.5403376927763255), 1: np.float64(0.5403376927763255), 2: np.float64(0.5403376927763255)}\nTree:  (((x78)**(0.5403376927763255) * (const((sin(x90) / x86)) / x21)) + 0.5403376927763255)', 'Equation constants: {0: np.float64(0.5501488555031915), 1: np.float64(0.5501488555031915), 2: np.float64(0.5501488555031915)}\nTree:  (((x90)**(0.5501488555031915) * (0.5501488555031915 / x21)) + 0.5501488555031915)', 'Equation constants: {1: np.float64(-13.952958858311401)}\nTree:  cos(((x32)**(-13.952958858311401) cos sin(x35(/(x19, x21, cos(x40))))))', 'Equation constants: {0: np.float64(-0.11244473932523802), 2: np.float64(-0.11244473932523802), 3: np.float64(-0.11244473932523802)}\nTree:  (((x90)**(-0.11244473932523802) * ((-0.11244473932523802 * x60) / x21)) + -0.11244473932523802)', 'Equation constants: {0: np.float64(0.5004766188974736), 1: np.float64(0.5004766188974736), 2: np.float64(0.5004766188974736)}\nTree:  (((x78)**(0.5004766188974736) * (0.5004766188974736 / x13)) + 0.5004766188974736)', 'Equation constants: {1: np.float64(-1.1026229734368727), 2: np.float64(-1.1026229734368727)}\nTree:  (cos((x32)**(-1.1026229734368727)) cos (-1.1026229734368727 / x74))', 'Equation constants: {0: np.float64(0.5403376929138247), 1: np.float64(0.5403376929138247), 2: np.float64(0.5403376929138247)}\nTree:  (((x78((x21)**(x9)))**(0.5403376929138247) * (0.5403376929138247 / x21)) + 0.5403376929138247)', 'Equation constants: {0: np.float64(0.5403377247345035), 1: np.float64(0.5403377247345035), 2: np.float64(0.5403377247345035)}\nTree:  (((x78((x5)**(x9)))**(0.5403377247345035) * (0.5403377247345035 / x21)) + 0.5403377247345035)', 'Equation constants: {0: np.float64(0.540337710341648), 1: np.float64(0.540337710341648), 2: np.float64(0.540337710341648)}\nTree:  (((x78)**(0.540337710341648) * (const(sin(x16)) / x21)) + 0.540337710341648)', 'Equation constants: {1: np.float64(7.628653608645056), 2: np.float64(7.628653608645056), 3: np.float64(7.628653608645056)}\nTree:  cos(cos((x32)**(7.628653608645056), sin(x35((x19 / 7.628653608645056))), cos(7.628653608645056)))', 'Equation constants: {0: np.float64(0.5403377026418426), 1: np.float64(0.5403377026418426), 2: np.float64(0.5403377026418426)}\nTree:  (((x78)**(0.5403377026418426) * (0.5403377026418426 / x21)) + 0.5403377026418426)', 'Equation constants: {1: np.float64(7.440761480463063), 2: np.float64(7.440761480463063)}\nTree:  cos(((x32)**(7.440761480463063) cos (x35(/(x19, x21, cos(x40))) sin (x95 + 7.440761480463063))))', 'Equation constants: {0: np.float64(0.49999858261192104), 1: np.float64(0.49999858261192104), 2: np.float64(0.49999858261192104)}\nTree:  (((x78)**(0.49999858261192104) * (0.49999858261192104)**(x21)) + 0.49999858261192104)', 'Equation constants: {3: np.float64(0.4999999999999989)}\nTree:  0.4999999999999989', 'Equation constants: {1: np.float64(-4.613959156192887)}\nTree:  (cos((x32)**(-4.613959156192887)) cos (x62)**(x86))', 'Equation constants: {0: np.float64(0.5400277434149038), 1: np.float64(0.5400277434149038), 2: np.float64(0.5400277434149038)}\nTree:  (((x78((x21)**(x9)))**(0.5400277434149038) * (0.5400277434149038 / x27)) + 0.5400277434149038)', 'Equation constants: {1: np.float64(-10.512177731382057)}\nTree:  cos(((x32)**(-10.512177731382057) cos sin(x35(/(x19, x21, cos(x40))))))', 'Equation constants: {0: np.float64(0.5402585499950692), 1: np.float64(0.5402585499950692), 2: np.float64(0.5402585499950692)}\nTree:  (((x19)**(0.5402585499950692) * (0.5402585499950692 / x21)) + 0.5402585499950692)', 'Equation constants: {1: np.float64(-6.540000043575996)}\nTree:  cos(((x32)**(-6.540000043575996) cos sin(x35(/(x90, x21, cos(x40))))))', 'Equation constants: {0: np.float64(0.4697620426194788), 2: np.float64(0.4697620426194788)}\nTree:  (((x78((x21)**(x9)))**(0.4697620426194788) * (sin(x67) / x21)) + 0.4697620426194788)', 'Equation constants: {0: np.float64(0.49984142362643924), 1: np.float64(0.49984142362643924), 2: np.float64(0.49984142362643924)}\nTree:  (((x90)**(0.49984142362643924) * (0.49984142362643924 / x21)) + 0.49984142362643924)', 'Equation constants: {2: np.float64(6.0235594616497465), 3: np.float64(6.0235594616497465), 4: np.float64(6.0235594616497465)}\nTree:  cos(+(cos(6.0235594616497465), 6.0235594616497465, cos(6.0235594616497465)))', 'Equation constants: {1: np.float64(9.77315900479796), 2: np.float64(9.77315900479796)}\nTree:  (cos((x32)**(9.77315900479796)) cos (9.77315900479796)**(x86))', 'Equation constants: {1: np.float64(-4.6145118347462475)}\nTree:  cos(cos((x32)**(-4.6145118347462475)))', 'Equation constants: {1: np.float64(4.580898281089063), 2: np.float64(4.580898281089063)}\nTree:  cos(((x32)**(4.580898281089063) cos sin(x35(/(x19, x21, cos(x40), sin(4.580898281089063))))))', 'Equation constants: {0: np.float64(0.5403376341727063), 1: np.float64(0.5403376341727063), 2: np.float64(0.5403376341727063)}\nTree:  +(((x78)**(0.5403376341727063) * (0.5403376341727063 / x21)), 0.5403376341727063, (x77 - x73))', 'Equation constants: {0: np.float64(-0.4806398204313897), 1: np.float64(-0.4806398204313897), 2: np.float64(-0.4806398204313897)}\nTree:  (((x19)**(-0.4806398204313897))**((-0.4806398204313897 / x21)) + -0.4806398204313897)', 'Equation constants: {1: np.float64(0.0018175490910036943)}\nTree:  sin(cos((x32)**(0.0018175490910036943)))', 'Equation constants: {0: np.float64(0.5403377088102994), 1: np.float64(0.5403377088102994), 2: np.float64(0.5403377088102994)}\nTree:  (((x78)**(0.5403377088102994) * (const((sin(x90) / x86)) / x21)) + 0.5403377088102994)', 'Equation constants: {0: np.float64(-0.47732156190909897), 2: np.float64(-0.47732156190909897)}\nTree:  (((x78)**(-0.47732156190909897) * (x40 / x21)) + -0.47732156190909897)', 'Equation constants: {1: np.float64(-1.5687788223710424), 2: np.float64(-1.5687788223710424), 3: np.float64(-1.5687788223710424)}\nTree:  (cos((((x57 / -1.5687788223710424) / -1.5687788223710424))**(-1.5687788223710424)) cos (x62)**(x86))', 'Equation constants: {0: np.float64(0.5400277816941943), 1: np.float64(0.5400277816941943), 2: np.float64(0.5400277816941943)}\nTree:  (((x78((x21)**(x9)))**(0.5400277816941943) * (0.5400277816941943 / x27)) + 0.5400277816941943)', 'Equation constants: {1: np.float64(-3.887287722218553e-06), 2: np.float64(-3.887287722218553e-06), 3: np.float64(-3.887287722218553e-06)}\nTree:  ((pow(x78, cos(-3.887287722218553e-06), (x75 / x33)) * (-3.887287722218553e-06 / x21)) + -3.887287722218553e-06)', 'Equation constants: {1: np.float64(-9.215090741716985), 2: np.float64(-9.215090741716985)}\nTree:  cos(((x32)**(-9.215090741716985) cos sin(x35((x19 / -9.215090741716985)))))', 'Equation constants: {0: np.float64(0.5403377047286522), 1: np.float64(0.5403377047286522), 2: np.float64(0.5403377047286522)}\nTree:  (((x78((x21)**(x9)))**(0.5403377047286522) * (0.5403377047286522 / x21)) + 0.5403377047286522)', 'Equation constants: {1: np.float64(-4.613589035519826)}\nTree:  cos(cos((x32)**(-4.613589035519826)))', 'Equation constants: {0: np.float64(0.5305135913749919), 1: np.float64(0.5305135913749919), 2: np.float64(0.5305135913749919)}\nTree:  (((x90)**(0.5305135913749919) * (0.5305135913749919 / x96)) + 0.5305135913749919)', 'Equation constants: {1: np.float64(-3.4136044632543054), 2: np.float64(-3.4136044632543054), 3: np.float64(-3.4136044632543054)}\nTree:  cos(cos((x32)**(-3.4136044632543054), sin(x35((x19 / -3.4136044632543054))), cos(-3.4136044632543054)))', 'Equation constants: {1: np.float64(-1.94618165724612), 2: np.float64(-1.94618165724612)}\nTree:  cos(((x32)**(-1.94618165724612) cos sin(((x19 / -1.94618165724612) x35 cos(x64)))))']
MSE: [np.float64(0.2521612222031974), np.float64(0.2872907918102595), np.float64(2.2840508182671897), np.float64(0.2536091084886451), np.float64(1.0904626169393288e+21), np.float64(395765768.22156084), np.float64(4142363.9490811), np.float64(46.43645462466189), np.float64(377359840.14401656), np.float64(0.3004443189560599)]
Generators: ['Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-0.07600000000000001, 1.076), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.033148712183507914, 0.833148712183508), n_g=341, sigma_y=0.019504760874423013, unit=0.47943391322478246)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(0.1, 0.9), n_g=277, sigma_y=0.03809523608285744, unit=0.5801150350019868)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5.170419763586739, 4.829580236413261), n_g=548, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(0.021018807162579756, 0.9810188071625797), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.030476188866285954, unit=0.6445722611133187)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(0.02835792516339454, 0.8283579251633946), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-0.02523999103404772, 0.9347600089659522), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(-3.2, 3.2), n_g=516, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.033148712183507914, 0.833148712183508), n_g=341, sigma_y=0.019504760874423013, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.012292196507103071, unit=0.7720243617478257)', 'Generator(mode=real, range=(-1.28, 1.28), n_g=806, sigma_y=0.01024349708925256, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=516, sigma_y=0.02255386392309798, unit=0.8039356172193367)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-0.07600000000000001, 1.076), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(0.02835792516339454, 0.8283579251633946), n_g=277, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-0.07600000000000001, 1.076), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-4.535625273957654, 5.464374726042346), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-0.07498119283742025, 1.0770188071625797), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=742, sigma_y=0.012292196507103071, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.030476188866285954, unit=0.7090294872246506)']
Gen 29: 7 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(0.5403376929138247), 1: np.float64(0.5403376929138247), 2: np.float64(0.5403376929138247)}\nTree:  (((x78((x21)**(x9)))**(0.5403376929138247) * (0.5403376929138247 / x21)) + 0.5403376929138247)', 'Equation constants: {0: np.float64(0.5403377247345035), 1: np.float64(0.5403377247345035), 2: np.float64(0.5403377247345035)}\nTree:  (((x78((x5)**(x9)))**(0.5403377247345035) * (0.5403377247345035 / x21)) + 0.5403377247345035)', 'Equation constants: {0: np.float64(0.540337710341648), 1: np.float64(0.540337710341648), 2: np.float64(0.540337710341648)}\nTree:  (((x78)**(0.540337710341648) * (const(sin(x16)) / x21)) + 0.540337710341648)', 'Equation constants: {1: np.float64(7.628653608645056), 2: np.float64(7.628653608645056), 3: np.float64(7.628653608645056)}\nTree:  cos(cos((x32)**(7.628653608645056), sin(x35((x19 / 7.628653608645056))), cos(7.628653608645056)))', 'Equation constants: {0: np.float64(0.5403377026418426), 1: np.float64(0.5403377026418426), 2: np.float64(0.5403377026418426)}\nTree:  (((x78)**(0.5403377026418426) * (0.5403377026418426 / x21)) + 0.5403377026418426)', 'Equation constants: {1: np.float64(7.440761480463063), 2: np.float64(7.440761480463063)}\nTree:  cos(((x32)**(7.440761480463063) cos (x35(/(x19, x21, cos(x40))) sin (x95 + 7.440761480463063))))', 'Equation constants: {0: np.float64(0.49999858261192104), 1: np.float64(0.49999858261192104), 2: np.float64(0.49999858261192104)}\nTree:  (((x78)**(0.49999858261192104) * (0.49999858261192104)**(x21)) + 0.49999858261192104)', 'Equation constants: {3: np.float64(0.4999999999999989)}\nTree:  0.4999999999999989', 'Equation constants: {1: np.float64(-4.613959156192887)}\nTree:  (cos((x32)**(-4.613959156192887)) cos (x62)**(x86))', 'Equation constants: {0: np.float64(0.5400277434149038), 1: np.float64(0.5400277434149038), 2: np.float64(0.5400277434149038)}\nTree:  (((x78((x21)**(x9)))**(0.5400277434149038) * (0.5400277434149038 / x27)) + 0.5400277434149038)', 'Equation constants: {1: np.float64(-10.512177731382057)}\nTree:  cos(((x32)**(-10.512177731382057) cos sin(x35(/(x19, x21, cos(x40))))))', 'Equation constants: {0: np.float64(0.5402585499950692), 1: np.float64(0.5402585499950692), 2: np.float64(0.5402585499950692)}\nTree:  (((x19)**(0.5402585499950692) * (0.5402585499950692 / x21)) + 0.5402585499950692)', 'Equation constants: {1: np.float64(-6.540000043575996)}\nTree:  cos(((x32)**(-6.540000043575996) cos sin(x35(/(x90, x21, cos(x40))))))', 'Equation constants: {0: np.float64(0.4697620426194788), 2: np.float64(0.4697620426194788)}\nTree:  (((x78((x21)**(x9)))**(0.4697620426194788) * (sin(x67) / x21)) + 0.4697620426194788)', 'Equation constants: {0: np.float64(0.49984142362643924), 1: np.float64(0.49984142362643924), 2: np.float64(0.49984142362643924)}\nTree:  (((x90)**(0.49984142362643924) * (0.49984142362643924 / x21)) + 0.49984142362643924)', 'Equation constants: {2: np.float64(6.0235594616497465), 3: np.float64(6.0235594616497465), 4: np.float64(6.0235594616497465)}\nTree:  cos(+(cos(6.0235594616497465), 6.0235594616497465, cos(6.0235594616497465)))', 'Equation constants: {1: np.float64(9.77315900479796), 2: np.float64(9.77315900479796)}\nTree:  (cos((x32)**(9.77315900479796)) cos (9.77315900479796)**(x86))', 'Equation constants: {1: np.float64(-4.6145118347462475)}\nTree:  cos(cos((x32)**(-4.6145118347462475)))', 'Equation constants: {1: np.float64(4.580898281089063), 2: np.float64(4.580898281089063)}\nTree:  cos(((x32)**(4.580898281089063) cos sin(x35(/(x19, x21, cos(x40), sin(4.580898281089063))))))', 'Equation constants: {0: np.float64(0.5403376341727063), 1: np.float64(0.5403376341727063), 2: np.float64(0.5403376341727063)}\nTree:  +(((x78)**(0.5403376341727063) * (0.5403376341727063 / x21)), 0.5403376341727063, (x77 - x73))', 'Equation constants: {0: np.float64(-0.4806398204313897), 1: np.float64(-0.4806398204313897), 2: np.float64(-0.4806398204313897)}\nTree:  (((x19)**(-0.4806398204313897))**((-0.4806398204313897 / x21)) + -0.4806398204313897)', 'Equation constants: {1: np.float64(0.0018175490910036943)}\nTree:  sin(cos((x32)**(0.0018175490910036943)))', 'Equation constants: {0: np.float64(0.5403377088102994), 1: np.float64(0.5403377088102994), 2: np.float64(0.5403377088102994)}\nTree:  (((x78)**(0.5403377088102994) * (const((sin(x90) / x86)) / x21)) + 0.5403377088102994)', 'Equation constants: {0: np.float64(-0.47732156190909897), 2: np.float64(-0.47732156190909897)}\nTree:  (((x78)**(-0.47732156190909897) * (x40 / x21)) + -0.47732156190909897)', 'Equation constants: {1: np.float64(-1.5687788223710424), 2: np.float64(-1.5687788223710424), 3: np.float64(-1.5687788223710424)}\nTree:  (cos((((x57 / -1.5687788223710424) / -1.5687788223710424))**(-1.5687788223710424)) cos (x62)**(x86))', 'Equation constants: {0: np.float64(0.5400277816941943), 1: np.float64(0.5400277816941943), 2: np.float64(0.5400277816941943)}\nTree:  (((x78((x21)**(x9)))**(0.5400277816941943) * (0.5400277816941943 / x27)) + 0.5400277816941943)', 'Equation constants: {1: np.float64(-3.887287722218553e-06), 2: np.float64(-3.887287722218553e-06), 3: np.float64(-3.887287722218553e-06)}\nTree:  ((pow(x78, cos(-3.887287722218553e-06), (x75 / x33)) * (-3.887287722218553e-06 / x21)) + -3.887287722218553e-06)', 'Equation constants: {1: np.float64(-9.215090741716985), 2: np.float64(-9.215090741716985)}\nTree:  cos(((x32)**(-9.215090741716985) cos sin(x35((x19 / -9.215090741716985)))))', 'Equation constants: {0: np.float64(0.5403377047286522), 1: np.float64(0.5403377047286522), 2: np.float64(0.5403377047286522)}\nTree:  (((x78((x21)**(x9)))**(0.5403377047286522) * (0.5403377047286522 / x21)) + 0.5403377047286522)', 'Equation constants: {1: np.float64(-4.613589035519826)}\nTree:  cos(cos((x32)**(-4.613589035519826)))', 'Equation constants: {0: np.float64(0.5305135913749919), 1: np.float64(0.5305135913749919), 2: np.float64(0.5305135913749919)}\nTree:  (((x90)**(0.5305135913749919) * (0.5305135913749919 / x96)) + 0.5305135913749919)', 'Equation constants: {1: np.float64(-3.4136044632543054), 2: np.float64(-3.4136044632543054), 3: np.float64(-3.4136044632543054)}\nTree:  cos(cos((x32)**(-3.4136044632543054), sin(x35((x19 / -3.4136044632543054))), cos(-3.4136044632543054)))', 'Equation constants: {1: np.float64(-1.94618165724612), 2: np.float64(-1.94618165724612)}\nTree:  cos(((x32)**(-1.94618165724612) cos sin(((x19 / -1.94618165724612) x35 cos(x64)))))', 'Equation constants: {1: np.float64(2.0945217298748116), 2: np.float64(2.0945217298748116), 3: np.float64(2.0945217298748116)}\nTree:  cos(((x32)**(2.0945217298748116) cos sin(((x19 / const(cos(2.0945217298748116))) x35 cos(x64)))))', 'Equation constants: {1: np.float64(1.4511419566647739), 2: np.float64(1.4511419566647739)}\nTree:  cos(((x32)**(1.4511419566647739) cos (x35(/(x19, x21, cos(x40))) cos (x95 + 1.4511419566647739))))', 'Equation constants: {0: np.float64(0.5403376958211574), 1: np.float64(0.5403376958211574), 2: np.float64(0.5403376958211574)}\nTree:  (((x78)**(0.5403376958211574) * (0.5403376958211574 / x21)) + 0.5403376958211574)', 'Equation constants: {1: np.float64(-8.226154961997102)}\nTree:  cos(((x32)**(-8.226154961997102) cos sin(x35(/(x90, x21, cos(x40))))))', 'Equation constants: {0: np.float64(0.4697595351317294), 2: np.float64(0.4697595351317294)}\nTree:  (((x78((x21)**(x9)))**(0.4697595351317294) * (sin(x67) / x21)) + 0.4697595351317294)', 'Equation constants: {3: np.float64(0.4999999999999911)}\nTree:  0.4999999999999911', 'Equation constants: {0: np.float64(-0.4827576306153182), 1: np.float64(-0.4827576306153182), 2: np.float64(-0.4827576306153182)}\nTree:  (((x90)**(-0.4827576306153182))**((-0.4827576306153182 / x96)) + -0.4827576306153182)']
MSE: [np.float64(0.29606314823658725), np.float64(0.39048136589140064), np.float64(1.4290114058215628), np.float64(0.29518563146886456), np.float64(0.332899966161466), np.float64(0.2533559633998767), np.float64(0.30675379402765), np.float64(0.3141515560962704), np.float64(0.25), np.float64(0.25371509910262263)]
Generators: ['Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(0.021018807162579756, 0.9810188071625797), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.030476188866285954, unit=0.6445722611133187)', 'Generator(mode=real, range=(0.01999999999999999, 0.98), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(0.02835792516339454, 0.8283579251633946), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-0.02523999103404772, 0.9347600089659522), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(-3.2, 3.2), n_g=516, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.033148712183507914, 0.833148712183508), n_g=341, sigma_y=0.019504760874423013, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.012292196507103071, unit=0.7720243617478257)', 'Generator(mode=real, range=(-1.28, 1.28), n_g=806, sigma_y=0.01024349708925256, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=516, sigma_y=0.02255386392309798, unit=0.8039356172193367)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-0.07600000000000001, 1.076), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(0.02835792516339454, 0.8283579251633946), n_g=277, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-0.07600000000000001, 1.076), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-4.535625273957654, 5.464374726042346), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-0.07498119283742025, 1.0770188071625797), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=742, sigma_y=0.012292196507103071, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.030476188866285954, unit=0.7090294872246506)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.03247756404926109, unit=0.8039356172193366)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.28, 1.28), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=452, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=742, sigma_y=0.012292196507103071, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.02835792516339454, 0.8283579251633946), n_g=277, sigma_y=0.024380951093028763, unit=0.5273773045472607)']
Gen 30: 6 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(0.49999858261192104), 1: np.float64(0.49999858261192104), 2: np.float64(0.49999858261192104)}\nTree:  (((x78)**(0.49999858261192104) * (0.49999858261192104)**(x21)) + 0.49999858261192104)', 'Equation constants: {3: np.float64(0.4999999999999989)}\nTree:  0.4999999999999989', 'Equation constants: {1: np.float64(-4.613959156192887)}\nTree:  (cos((x32)**(-4.613959156192887)) cos (x62)**(x86))', 'Equation constants: {0: np.float64(0.5400277434149038), 1: np.float64(0.5400277434149038), 2: np.float64(0.5400277434149038)}\nTree:  (((x78((x21)**(x9)))**(0.5400277434149038) * (0.5400277434149038 / x27)) + 0.5400277434149038)', 'Equation constants: {1: np.float64(-10.512177731382057)}\nTree:  cos(((x32)**(-10.512177731382057) cos sin(x35(/(x19, x21, cos(x40))))))', 'Equation constants: {0: np.float64(0.5402585499950692), 1: np.float64(0.5402585499950692), 2: np.float64(0.5402585499950692)}\nTree:  (((x19)**(0.5402585499950692) * (0.5402585499950692 / x21)) + 0.5402585499950692)', 'Equation constants: {1: np.float64(-6.540000043575996)}\nTree:  cos(((x32)**(-6.540000043575996) cos sin(x35(/(x90, x21, cos(x40))))))', 'Equation constants: {0: np.float64(0.4697620426194788), 2: np.float64(0.4697620426194788)}\nTree:  (((x78((x21)**(x9)))**(0.4697620426194788) * (sin(x67) / x21)) + 0.4697620426194788)', 'Equation constants: {0: np.float64(0.49984142362643924), 1: np.float64(0.49984142362643924), 2: np.float64(0.49984142362643924)}\nTree:  (((x90)**(0.49984142362643924) * (0.49984142362643924 / x21)) + 0.49984142362643924)', 'Equation constants: {2: np.float64(6.0235594616497465), 3: np.float64(6.0235594616497465), 4: np.float64(6.0235594616497465)}\nTree:  cos(+(cos(6.0235594616497465), 6.0235594616497465, cos(6.0235594616497465)))', 'Equation constants: {1: np.float64(9.77315900479796), 2: np.float64(9.77315900479796)}\nTree:  (cos((x32)**(9.77315900479796)) cos (9.77315900479796)**(x86))', 'Equation constants: {1: np.float64(-4.6145118347462475)}\nTree:  cos(cos((x32)**(-4.6145118347462475)))', 'Equation constants: {1: np.float64(4.580898281089063), 2: np.float64(4.580898281089063)}\nTree:  cos(((x32)**(4.580898281089063) cos sin(x35(/(x19, x21, cos(x40), sin(4.580898281089063))))))', 'Equation constants: {0: np.float64(0.5403376341727063), 1: np.float64(0.5403376341727063), 2: np.float64(0.5403376341727063)}\nTree:  +(((x78)**(0.5403376341727063) * (0.5403376341727063 / x21)), 0.5403376341727063, (x77 - x73))', 'Equation constants: {0: np.float64(-0.4806398204313897), 1: np.float64(-0.4806398204313897), 2: np.float64(-0.4806398204313897)}\nTree:  (((x19)**(-0.4806398204313897))**((-0.4806398204313897 / x21)) + -0.4806398204313897)', 'Equation constants: {1: np.float64(0.0018175490910036943)}\nTree:  sin(cos((x32)**(0.0018175490910036943)))', 'Equation constants: {0: np.float64(0.5403377088102994), 1: np.float64(0.5403377088102994), 2: np.float64(0.5403377088102994)}\nTree:  (((x78)**(0.5403377088102994) * (const((sin(x90) / x86)) / x21)) + 0.5403377088102994)', 'Equation constants: {0: np.float64(-0.47732156190909897), 2: np.float64(-0.47732156190909897)}\nTree:  (((x78)**(-0.47732156190909897) * (x40 / x21)) + -0.47732156190909897)', 'Equation constants: {1: np.float64(-1.5687788223710424), 2: np.float64(-1.5687788223710424), 3: np.float64(-1.5687788223710424)}\nTree:  (cos((((x57 / -1.5687788223710424) / -1.5687788223710424))**(-1.5687788223710424)) cos (x62)**(x86))', 'Equation constants: {0: np.float64(0.5400277816941943), 1: np.float64(0.5400277816941943), 2: np.float64(0.5400277816941943)}\nTree:  (((x78((x21)**(x9)))**(0.5400277816941943) * (0.5400277816941943 / x27)) + 0.5400277816941943)', 'Equation constants: {1: np.float64(-3.887287722218553e-06), 2: np.float64(-3.887287722218553e-06), 3: np.float64(-3.887287722218553e-06)}\nTree:  ((pow(x78, cos(-3.887287722218553e-06), (x75 / x33)) * (-3.887287722218553e-06 / x21)) + -3.887287722218553e-06)', 'Equation constants: {1: np.float64(-9.215090741716985), 2: np.float64(-9.215090741716985)}\nTree:  cos(((x32)**(-9.215090741716985) cos sin(x35((x19 / -9.215090741716985)))))', 'Equation constants: {0: np.float64(0.5403377047286522), 1: np.float64(0.5403377047286522), 2: np.float64(0.5403377047286522)}\nTree:  (((x78((x21)**(x9)))**(0.5403377047286522) * (0.5403377047286522 / x21)) + 0.5403377047286522)', 'Equation constants: {1: np.float64(-4.613589035519826)}\nTree:  cos(cos((x32)**(-4.613589035519826)))', 'Equation constants: {0: np.float64(0.5305135913749919), 1: np.float64(0.5305135913749919), 2: np.float64(0.5305135913749919)}\nTree:  (((x90)**(0.5305135913749919) * (0.5305135913749919 / x96)) + 0.5305135913749919)', 'Equation constants: {1: np.float64(-3.4136044632543054), 2: np.float64(-3.4136044632543054), 3: np.float64(-3.4136044632543054)}\nTree:  cos(cos((x32)**(-3.4136044632543054), sin(x35((x19 / -3.4136044632543054))), cos(-3.4136044632543054)))', 'Equation constants: {1: np.float64(-1.94618165724612), 2: np.float64(-1.94618165724612)}\nTree:  cos(((x32)**(-1.94618165724612) cos sin(((x19 / -1.94618165724612) x35 cos(x64)))))', 'Equation constants: {1: np.float64(2.0945217298748116), 2: np.float64(2.0945217298748116), 3: np.float64(2.0945217298748116)}\nTree:  cos(((x32)**(2.0945217298748116) cos sin(((x19 / const(cos(2.0945217298748116))) x35 cos(x64)))))', 'Equation constants: {1: np.float64(1.4511419566647739), 2: np.float64(1.4511419566647739)}\nTree:  cos(((x32)**(1.4511419566647739) cos (x35(/(x19, x21, cos(x40))) cos (x95 + 1.4511419566647739))))', 'Equation constants: {0: np.float64(0.5403376958211574), 1: np.float64(0.5403376958211574), 2: np.float64(0.5403376958211574)}\nTree:  (((x78)**(0.5403376958211574) * (0.5403376958211574 / x21)) + 0.5403376958211574)', 'Equation constants: {1: np.float64(-8.226154961997102)}\nTree:  cos(((x32)**(-8.226154961997102) cos sin(x35(/(x90, x21, cos(x40))))))', 'Equation constants: {0: np.float64(0.4697595351317294), 2: np.float64(0.4697595351317294)}\nTree:  (((x78((x21)**(x9)))**(0.4697595351317294) * (sin(x67) / x21)) + 0.4697595351317294)', 'Equation constants: {3: np.float64(0.4999999999999911)}\nTree:  0.4999999999999911', 'Equation constants: {0: np.float64(-0.4827576306153182), 1: np.float64(-0.4827576306153182), 2: np.float64(-0.4827576306153182)}\nTree:  (((x90)**(-0.4827576306153182))**((-0.4827576306153182 / x96)) + -0.4827576306153182)', 'Equation constants: {1: np.float64(-4.534894274468391), 2: np.float64(-4.534894274468391)}\nTree:  cos(((x32)**(-4.534894274468391) cos sin(x35(/(x19, x21((x75 + x47)), cos(x40), sin(-4.534894274468391))))))', 'Equation constants: {1: np.float64(-4.613507167045856)}\nTree:  cos(((x32)**(-4.613507167045856) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(-1.372559549176275), 2: np.float64(-1.372559549176275), 3: np.float64(-1.372559549176275)}\nTree:  cos(((x32(sin(-1.372559549176275)))**(-1.372559549176275) cos sin(((x19 / -1.372559549176275) x35 cos(x64)))))', 'Equation constants: {0: np.float64(0.4697594797707949), 2: np.float64(0.4697594797707949)}\nTree:  (((x78)**(0.4697594797707949) * (sin(x67) / x21)) + 0.4697594797707949)', 'Equation constants: {0: np.float64(0.5501488438161584), 1: np.float64(0.5501488438161584), 2: np.float64(0.5501488438161584)}\nTree:  (((x90)**(0.5501488438161584) * (0.5501488438161584 / x21)) + 0.5501488438161584)', 'Equation constants: {1: np.float64(-8.22628841354597)}\nTree:  cos(cos((x32)**(-8.22628841354597)))']
MSE: [np.float64(0.4327601787081077), np.float64(1.8162134780320465e+19), np.float64(1.9096334489427515e+18), np.float64(0.2521612222031974), np.float64(0.25308148381412765), np.float64(0.3067534558612604), np.float64(0.30169279330972065), np.float64(0.5460304041232061), np.float64(0.5460304041232061), np.float64(0.2529082769849088), np.float64(2.1577999074861594), np.float64(3.9536142293609773)]
Generators: ['Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.033148712183507914, 0.833148712183508), n_g=341, sigma_y=0.019504760874423013, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.012292196507103071, unit=0.7720243617478257)', 'Generator(mode=real, range=(-1.28, 1.28), n_g=806, sigma_y=0.01024349708925256, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=516, sigma_y=0.02255386392309798, unit=0.8039356172193367)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-0.07600000000000001, 1.076), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(0.02835792516339454, 0.8283579251633946), n_g=277, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-0.07600000000000001, 1.076), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-4.535625273957654, 5.464374726042346), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-0.07498119283742025, 1.0770188071625797), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=742, sigma_y=0.012292196507103071, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.030476188866285954, unit=0.7090294872246506)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.03247756404926109, unit=0.8039356172193366)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.28, 1.28), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=452, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=742, sigma_y=0.012292196507103071, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.02835792516339454, 0.8283579251633946), n_g=277, sigma_y=0.024380951093028763, unit=0.5273773045472607)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.012292196507103071, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.03920000000000001, 0.9608000000000001), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(0.02835792516339454, 0.8283579251633946), n_g=277, sigma_y=0.030476188866285954, unit=0.47463957409253466)', 'Generator(mode=real, range=(-5.5846171056426845, 4.015382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.018043091138478386, unit=0.812056179009431)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)']
Gen 31: 7 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(0.4697620426194788), 2: np.float64(0.4697620426194788)}\nTree:  (((x78((x21)**(x9)))**(0.4697620426194788) * (sin(x67) / x21)) + 0.4697620426194788)', 'Equation constants: {0: np.float64(0.49984142362643924), 1: np.float64(0.49984142362643924), 2: np.float64(0.49984142362643924)}\nTree:  (((x90)**(0.49984142362643924) * (0.49984142362643924 / x21)) + 0.49984142362643924)', 'Equation constants: {2: np.float64(6.0235594616497465), 3: np.float64(6.0235594616497465), 4: np.float64(6.0235594616497465)}\nTree:  cos(+(cos(6.0235594616497465), 6.0235594616497465, cos(6.0235594616497465)))', 'Equation constants: {1: np.float64(9.77315900479796), 2: np.float64(9.77315900479796)}\nTree:  (cos((x32)**(9.77315900479796)) cos (9.77315900479796)**(x86))', 'Equation constants: {1: np.float64(-4.6145118347462475)}\nTree:  cos(cos((x32)**(-4.6145118347462475)))', 'Equation constants: {1: np.float64(4.580898281089063), 2: np.float64(4.580898281089063)}\nTree:  cos(((x32)**(4.580898281089063) cos sin(x35(/(x19, x21, cos(x40), sin(4.580898281089063))))))', 'Equation constants: {0: np.float64(0.5403376341727063), 1: np.float64(0.5403376341727063), 2: np.float64(0.5403376341727063)}\nTree:  +(((x78)**(0.5403376341727063) * (0.5403376341727063 / x21)), 0.5403376341727063, (x77 - x73))', 'Equation constants: {0: np.float64(-0.4806398204313897), 1: np.float64(-0.4806398204313897), 2: np.float64(-0.4806398204313897)}\nTree:  (((x19)**(-0.4806398204313897))**((-0.4806398204313897 / x21)) + -0.4806398204313897)', 'Equation constants: {1: np.float64(0.0018175490910036943)}\nTree:  sin(cos((x32)**(0.0018175490910036943)))', 'Equation constants: {0: np.float64(0.5403377088102994), 1: np.float64(0.5403377088102994), 2: np.float64(0.5403377088102994)}\nTree:  (((x78)**(0.5403377088102994) * (const((sin(x90) / x86)) / x21)) + 0.5403377088102994)', 'Equation constants: {0: np.float64(-0.47732156190909897), 2: np.float64(-0.47732156190909897)}\nTree:  (((x78)**(-0.47732156190909897) * (x40 / x21)) + -0.47732156190909897)', 'Equation constants: {1: np.float64(-1.5687788223710424), 2: np.float64(-1.5687788223710424), 3: np.float64(-1.5687788223710424)}\nTree:  (cos((((x57 / -1.5687788223710424) / -1.5687788223710424))**(-1.5687788223710424)) cos (x62)**(x86))', 'Equation constants: {0: np.float64(0.5400277816941943), 1: np.float64(0.5400277816941943), 2: np.float64(0.5400277816941943)}\nTree:  (((x78((x21)**(x9)))**(0.5400277816941943) * (0.5400277816941943 / x27)) + 0.5400277816941943)', 'Equation constants: {1: np.float64(-3.887287722218553e-06), 2: np.float64(-3.887287722218553e-06), 3: np.float64(-3.887287722218553e-06)}\nTree:  ((pow(x78, cos(-3.887287722218553e-06), (x75 / x33)) * (-3.887287722218553e-06 / x21)) + -3.887287722218553e-06)', 'Equation constants: {1: np.float64(-9.215090741716985), 2: np.float64(-9.215090741716985)}\nTree:  cos(((x32)**(-9.215090741716985) cos sin(x35((x19 / -9.215090741716985)))))', 'Equation constants: {0: np.float64(0.5403377047286522), 1: np.float64(0.5403377047286522), 2: np.float64(0.5403377047286522)}\nTree:  (((x78((x21)**(x9)))**(0.5403377047286522) * (0.5403377047286522 / x21)) + 0.5403377047286522)', 'Equation constants: {1: np.float64(-4.613589035519826)}\nTree:  cos(cos((x32)**(-4.613589035519826)))', 'Equation constants: {0: np.float64(0.5305135913749919), 1: np.float64(0.5305135913749919), 2: np.float64(0.5305135913749919)}\nTree:  (((x90)**(0.5305135913749919) * (0.5305135913749919 / x96)) + 0.5305135913749919)', 'Equation constants: {1: np.float64(-3.4136044632543054), 2: np.float64(-3.4136044632543054), 3: np.float64(-3.4136044632543054)}\nTree:  cos(cos((x32)**(-3.4136044632543054), sin(x35((x19 / -3.4136044632543054))), cos(-3.4136044632543054)))', 'Equation constants: {1: np.float64(-1.94618165724612), 2: np.float64(-1.94618165724612)}\nTree:  cos(((x32)**(-1.94618165724612) cos sin(((x19 / -1.94618165724612) x35 cos(x64)))))', 'Equation constants: {1: np.float64(2.0945217298748116), 2: np.float64(2.0945217298748116), 3: np.float64(2.0945217298748116)}\nTree:  cos(((x32)**(2.0945217298748116) cos sin(((x19 / const(cos(2.0945217298748116))) x35 cos(x64)))))', 'Equation constants: {1: np.float64(1.4511419566647739), 2: np.float64(1.4511419566647739)}\nTree:  cos(((x32)**(1.4511419566647739) cos (x35(/(x19, x21, cos(x40))) cos (x95 + 1.4511419566647739))))', 'Equation constants: {0: np.float64(0.5403376958211574), 1: np.float64(0.5403376958211574), 2: np.float64(0.5403376958211574)}\nTree:  (((x78)**(0.5403376958211574) * (0.5403376958211574 / x21)) + 0.5403376958211574)', 'Equation constants: {1: np.float64(-8.226154961997102)}\nTree:  cos(((x32)**(-8.226154961997102) cos sin(x35(/(x90, x21, cos(x40))))))', 'Equation constants: {0: np.float64(0.4697595351317294), 2: np.float64(0.4697595351317294)}\nTree:  (((x78((x21)**(x9)))**(0.4697595351317294) * (sin(x67) / x21)) + 0.4697595351317294)', 'Equation constants: {3: np.float64(0.4999999999999911)}\nTree:  0.4999999999999911', 'Equation constants: {0: np.float64(-0.4827576306153182), 1: np.float64(-0.4827576306153182), 2: np.float64(-0.4827576306153182)}\nTree:  (((x90)**(-0.4827576306153182))**((-0.4827576306153182 / x96)) + -0.4827576306153182)', 'Equation constants: {1: np.float64(-4.534894274468391), 2: np.float64(-4.534894274468391)}\nTree:  cos(((x32)**(-4.534894274468391) cos sin(x35(/(x19, x21((x75 + x47)), cos(x40), sin(-4.534894274468391))))))', 'Equation constants: {1: np.float64(-4.613507167045856)}\nTree:  cos(((x32)**(-4.613507167045856) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(-1.372559549176275), 2: np.float64(-1.372559549176275), 3: np.float64(-1.372559549176275)}\nTree:  cos(((x32(sin(-1.372559549176275)))**(-1.372559549176275) cos sin(((x19 / -1.372559549176275) x35 cos(x64)))))', 'Equation constants: {0: np.float64(0.4697594797707949), 2: np.float64(0.4697594797707949)}\nTree:  (((x78)**(0.4697594797707949) * (sin(x67) / x21)) + 0.4697594797707949)', 'Equation constants: {0: np.float64(0.5501488438161584), 1: np.float64(0.5501488438161584), 2: np.float64(0.5501488438161584)}\nTree:  (((x90)**(0.5501488438161584) * (0.5501488438161584 / x21)) + 0.5501488438161584)', 'Equation constants: {1: np.float64(-8.22628841354597)}\nTree:  cos(cos((x32)**(-8.22628841354597)))', 'Equation constants: {0: np.float64(0.5403376303957319), 1: np.float64(0.5403376303957319), 2: np.float64(0.5403376303957319)}\nTree:  (((x78)**(0.5403376303957319) * (0.5403376303957319 / x21)) + 0.5403376303957319)', 'Equation constants: {1: np.float64(-2.872248826779842), 2: np.float64(-2.872248826779842), 3: np.float64(-2.872248826779842)}\nTree:  cos(((x32(cos(-2.872248826779842)))**(-2.872248826779842) cos sin(((x19 / -2.872248826779842) x35 cos(x64)))))', 'Equation constants: {1: np.float64(-10.379081851190328)}\nTree:  cos(((x32)**(-10.379081851190328) cos sin(x35((x21 / cos(x40))))))', 'Equation constants: {1: np.float64(8.890197893114899e-05), 2: np.float64(8.890197893114899e-05), 3: np.float64(8.890197893114899e-05)}\nTree:  ((pow(x46, cos(8.890197893114899e-05), (x75 / x33)) * (8.890197893114899e-05 / x21)) + 8.890197893114899e-05)', 'Equation constants: {0: np.float64(-0.47732185707230207), 2: np.float64(-0.47732185707230207)}\nTree:  (((x78)**(-0.47732185707230207) * (x40 / x21)) + -0.47732185707230207)', 'Equation constants: {1: np.float64(-8.22590621904793)}\nTree:  cos(((x32)**(-8.22590621904793) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(5.235987794154627), 3: np.float64(5.235987794154627)}\nTree:  (5.235987794154627 cos (5.235987794154627)**(x86))']
MSE: [np.float64(0.29518559596291044), np.float64(0.25258906220311067), np.float64(0.2521612222031974), np.float64(0.5000020684528004), np.float64(0.8639462229687666), np.float64(2.6708599723374656e+17), np.float64(2633.8461671018936), np.float64(0.2533559634055085), np.float64(0.25000000000003114), np.float64(0.9528686133627163)]
Generators: ['Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-0.07600000000000001, 1.076), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-4.535625273957654, 5.464374726042346), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-0.07498119283742025, 1.0770188071625797), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=742, sigma_y=0.012292196507103071, unit=0.7720243617478257)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.030476188866285954, unit=0.7090294872246506)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.03247756404926109, unit=0.8039356172193366)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.28, 1.28), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=452, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=742, sigma_y=0.012292196507103071, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.02835792516339454, 0.8283579251633946), n_g=277, sigma_y=0.024380951093028763, unit=0.5273773045472607)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.012292196507103071, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.03920000000000001, 0.9608000000000001), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(0.02835792516339454, 0.8283579251633946), n_g=277, sigma_y=0.030476188866285954, unit=0.47463957409253466)', 'Generator(mode=real, range=(-5.5846171056426845, 4.015382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.018043091138478386, unit=0.812056179009431)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.5846171056426845, 4.015382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(0.03920000000000001, 0.9608000000000001), n_g=277, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.038973076859113304, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.024, 1.024), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(0.033148712183507914, 0.833148712183508), n_g=341, sigma_y=0.023405713049307615, unit=0.5327043480275361)']
Gen 32: 7 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.4806398204313897), 1: np.float64(-0.4806398204313897), 2: np.float64(-0.4806398204313897)}\nTree:  (((x19)**(-0.4806398204313897))**((-0.4806398204313897 / x21)) + -0.4806398204313897)', 'Equation constants: {1: np.float64(0.0018175490910036943)}\nTree:  sin(cos((x32)**(0.0018175490910036943)))', 'Equation constants: {0: np.float64(0.5403377088102994), 1: np.float64(0.5403377088102994), 2: np.float64(0.5403377088102994)}\nTree:  (((x78)**(0.5403377088102994) * (const((sin(x90) / x86)) / x21)) + 0.5403377088102994)', 'Equation constants: {0: np.float64(-0.47732156190909897), 2: np.float64(-0.47732156190909897)}\nTree:  (((x78)**(-0.47732156190909897) * (x40 / x21)) + -0.47732156190909897)', 'Equation constants: {1: np.float64(-1.5687788223710424), 2: np.float64(-1.5687788223710424), 3: np.float64(-1.5687788223710424)}\nTree:  (cos((((x57 / -1.5687788223710424) / -1.5687788223710424))**(-1.5687788223710424)) cos (x62)**(x86))', 'Equation constants: {0: np.float64(0.5400277816941943), 1: np.float64(0.5400277816941943), 2: np.float64(0.5400277816941943)}\nTree:  (((x78((x21)**(x9)))**(0.5400277816941943) * (0.5400277816941943 / x27)) + 0.5400277816941943)', 'Equation constants: {1: np.float64(-3.887287722218553e-06), 2: np.float64(-3.887287722218553e-06), 3: np.float64(-3.887287722218553e-06)}\nTree:  ((pow(x78, cos(-3.887287722218553e-06), (x75 / x33)) * (-3.887287722218553e-06 / x21)) + -3.887287722218553e-06)', 'Equation constants: {1: np.float64(-9.215090741716985), 2: np.float64(-9.215090741716985)}\nTree:  cos(((x32)**(-9.215090741716985) cos sin(x35((x19 / -9.215090741716985)))))', 'Equation constants: {0: np.float64(0.5403377047286522), 1: np.float64(0.5403377047286522), 2: np.float64(0.5403377047286522)}\nTree:  (((x78((x21)**(x9)))**(0.5403377047286522) * (0.5403377047286522 / x21)) + 0.5403377047286522)', 'Equation constants: {1: np.float64(-4.613589035519826)}\nTree:  cos(cos((x32)**(-4.613589035519826)))', 'Equation constants: {0: np.float64(0.5305135913749919), 1: np.float64(0.5305135913749919), 2: np.float64(0.5305135913749919)}\nTree:  (((x90)**(0.5305135913749919) * (0.5305135913749919 / x96)) + 0.5305135913749919)', 'Equation constants: {1: np.float64(-3.4136044632543054), 2: np.float64(-3.4136044632543054), 3: np.float64(-3.4136044632543054)}\nTree:  cos(cos((x32)**(-3.4136044632543054), sin(x35((x19 / -3.4136044632543054))), cos(-3.4136044632543054)))', 'Equation constants: {1: np.float64(-1.94618165724612), 2: np.float64(-1.94618165724612)}\nTree:  cos(((x32)**(-1.94618165724612) cos sin(((x19 / -1.94618165724612) x35 cos(x64)))))', 'Equation constants: {1: np.float64(2.0945217298748116), 2: np.float64(2.0945217298748116), 3: np.float64(2.0945217298748116)}\nTree:  cos(((x32)**(2.0945217298748116) cos sin(((x19 / const(cos(2.0945217298748116))) x35 cos(x64)))))', 'Equation constants: {1: np.float64(1.4511419566647739), 2: np.float64(1.4511419566647739)}\nTree:  cos(((x32)**(1.4511419566647739) cos (x35(/(x19, x21, cos(x40))) cos (x95 + 1.4511419566647739))))', 'Equation constants: {0: np.float64(0.5403376958211574), 1: np.float64(0.5403376958211574), 2: np.float64(0.5403376958211574)}\nTree:  (((x78)**(0.5403376958211574) * (0.5403376958211574 / x21)) + 0.5403376958211574)', 'Equation constants: {1: np.float64(-8.226154961997102)}\nTree:  cos(((x32)**(-8.226154961997102) cos sin(x35(/(x90, x21, cos(x40))))))', 'Equation constants: {0: np.float64(0.4697595351317294), 2: np.float64(0.4697595351317294)}\nTree:  (((x78((x21)**(x9)))**(0.4697595351317294) * (sin(x67) / x21)) + 0.4697595351317294)', 'Equation constants: {3: np.float64(0.4999999999999911)}\nTree:  0.4999999999999911', 'Equation constants: {0: np.float64(-0.4827576306153182), 1: np.float64(-0.4827576306153182), 2: np.float64(-0.4827576306153182)}\nTree:  (((x90)**(-0.4827576306153182))**((-0.4827576306153182 / x96)) + -0.4827576306153182)', 'Equation constants: {1: np.float64(-4.534894274468391), 2: np.float64(-4.534894274468391)}\nTree:  cos(((x32)**(-4.534894274468391) cos sin(x35(/(x19, x21((x75 + x47)), cos(x40), sin(-4.534894274468391))))))', 'Equation constants: {1: np.float64(-4.613507167045856)}\nTree:  cos(((x32)**(-4.613507167045856) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(-1.372559549176275), 2: np.float64(-1.372559549176275), 3: np.float64(-1.372559549176275)}\nTree:  cos(((x32(sin(-1.372559549176275)))**(-1.372559549176275) cos sin(((x19 / -1.372559549176275) x35 cos(x64)))))', 'Equation constants: {0: np.float64(0.4697594797707949), 2: np.float64(0.4697594797707949)}\nTree:  (((x78)**(0.4697594797707949) * (sin(x67) / x21)) + 0.4697594797707949)', 'Equation constants: {0: np.float64(0.5501488438161584), 1: np.float64(0.5501488438161584), 2: np.float64(0.5501488438161584)}\nTree:  (((x90)**(0.5501488438161584) * (0.5501488438161584 / x21)) + 0.5501488438161584)', 'Equation constants: {1: np.float64(-8.22628841354597)}\nTree:  cos(cos((x32)**(-8.22628841354597)))', 'Equation constants: {0: np.float64(0.5403376303957319), 1: np.float64(0.5403376303957319), 2: np.float64(0.5403376303957319)}\nTree:  (((x78)**(0.5403376303957319) * (0.5403376303957319 / x21)) + 0.5403376303957319)', 'Equation constants: {1: np.float64(-2.872248826779842), 2: np.float64(-2.872248826779842), 3: np.float64(-2.872248826779842)}\nTree:  cos(((x32(cos(-2.872248826779842)))**(-2.872248826779842) cos sin(((x19 / -2.872248826779842) x35 cos(x64)))))', 'Equation constants: {1: np.float64(-10.379081851190328)}\nTree:  cos(((x32)**(-10.379081851190328) cos sin(x35((x21 / cos(x40))))))', 'Equation constants: {1: np.float64(8.890197893114899e-05), 2: np.float64(8.890197893114899e-05), 3: np.float64(8.890197893114899e-05)}\nTree:  ((pow(x46, cos(8.890197893114899e-05), (x75 / x33)) * (8.890197893114899e-05 / x21)) + 8.890197893114899e-05)', 'Equation constants: {0: np.float64(-0.47732185707230207), 2: np.float64(-0.47732185707230207)}\nTree:  (((x78)**(-0.47732185707230207) * (x40 / x21)) + -0.47732185707230207)', 'Equation constants: {1: np.float64(-8.22590621904793)}\nTree:  cos(((x32)**(-8.22590621904793) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(5.235987794154627), 3: np.float64(5.235987794154627)}\nTree:  (5.235987794154627 cos (5.235987794154627)**(x86))', 'Equation constants: {1: np.float64(2.94789740993113), 2: np.float64(2.94789740993113), 3: np.float64(2.94789740993113)}\nTree:  cos(((x32)**(2.94789740993113) cos sin(((x19 / const(cos(2.94789740993113))) x35 cos(x64)))))', 'Equation constants: {2: np.float64(-1.668486084720417), 3: np.float64(-1.668486084720417), 4: np.float64(-1.668486084720417)}\nTree:  (-1.668486084720417 cos pow(-1.668486084720417, x86, (-1.668486084720417 + -1.668486084720417)))', 'Equation constants: {1: np.float64(-9.879414099968136), 2: np.float64(-9.879414099968136)}\nTree:  cos(((x32)**(-9.879414099968136) cos sin(((x19 / -9.879414099968136) x35 cos(x64)))))', 'Equation constants: {1: np.float64(7.400032721227788), 2: np.float64(7.400032721227788), 3: np.float64(7.400032721227788)}\nTree:  (cos((x32)**(7.400032721227788)) cos (7.400032721227788)**(x86((7.400032721227788 + x90))))', 'Equation constants: {1: np.float64(5.820429333053275), 2: np.float64(5.820429333053275), 3: np.float64(5.820429333053275)}\nTree:  (((x32)**(5.820429333053275) cos sin(x35(/(x19, x21((x75 + x47)), cos(x40), sin(5.820429333053275))))) cos sin(5.820429333053275))', 'Equation constants: {1: np.float64(2.46697953818596), 2: np.float64(2.46697953818596), 3: np.float64(2.46697953818596), 4: np.float64(2.46697953818596), 5: np.float64(2.46697953818596)}\nTree:  cos(((x32)**(2.46697953818596) cos sin(x35(/(x90, x21, cos((cos((x57)**(((2.46697953818596)**((x56)**(2.46697953818596)) / 2.46697953818596))) * cos(sin(sin((2.46697953818596 - sin(x98))))))))))))', 'Equation constants: {1: np.float64(-8.226281817151973)}\nTree:  cos(cos((x32)**(-8.226281817151973)))']
MSE: [np.float64(0.256779467860147), np.float64(0.28260589861574276), np.float64(64.94757161482148), np.float64(0.4287768349597843), np.float64(0.2978951544934317), np.float64(3009582424.733758), np.float64(0.30114446220810853), np.float64(0.25444043369800057), np.float64(1.181485687315963e+19), np.float64(0.253355963401929)]
Generators: ['Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.03247756404926109, unit=0.8039356172193366)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.28, 1.28), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=452, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=516, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-2, 2), n_g=742, sigma_y=0.012292196507103071, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.02835792516339454, 0.8283579251633946), n_g=277, sigma_y=0.024380951093028763, unit=0.5273773045472607)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.012292196507103071, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.03920000000000001, 0.9608000000000001), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(0.02835792516339454, 0.8283579251633946), n_g=277, sigma_y=0.030476188866285954, unit=0.47463957409253466)', 'Generator(mode=real, range=(-5.5846171056426845, 4.015382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.018043091138478386, unit=0.812056179009431)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.5846171056426845, 4.015382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(0.03920000000000001, 0.9608000000000001), n_g=277, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.038973076859113304, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.024, 1.024), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(0.033148712183507914, 0.833148712183508), n_g=341, sigma_y=0.023405713049307615, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.038973076859113304, unit=0.7235420554974029)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.030476188866285954, unit=0.7090294872246506)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(0.03920000000000001, 0.9608000000000001), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.03247756404926109, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9825879766014115)']
Gen 33: 6 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {1: np.float64(-3.887287722218553e-06), 2: np.float64(-3.887287722218553e-06), 3: np.float64(-3.887287722218553e-06)}\nTree:  ((pow(x78, cos(-3.887287722218553e-06), (x75 / x33)) * (-3.887287722218553e-06 / x21)) + -3.887287722218553e-06)', 'Equation constants: {1: np.float64(-9.215090741716985), 2: np.float64(-9.215090741716985)}\nTree:  cos(((x32)**(-9.215090741716985) cos sin(x35((x19 / -9.215090741716985)))))', 'Equation constants: {0: np.float64(0.5403377047286522), 1: np.float64(0.5403377047286522), 2: np.float64(0.5403377047286522)}\nTree:  (((x78((x21)**(x9)))**(0.5403377047286522) * (0.5403377047286522 / x21)) + 0.5403377047286522)', 'Equation constants: {1: np.float64(-4.613589035519826)}\nTree:  cos(cos((x32)**(-4.613589035519826)))', 'Equation constants: {0: np.float64(0.5305135913749919), 1: np.float64(0.5305135913749919), 2: np.float64(0.5305135913749919)}\nTree:  (((x90)**(0.5305135913749919) * (0.5305135913749919 / x96)) + 0.5305135913749919)', 'Equation constants: {1: np.float64(-3.4136044632543054), 2: np.float64(-3.4136044632543054), 3: np.float64(-3.4136044632543054)}\nTree:  cos(cos((x32)**(-3.4136044632543054), sin(x35((x19 / -3.4136044632543054))), cos(-3.4136044632543054)))', 'Equation constants: {1: np.float64(-1.94618165724612), 2: np.float64(-1.94618165724612)}\nTree:  cos(((x32)**(-1.94618165724612) cos sin(((x19 / -1.94618165724612) x35 cos(x64)))))', 'Equation constants: {1: np.float64(2.0945217298748116), 2: np.float64(2.0945217298748116), 3: np.float64(2.0945217298748116)}\nTree:  cos(((x32)**(2.0945217298748116) cos sin(((x19 / const(cos(2.0945217298748116))) x35 cos(x64)))))', 'Equation constants: {1: np.float64(1.4511419566647739), 2: np.float64(1.4511419566647739)}\nTree:  cos(((x32)**(1.4511419566647739) cos (x35(/(x19, x21, cos(x40))) cos (x95 + 1.4511419566647739))))', 'Equation constants: {0: np.float64(0.5403376958211574), 1: np.float64(0.5403376958211574), 2: np.float64(0.5403376958211574)}\nTree:  (((x78)**(0.5403376958211574) * (0.5403376958211574 / x21)) + 0.5403376958211574)', 'Equation constants: {1: np.float64(-8.226154961997102)}\nTree:  cos(((x32)**(-8.226154961997102) cos sin(x35(/(x90, x21, cos(x40))))))', 'Equation constants: {0: np.float64(0.4697595351317294), 2: np.float64(0.4697595351317294)}\nTree:  (((x78((x21)**(x9)))**(0.4697595351317294) * (sin(x67) / x21)) + 0.4697595351317294)', 'Equation constants: {3: np.float64(0.4999999999999911)}\nTree:  0.4999999999999911', 'Equation constants: {0: np.float64(-0.4827576306153182), 1: np.float64(-0.4827576306153182), 2: np.float64(-0.4827576306153182)}\nTree:  (((x90)**(-0.4827576306153182))**((-0.4827576306153182 / x96)) + -0.4827576306153182)', 'Equation constants: {1: np.float64(-4.534894274468391), 2: np.float64(-4.534894274468391)}\nTree:  cos(((x32)**(-4.534894274468391) cos sin(x35(/(x19, x21((x75 + x47)), cos(x40), sin(-4.534894274468391))))))', 'Equation constants: {1: np.float64(-4.613507167045856)}\nTree:  cos(((x32)**(-4.613507167045856) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(-1.372559549176275), 2: np.float64(-1.372559549176275), 3: np.float64(-1.372559549176275)}\nTree:  cos(((x32(sin(-1.372559549176275)))**(-1.372559549176275) cos sin(((x19 / -1.372559549176275) x35 cos(x64)))))', 'Equation constants: {0: np.float64(0.4697594797707949), 2: np.float64(0.4697594797707949)}\nTree:  (((x78)**(0.4697594797707949) * (sin(x67) / x21)) + 0.4697594797707949)', 'Equation constants: {0: np.float64(0.5501488438161584), 1: np.float64(0.5501488438161584), 2: np.float64(0.5501488438161584)}\nTree:  (((x90)**(0.5501488438161584) * (0.5501488438161584 / x21)) + 0.5501488438161584)', 'Equation constants: {1: np.float64(-8.22628841354597)}\nTree:  cos(cos((x32)**(-8.22628841354597)))', 'Equation constants: {0: np.float64(0.5403376303957319), 1: np.float64(0.5403376303957319), 2: np.float64(0.5403376303957319)}\nTree:  (((x78)**(0.5403376303957319) * (0.5403376303957319 / x21)) + 0.5403376303957319)', 'Equation constants: {1: np.float64(-2.872248826779842), 2: np.float64(-2.872248826779842), 3: np.float64(-2.872248826779842)}\nTree:  cos(((x32(cos(-2.872248826779842)))**(-2.872248826779842) cos sin(((x19 / -2.872248826779842) x35 cos(x64)))))', 'Equation constants: {1: np.float64(-10.379081851190328)}\nTree:  cos(((x32)**(-10.379081851190328) cos sin(x35((x21 / cos(x40))))))', 'Equation constants: {1: np.float64(8.890197893114899e-05), 2: np.float64(8.890197893114899e-05), 3: np.float64(8.890197893114899e-05)}\nTree:  ((pow(x46, cos(8.890197893114899e-05), (x75 / x33)) * (8.890197893114899e-05 / x21)) + 8.890197893114899e-05)', 'Equation constants: {0: np.float64(-0.47732185707230207), 2: np.float64(-0.47732185707230207)}\nTree:  (((x78)**(-0.47732185707230207) * (x40 / x21)) + -0.47732185707230207)', 'Equation constants: {1: np.float64(-8.22590621904793)}\nTree:  cos(((x32)**(-8.22590621904793) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(5.235987794154627), 3: np.float64(5.235987794154627)}\nTree:  (5.235987794154627 cos (5.235987794154627)**(x86))', 'Equation constants: {1: np.float64(2.94789740993113), 2: np.float64(2.94789740993113), 3: np.float64(2.94789740993113)}\nTree:  cos(((x32)**(2.94789740993113) cos sin(((x19 / const(cos(2.94789740993113))) x35 cos(x64)))))', 'Equation constants: {2: np.float64(-1.668486084720417), 3: np.float64(-1.668486084720417), 4: np.float64(-1.668486084720417)}\nTree:  (-1.668486084720417 cos pow(-1.668486084720417, x86, (-1.668486084720417 + -1.668486084720417)))', 'Equation constants: {1: np.float64(-9.879414099968136), 2: np.float64(-9.879414099968136)}\nTree:  cos(((x32)**(-9.879414099968136) cos sin(((x19 / -9.879414099968136) x35 cos(x64)))))', 'Equation constants: {1: np.float64(7.400032721227788), 2: np.float64(7.400032721227788), 3: np.float64(7.400032721227788)}\nTree:  (cos((x32)**(7.400032721227788)) cos (7.400032721227788)**(x86((7.400032721227788 + x90))))', 'Equation constants: {1: np.float64(5.820429333053275), 2: np.float64(5.820429333053275), 3: np.float64(5.820429333053275)}\nTree:  (((x32)**(5.820429333053275) cos sin(x35(/(x19, x21((x75 + x47)), cos(x40), sin(5.820429333053275))))) cos sin(5.820429333053275))', 'Equation constants: {1: np.float64(2.46697953818596), 2: np.float64(2.46697953818596), 3: np.float64(2.46697953818596), 4: np.float64(2.46697953818596), 5: np.float64(2.46697953818596)}\nTree:  cos(((x32)**(2.46697953818596) cos sin(x35(/(x90, x21, cos((cos((x57)**(((2.46697953818596)**((x56)**(2.46697953818596)) / 2.46697953818596))) * cos(sin(sin((2.46697953818596 - sin(x98))))))))))))', 'Equation constants: {1: np.float64(-8.226281817151973)}\nTree:  cos(cos((x32)**(-8.226281817151973)))', 'Equation constants: {0: np.float64(0.4725450099205554), 2: np.float64(0.4725450099205554)}\nTree:  (((x78((x21)**(x9)))**(0.4725450099205554) * (sin(x77) / x21)) + 0.4725450099205554)', 'Equation constants: {0: np.float64(0.5403376614546088), 1: np.float64(0.5403376614546088), 2: np.float64(0.5403376614546088)}\nTree:  (((x78)**(0.5403376614546088) * (0.5403376614546088 / x21)) + 0.5403376614546088)', 'Equation constants: {1: np.float64(-5.170212629318316), 2: np.float64(-5.170212629318316)}\nTree:  cos(((x32)**(-5.170212629318316) cos sin(x35(/(x19, x21((x75 + x47)), cos(x40), sin(-5.170212629318316))))))', 'Equation constants: {0: np.float64(0.46976208766116767), 2: np.float64(0.46976208766116767)}\nTree:  (((x78((x21)**(x9)))**(0.46976208766116767) * (sin(x67) / x21)) + 0.46976208766116767)', 'Equation constants: {1: np.float64(5.161100847090781), 3: np.float64(5.161100847090781)}\nTree:  cos(((x32)**(5.161100847090781) cos 5.161100847090781))', 'Equation constants: {2: np.float64(-9.942132481147555), 4: np.float64(-9.942132481147555)}\nTree:  cos(pow(-9.942132481147555, x86, (-9.942132481147555 + -9.942132481147555)))']
MSE: [np.float64(0.3089601085951043), np.float64(0.2951855941666299), np.float64(0.32105696058862665), np.float64(24.24716498590498), np.float64(0.3067534480688883), np.float64(105.98119554550776), np.float64(0.4163236901911145), np.float64(1.8123330378818054), np.float64(1.3180309244157292e+34), np.float64(4.031473967354478e+32)]
Generators: ['Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.012292196507103071, unit=0.7720243617478257)', 'Generator(mode=real, range=(0.03920000000000001, 0.9608000000000001), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.025396824055238295, unit=0.5801150350019868)', 'Generator(mode=real, range=(0.02835792516339454, 0.8283579251633946), n_g=277, sigma_y=0.030476188866285954, unit=0.47463957409253466)', 'Generator(mode=real, range=(-5.5846171056426845, 4.015382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.018043091138478386, unit=0.812056179009431)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.5846171056426845, 4.015382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(0.03920000000000001, 0.9608000000000001), n_g=277, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.038973076859113304, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.024, 1.024), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(0.033148712183507914, 0.833148712183508), n_g=341, sigma_y=0.023405713049307615, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.038973076859113304, unit=0.7235420554974029)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.030476188866285954, unit=0.7090294872246506)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(0.03920000000000001, 0.9608000000000001), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.03247756404926109, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9825879766014115)', 'Generator(mode=real, range=(-1.024, 1.024), n_g=806, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.009833757205682457, unit=0.7720243617478257)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=516, sigma_y=0.02255386392309798, unit=0.9925131076781933)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.5846171056426845, 4.015382894357315), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9825879766014115)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=484, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)']
Gen 34: 7 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {1: np.float64(2.0945217298748116), 2: np.float64(2.0945217298748116), 3: np.float64(2.0945217298748116)}\nTree:  cos(((x32)**(2.0945217298748116) cos sin(((x19 / const(cos(2.0945217298748116))) x35 cos(x64)))))', 'Equation constants: {1: np.float64(1.4511419566647739), 2: np.float64(1.4511419566647739)}\nTree:  cos(((x32)**(1.4511419566647739) cos (x35(/(x19, x21, cos(x40))) cos (x95 + 1.4511419566647739))))', 'Equation constants: {0: np.float64(0.5403376958211574), 1: np.float64(0.5403376958211574), 2: np.float64(0.5403376958211574)}\nTree:  (((x78)**(0.5403376958211574) * (0.5403376958211574 / x21)) + 0.5403376958211574)', 'Equation constants: {1: np.float64(-8.226154961997102)}\nTree:  cos(((x32)**(-8.226154961997102) cos sin(x35(/(x90, x21, cos(x40))))))', 'Equation constants: {0: np.float64(0.4697595351317294), 2: np.float64(0.4697595351317294)}\nTree:  (((x78((x21)**(x9)))**(0.4697595351317294) * (sin(x67) / x21)) + 0.4697595351317294)', 'Equation constants: {3: np.float64(0.4999999999999911)}\nTree:  0.4999999999999911', 'Equation constants: {0: np.float64(-0.4827576306153182), 1: np.float64(-0.4827576306153182), 2: np.float64(-0.4827576306153182)}\nTree:  (((x90)**(-0.4827576306153182))**((-0.4827576306153182 / x96)) + -0.4827576306153182)', 'Equation constants: {1: np.float64(-4.534894274468391), 2: np.float64(-4.534894274468391)}\nTree:  cos(((x32)**(-4.534894274468391) cos sin(x35(/(x19, x21((x75 + x47)), cos(x40), sin(-4.534894274468391))))))', 'Equation constants: {1: np.float64(-4.613507167045856)}\nTree:  cos(((x32)**(-4.613507167045856) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(-1.372559549176275), 2: np.float64(-1.372559549176275), 3: np.float64(-1.372559549176275)}\nTree:  cos(((x32(sin(-1.372559549176275)))**(-1.372559549176275) cos sin(((x19 / -1.372559549176275) x35 cos(x64)))))', 'Equation constants: {0: np.float64(0.4697594797707949), 2: np.float64(0.4697594797707949)}\nTree:  (((x78)**(0.4697594797707949) * (sin(x67) / x21)) + 0.4697594797707949)', 'Equation constants: {0: np.float64(0.5501488438161584), 1: np.float64(0.5501488438161584), 2: np.float64(0.5501488438161584)}\nTree:  (((x90)**(0.5501488438161584) * (0.5501488438161584 / x21)) + 0.5501488438161584)', 'Equation constants: {1: np.float64(-8.22628841354597)}\nTree:  cos(cos((x32)**(-8.22628841354597)))', 'Equation constants: {0: np.float64(0.5403376303957319), 1: np.float64(0.5403376303957319), 2: np.float64(0.5403376303957319)}\nTree:  (((x78)**(0.5403376303957319) * (0.5403376303957319 / x21)) + 0.5403376303957319)', 'Equation constants: {1: np.float64(-2.872248826779842), 2: np.float64(-2.872248826779842), 3: np.float64(-2.872248826779842)}\nTree:  cos(((x32(cos(-2.872248826779842)))**(-2.872248826779842) cos sin(((x19 / -2.872248826779842) x35 cos(x64)))))', 'Equation constants: {1: np.float64(-10.379081851190328)}\nTree:  cos(((x32)**(-10.379081851190328) cos sin(x35((x21 / cos(x40))))))', 'Equation constants: {1: np.float64(8.890197893114899e-05), 2: np.float64(8.890197893114899e-05), 3: np.float64(8.890197893114899e-05)}\nTree:  ((pow(x46, cos(8.890197893114899e-05), (x75 / x33)) * (8.890197893114899e-05 / x21)) + 8.890197893114899e-05)', 'Equation constants: {0: np.float64(-0.47732185707230207), 2: np.float64(-0.47732185707230207)}\nTree:  (((x78)**(-0.47732185707230207) * (x40 / x21)) + -0.47732185707230207)', 'Equation constants: {1: np.float64(-8.22590621904793)}\nTree:  cos(((x32)**(-8.22590621904793) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(5.235987794154627), 3: np.float64(5.235987794154627)}\nTree:  (5.235987794154627 cos (5.235987794154627)**(x86))', 'Equation constants: {1: np.float64(2.94789740993113), 2: np.float64(2.94789740993113), 3: np.float64(2.94789740993113)}\nTree:  cos(((x32)**(2.94789740993113) cos sin(((x19 / const(cos(2.94789740993113))) x35 cos(x64)))))', 'Equation constants: {2: np.float64(-1.668486084720417), 3: np.float64(-1.668486084720417), 4: np.float64(-1.668486084720417)}\nTree:  (-1.668486084720417 cos pow(-1.668486084720417, x86, (-1.668486084720417 + -1.668486084720417)))', 'Equation constants: {1: np.float64(-9.879414099968136), 2: np.float64(-9.879414099968136)}\nTree:  cos(((x32)**(-9.879414099968136) cos sin(((x19 / -9.879414099968136) x35 cos(x64)))))', 'Equation constants: {1: np.float64(7.400032721227788), 2: np.float64(7.400032721227788), 3: np.float64(7.400032721227788)}\nTree:  (cos((x32)**(7.400032721227788)) cos (7.400032721227788)**(x86((7.400032721227788 + x90))))', 'Equation constants: {1: np.float64(5.820429333053275), 2: np.float64(5.820429333053275), 3: np.float64(5.820429333053275)}\nTree:  (((x32)**(5.820429333053275) cos sin(x35(/(x19, x21((x75 + x47)), cos(x40), sin(5.820429333053275))))) cos sin(5.820429333053275))', 'Equation constants: {1: np.float64(2.46697953818596), 2: np.float64(2.46697953818596), 3: np.float64(2.46697953818596), 4: np.float64(2.46697953818596), 5: np.float64(2.46697953818596)}\nTree:  cos(((x32)**(2.46697953818596) cos sin(x35(/(x90, x21, cos((cos((x57)**(((2.46697953818596)**((x56)**(2.46697953818596)) / 2.46697953818596))) * cos(sin(sin((2.46697953818596 - sin(x98))))))))))))', 'Equation constants: {1: np.float64(-8.226281817151973)}\nTree:  cos(cos((x32)**(-8.226281817151973)))', 'Equation constants: {0: np.float64(0.4725450099205554), 2: np.float64(0.4725450099205554)}\nTree:  (((x78((x21)**(x9)))**(0.4725450099205554) * (sin(x77) / x21)) + 0.4725450099205554)', 'Equation constants: {0: np.float64(0.5403376614546088), 1: np.float64(0.5403376614546088), 2: np.float64(0.5403376614546088)}\nTree:  (((x78)**(0.5403376614546088) * (0.5403376614546088 / x21)) + 0.5403376614546088)', 'Equation constants: {1: np.float64(-5.170212629318316), 2: np.float64(-5.170212629318316)}\nTree:  cos(((x32)**(-5.170212629318316) cos sin(x35(/(x19, x21((x75 + x47)), cos(x40), sin(-5.170212629318316))))))', 'Equation constants: {0: np.float64(0.46976208766116767), 2: np.float64(0.46976208766116767)}\nTree:  (((x78((x21)**(x9)))**(0.46976208766116767) * (sin(x67) / x21)) + 0.46976208766116767)', 'Equation constants: {1: np.float64(5.161100847090781), 3: np.float64(5.161100847090781)}\nTree:  cos(((x32)**(5.161100847090781) cos 5.161100847090781))', 'Equation constants: {2: np.float64(-9.942132481147555), 4: np.float64(-9.942132481147555)}\nTree:  cos(pow(-9.942132481147555, x86, (-9.942132481147555 + -9.942132481147555)))', 'Equation constants: {1: np.float64(-4.613974584124825)}\nTree:  cos(((x32)**(-4.613974584124825) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(-2.6495102661640164)}\nTree:  cos((-2.6495102661640164)**(x86))', 'Equation constants: {0: np.float64(0.4697593767658667), 2: np.float64(0.4697593767658667)}\nTree:  +(((x78)**(0.4697593767658667) * (sin(x67) / x21)), 0.4697593767658667, cos(x86))', 'Equation constants: {1: np.float64(-4.613823561581804)}\nTree:  cos(cos((x32)**(-4.613823561581804)))', 'Equation constants: {1: np.float64(-4.764742152672188), 2: np.float64(-4.764742152672188), 3: np.float64(-4.764742152672188)}\nTree:  cos(((x32(sin(-4.764742152672188)))**(-4.764742152672188) cos sin(((x19 / -4.764742152672188) x35 cos(x64)))))', 'Equation constants: {1: np.float64(-7.478449059444456), 2: np.float64(-7.478449059444456), 3: np.float64(-7.478449059444456)}\nTree:  cos(((x32)**(-7.478449059444456) cos sin(((x19 / const(cos(-7.478449059444456))) x35 cos(x39)))))', 'Equation constants: {1: np.float64(-12.05778215864354)}\nTree:  cos(((x32)**(-12.05778215864354) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))']
MSE: [np.float64(0.28972408317211573), np.float64(37759.17063058459), np.float64(0.29571382495453574), np.float64(0.30675377821717636), np.float64(0.25335596339398575), np.float64(201999919898.6175), np.float64(0.4257006794962554), np.float64(0.32667943215270795), np.float64(0.2525872185322363), np.float64(4.112291169979195e+38)]
Generators: ['Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.5846171056426845, 4.015382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(0.03920000000000001, 0.9608000000000001), n_g=277, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.038973076859113304, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.024, 1.024), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(0.033148712183507914, 0.833148712183508), n_g=341, sigma_y=0.023405713049307615, unit=0.5327043480275361)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.038973076859113304, unit=0.7235420554974029)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.030476188866285954, unit=0.7090294872246506)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(0.03920000000000001, 0.9608000000000001), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.03247756404926109, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9825879766014115)', 'Generator(mode=real, range=(-1.024, 1.024), n_g=806, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.009833757205682457, unit=0.7720243617478257)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=516, sigma_y=0.02255386392309798, unit=0.9925131076781933)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.5846171056426845, 4.015382894357315), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9825879766014115)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=484, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.038345728286277, 4.961654271713723), n_g=548, sigma_y=0.038973076859113304, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(0.03920000000000001, 0.9608000000000001), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.9825879766014115)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=774, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.024, 1.024), n_g=806, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.5446171056426845, 4.975382894357315), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)']
Gen 35: 10 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(0.4697594797707949), 2: np.float64(0.4697594797707949)}\nTree:  (((x78)**(0.4697594797707949) * (sin(x67) / x21)) + 0.4697594797707949)', 'Equation constants: {0: np.float64(0.5501488438161584), 1: np.float64(0.5501488438161584), 2: np.float64(0.5501488438161584)}\nTree:  (((x90)**(0.5501488438161584) * (0.5501488438161584 / x21)) + 0.5501488438161584)', 'Equation constants: {1: np.float64(-8.22628841354597)}\nTree:  cos(cos((x32)**(-8.22628841354597)))', 'Equation constants: {0: np.float64(0.5403376303957319), 1: np.float64(0.5403376303957319), 2: np.float64(0.5403376303957319)}\nTree:  (((x78)**(0.5403376303957319) * (0.5403376303957319 / x21)) + 0.5403376303957319)', 'Equation constants: {1: np.float64(-2.872248826779842), 2: np.float64(-2.872248826779842), 3: np.float64(-2.872248826779842)}\nTree:  cos(((x32(cos(-2.872248826779842)))**(-2.872248826779842) cos sin(((x19 / -2.872248826779842) x35 cos(x64)))))', 'Equation constants: {1: np.float64(-10.379081851190328)}\nTree:  cos(((x32)**(-10.379081851190328) cos sin(x35((x21 / cos(x40))))))', 'Equation constants: {1: np.float64(8.890197893114899e-05), 2: np.float64(8.890197893114899e-05), 3: np.float64(8.890197893114899e-05)}\nTree:  ((pow(x46, cos(8.890197893114899e-05), (x75 / x33)) * (8.890197893114899e-05 / x21)) + 8.890197893114899e-05)', 'Equation constants: {0: np.float64(-0.47732185707230207), 2: np.float64(-0.47732185707230207)}\nTree:  (((x78)**(-0.47732185707230207) * (x40 / x21)) + -0.47732185707230207)', 'Equation constants: {1: np.float64(-8.22590621904793)}\nTree:  cos(((x32)**(-8.22590621904793) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(5.235987794154627), 3: np.float64(5.235987794154627)}\nTree:  (5.235987794154627 cos (5.235987794154627)**(x86))', 'Equation constants: {1: np.float64(2.94789740993113), 2: np.float64(2.94789740993113), 3: np.float64(2.94789740993113)}\nTree:  cos(((x32)**(2.94789740993113) cos sin(((x19 / const(cos(2.94789740993113))) x35 cos(x64)))))', 'Equation constants: {2: np.float64(-1.668486084720417), 3: np.float64(-1.668486084720417), 4: np.float64(-1.668486084720417)}\nTree:  (-1.668486084720417 cos pow(-1.668486084720417, x86, (-1.668486084720417 + -1.668486084720417)))', 'Equation constants: {1: np.float64(-9.879414099968136), 2: np.float64(-9.879414099968136)}\nTree:  cos(((x32)**(-9.879414099968136) cos sin(((x19 / -9.879414099968136) x35 cos(x64)))))', 'Equation constants: {1: np.float64(7.400032721227788), 2: np.float64(7.400032721227788), 3: np.float64(7.400032721227788)}\nTree:  (cos((x32)**(7.400032721227788)) cos (7.400032721227788)**(x86((7.400032721227788 + x90))))', 'Equation constants: {1: np.float64(5.820429333053275), 2: np.float64(5.820429333053275), 3: np.float64(5.820429333053275)}\nTree:  (((x32)**(5.820429333053275) cos sin(x35(/(x19, x21((x75 + x47)), cos(x40), sin(5.820429333053275))))) cos sin(5.820429333053275))', 'Equation constants: {1: np.float64(2.46697953818596), 2: np.float64(2.46697953818596), 3: np.float64(2.46697953818596), 4: np.float64(2.46697953818596), 5: np.float64(2.46697953818596)}\nTree:  cos(((x32)**(2.46697953818596) cos sin(x35(/(x90, x21, cos((cos((x57)**(((2.46697953818596)**((x56)**(2.46697953818596)) / 2.46697953818596))) * cos(sin(sin((2.46697953818596 - sin(x98))))))))))))', 'Equation constants: {1: np.float64(-8.226281817151973)}\nTree:  cos(cos((x32)**(-8.226281817151973)))', 'Equation constants: {0: np.float64(0.4725450099205554), 2: np.float64(0.4725450099205554)}\nTree:  (((x78((x21)**(x9)))**(0.4725450099205554) * (sin(x77) / x21)) + 0.4725450099205554)', 'Equation constants: {0: np.float64(0.5403376614546088), 1: np.float64(0.5403376614546088), 2: np.float64(0.5403376614546088)}\nTree:  (((x78)**(0.5403376614546088) * (0.5403376614546088 / x21)) + 0.5403376614546088)', 'Equation constants: {1: np.float64(-5.170212629318316), 2: np.float64(-5.170212629318316)}\nTree:  cos(((x32)**(-5.170212629318316) cos sin(x35(/(x19, x21((x75 + x47)), cos(x40), sin(-5.170212629318316))))))', 'Equation constants: {0: np.float64(0.46976208766116767), 2: np.float64(0.46976208766116767)}\nTree:  (((x78((x21)**(x9)))**(0.46976208766116767) * (sin(x67) / x21)) + 0.46976208766116767)', 'Equation constants: {1: np.float64(5.161100847090781), 3: np.float64(5.161100847090781)}\nTree:  cos(((x32)**(5.161100847090781) cos 5.161100847090781))', 'Equation constants: {2: np.float64(-9.942132481147555), 4: np.float64(-9.942132481147555)}\nTree:  cos(pow(-9.942132481147555, x86, (-9.942132481147555 + -9.942132481147555)))', 'Equation constants: {1: np.float64(-4.613974584124825)}\nTree:  cos(((x32)**(-4.613974584124825) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(-2.6495102661640164)}\nTree:  cos((-2.6495102661640164)**(x86))', 'Equation constants: {0: np.float64(0.4697593767658667), 2: np.float64(0.4697593767658667)}\nTree:  +(((x78)**(0.4697593767658667) * (sin(x67) / x21)), 0.4697593767658667, cos(x86))', 'Equation constants: {1: np.float64(-4.613823561581804)}\nTree:  cos(cos((x32)**(-4.613823561581804)))', 'Equation constants: {1: np.float64(-4.764742152672188), 2: np.float64(-4.764742152672188), 3: np.float64(-4.764742152672188)}\nTree:  cos(((x32(sin(-4.764742152672188)))**(-4.764742152672188) cos sin(((x19 / -4.764742152672188) x35 cos(x64)))))', 'Equation constants: {1: np.float64(-7.478449059444456), 2: np.float64(-7.478449059444456), 3: np.float64(-7.478449059444456)}\nTree:  cos(((x32)**(-7.478449059444456) cos sin(((x19 / const(cos(-7.478449059444456))) x35 cos(x39)))))', 'Equation constants: {1: np.float64(-12.05778215864354)}\nTree:  cos(((x32)**(-12.05778215864354) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(-4.992241399459155e-07), 3: np.float64(-4.992241399459155e-07), 4: np.float64(-4.992241399459155e-07), 5: np.float64(-4.992241399459155e-07)}\nTree:  (((sin(((sin(((-4.992241399459155e-07 / x31) - cos(x65))))**(x91) / -4.992241399459155e-07)) - x1) * -4.992241399459155e-07) + -4.992241399459155e-07)', 'Equation constants: {1: np.float64(-4.6144612412752615)}\nTree:  cos(((x32)**(-4.6144612412752615) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {0: np.float64(0.5403377067397495), 1: np.float64(0.5403377067397495), 2: np.float64(0.5403377067397495)}\nTree:  (((x78)**(0.5403377067397495) * (0.5403377067397495 / x21)) + 0.5403377067397495)', 'Equation constants: {2: np.float64(1.004199721734495)}\nTree:  cos(pow(1.004199721734495, x86, sin((x9 / x82))))', 'Equation constants: {1: np.float64(-10.108020208956123)}\nTree:  cos(((x32)**(-10.108020208956123) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(-1.3485128022119168)}\nTree:  cos((-1.3485128022119168)**(x86))', 'Equation constants: {1: np.float64(-10.378981162820121)}\nTree:  cos(((x32)**(-10.378981162820121) cos sin(x35)))', 'Equation constants: {3: np.float64(0.5000000000000013)}\nTree:  0.5000000000000013', 'Equation constants: {1: np.float64(-0.0003517750429383427), 2: np.float64(-0.0003517750429383427), 3: np.float64(-0.0003517750429383427)}\nTree:  ((pow(x46, cos(-0.0003517750429383427), (x75 / x33)) * (-0.0003517750429383427 / x21)) + -0.0003517750429383427)', 'Equation constants: {3: np.float64(0.5000000000000011)}\nTree:  0.5000000000000011']
MSE: [np.float64(0.49587153198917344), np.float64(0.25258721857927563), np.float64(0.29518560164948826), np.float64(0.2951314292741976), np.float64(0.25258721862631733), np.float64(0.30911950654334613), np.float64(0.4341013538034999), np.float64(0.2533559634266382), np.float64(0.25), np.float64(87.97758728603328), np.float64(405.4416039235091), np.float64(0.25)]
Generators: ['Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.038973076859113304, unit=0.7235420554974029)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.030476188866285954, unit=0.7090294872246506)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(0.03920000000000001, 0.9608000000000001), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.03247756404926109, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9825879766014115)', 'Generator(mode=real, range=(-1.024, 1.024), n_g=806, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.009833757205682457, unit=0.7720243617478257)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=516, sigma_y=0.02255386392309798, unit=0.9925131076781933)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.5846171056426845, 4.015382894357315), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9825879766014115)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=484, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.038345728286277, 4.961654271713723), n_g=548, sigma_y=0.038973076859113304, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(0.03920000000000001, 0.9608000000000001), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.9825879766014115)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=774, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.024, 1.024), n_g=806, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.5446171056426845, 4.975382894357315), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.038973076859113304, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.9341494777148692)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9825879766014115)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)']
Gen 36: 7 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(-0.47732185707230207), 2: np.float64(-0.47732185707230207)}\nTree:  (((x78)**(-0.47732185707230207) * (x40 / x21)) + -0.47732185707230207)', 'Equation constants: {1: np.float64(-8.22590621904793)}\nTree:  cos(((x32)**(-8.22590621904793) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(5.235987794154627), 3: np.float64(5.235987794154627)}\nTree:  (5.235987794154627 cos (5.235987794154627)**(x86))', 'Equation constants: {1: np.float64(2.94789740993113), 2: np.float64(2.94789740993113), 3: np.float64(2.94789740993113)}\nTree:  cos(((x32)**(2.94789740993113) cos sin(((x19 / const(cos(2.94789740993113))) x35 cos(x64)))))', 'Equation constants: {2: np.float64(-1.668486084720417), 3: np.float64(-1.668486084720417), 4: np.float64(-1.668486084720417)}\nTree:  (-1.668486084720417 cos pow(-1.668486084720417, x86, (-1.668486084720417 + -1.668486084720417)))', 'Equation constants: {1: np.float64(-9.879414099968136), 2: np.float64(-9.879414099968136)}\nTree:  cos(((x32)**(-9.879414099968136) cos sin(((x19 / -9.879414099968136) x35 cos(x64)))))', 'Equation constants: {1: np.float64(7.400032721227788), 2: np.float64(7.400032721227788), 3: np.float64(7.400032721227788)}\nTree:  (cos((x32)**(7.400032721227788)) cos (7.400032721227788)**(x86((7.400032721227788 + x90))))', 'Equation constants: {1: np.float64(5.820429333053275), 2: np.float64(5.820429333053275), 3: np.float64(5.820429333053275)}\nTree:  (((x32)**(5.820429333053275) cos sin(x35(/(x19, x21((x75 + x47)), cos(x40), sin(5.820429333053275))))) cos sin(5.820429333053275))', 'Equation constants: {1: np.float64(2.46697953818596), 2: np.float64(2.46697953818596), 3: np.float64(2.46697953818596), 4: np.float64(2.46697953818596), 5: np.float64(2.46697953818596)}\nTree:  cos(((x32)**(2.46697953818596) cos sin(x35(/(x90, x21, cos((cos((x57)**(((2.46697953818596)**((x56)**(2.46697953818596)) / 2.46697953818596))) * cos(sin(sin((2.46697953818596 - sin(x98))))))))))))', 'Equation constants: {1: np.float64(-8.226281817151973)}\nTree:  cos(cos((x32)**(-8.226281817151973)))', 'Equation constants: {0: np.float64(0.4725450099205554), 2: np.float64(0.4725450099205554)}\nTree:  (((x78((x21)**(x9)))**(0.4725450099205554) * (sin(x77) / x21)) + 0.4725450099205554)', 'Equation constants: {0: np.float64(0.5403376614546088), 1: np.float64(0.5403376614546088), 2: np.float64(0.5403376614546088)}\nTree:  (((x78)**(0.5403376614546088) * (0.5403376614546088 / x21)) + 0.5403376614546088)', 'Equation constants: {1: np.float64(-5.170212629318316), 2: np.float64(-5.170212629318316)}\nTree:  cos(((x32)**(-5.170212629318316) cos sin(x35(/(x19, x21((x75 + x47)), cos(x40), sin(-5.170212629318316))))))', 'Equation constants: {0: np.float64(0.46976208766116767), 2: np.float64(0.46976208766116767)}\nTree:  (((x78((x21)**(x9)))**(0.46976208766116767) * (sin(x67) / x21)) + 0.46976208766116767)', 'Equation constants: {1: np.float64(5.161100847090781), 3: np.float64(5.161100847090781)}\nTree:  cos(((x32)**(5.161100847090781) cos 5.161100847090781))', 'Equation constants: {2: np.float64(-9.942132481147555), 4: np.float64(-9.942132481147555)}\nTree:  cos(pow(-9.942132481147555, x86, (-9.942132481147555 + -9.942132481147555)))', 'Equation constants: {1: np.float64(-4.613974584124825)}\nTree:  cos(((x32)**(-4.613974584124825) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(-2.6495102661640164)}\nTree:  cos((-2.6495102661640164)**(x86))', 'Equation constants: {0: np.float64(0.4697593767658667), 2: np.float64(0.4697593767658667)}\nTree:  +(((x78)**(0.4697593767658667) * (sin(x67) / x21)), 0.4697593767658667, cos(x86))', 'Equation constants: {1: np.float64(-4.613823561581804)}\nTree:  cos(cos((x32)**(-4.613823561581804)))', 'Equation constants: {1: np.float64(-4.764742152672188), 2: np.float64(-4.764742152672188), 3: np.float64(-4.764742152672188)}\nTree:  cos(((x32(sin(-4.764742152672188)))**(-4.764742152672188) cos sin(((x19 / -4.764742152672188) x35 cos(x64)))))', 'Equation constants: {1: np.float64(-7.478449059444456), 2: np.float64(-7.478449059444456), 3: np.float64(-7.478449059444456)}\nTree:  cos(((x32)**(-7.478449059444456) cos sin(((x19 / const(cos(-7.478449059444456))) x35 cos(x39)))))', 'Equation constants: {1: np.float64(-12.05778215864354)}\nTree:  cos(((x32)**(-12.05778215864354) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(-4.992241399459155e-07), 3: np.float64(-4.992241399459155e-07), 4: np.float64(-4.992241399459155e-07), 5: np.float64(-4.992241399459155e-07)}\nTree:  (((sin(((sin(((-4.992241399459155e-07 / x31) - cos(x65))))**(x91) / -4.992241399459155e-07)) - x1) * -4.992241399459155e-07) + -4.992241399459155e-07)', 'Equation constants: {1: np.float64(-4.6144612412752615)}\nTree:  cos(((x32)**(-4.6144612412752615) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {0: np.float64(0.5403377067397495), 1: np.float64(0.5403377067397495), 2: np.float64(0.5403377067397495)}\nTree:  (((x78)**(0.5403377067397495) * (0.5403377067397495 / x21)) + 0.5403377067397495)', 'Equation constants: {2: np.float64(1.004199721734495)}\nTree:  cos(pow(1.004199721734495, x86, sin((x9 / x82))))', 'Equation constants: {1: np.float64(-10.108020208956123)}\nTree:  cos(((x32)**(-10.108020208956123) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(-1.3485128022119168)}\nTree:  cos((-1.3485128022119168)**(x86))', 'Equation constants: {1: np.float64(-10.378981162820121)}\nTree:  cos(((x32)**(-10.378981162820121) cos sin(x35)))', 'Equation constants: {3: np.float64(0.5000000000000013)}\nTree:  0.5000000000000013', 'Equation constants: {1: np.float64(-0.0003517750429383427), 2: np.float64(-0.0003517750429383427), 3: np.float64(-0.0003517750429383427)}\nTree:  ((pow(x46, cos(-0.0003517750429383427), (x75 / x33)) * (-0.0003517750429383427 / x21)) + -0.0003517750429383427)', 'Equation constants: {3: np.float64(0.5000000000000011)}\nTree:  0.5000000000000011', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-4.61393179949445)}\nTree:  cos(((x32)**(-4.61393179949445) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {4: np.float64(0.5000000000000004)}\nTree:  0.5000000000000004', 'Equation constants: {1: np.float64(-8.799802324218904), 2: np.float64(-8.799802324218904), 3: np.float64(-8.799802324218904), 4: np.float64(-8.799802324218904)}\nTree:  cos(((x32(sin(-8.799802324218904)))**(-8.799802324218904) cos (((x19 / -8.799802324218904) x35 cos(x64)) sin (-8.799802324218904 + -8.799802324218904))))', 'Equation constants: {1: np.float64(-6.647707508760692), 2: np.float64(-6.647707508760692), 3: np.float64(-6.647707508760692)}\nTree:  cos(((x32)**(-6.647707508760692) cos sin(((x51 / const(cos(-6.647707508760692))) x35 cos(x64)))))', 'Equation constants: {3: np.float64(0.0)}\nTree:  cos(cos(0.0))', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007']
MSE: [np.float64(0.3627828958035726), np.float64(0.2507446828474587), np.float64(0.25), np.float64(0.2533559633873756), np.float64(0.25), np.float64(0.294309777056442), np.float64(0.25337628187481254), np.float64(0.25162427586288755), np.float64(0.25), np.float64(0.4298054744563571)]
Generators: ['Generator(mode=real, range=(-1.024, 1.024), n_g=806, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-2, 2), n_g=774, sigma_y=0.009833757205682457, unit=0.7720243617478257)', 'Generator(mode=real, range=(-4.0, 4.0), n_g=516, sigma_y=0.02255386392309798, unit=0.9925131076781933)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.5846171056426845, 4.015382894357315), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9825879766014115)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=484, sigma_y=0.027064636707717575, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.038345728286277, 4.961654271713723), n_g=548, sigma_y=0.038973076859113304, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(0.03920000000000001, 0.9608000000000001), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.9825879766014115)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=774, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.024, 1.024), n_g=806, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.5446171056426845, 4.975382894357315), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.038973076859113304, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.9341494777148692)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9825879766014115)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=452, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.7308505611084879)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=1.0808467742615528)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=484, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.030476188866285954, unit=0.7090294872246506)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.018043091138478386, unit=0.812056179009431)']
Gen 37: 8 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {1: np.float64(2.46697953818596), 2: np.float64(2.46697953818596), 3: np.float64(2.46697953818596), 4: np.float64(2.46697953818596), 5: np.float64(2.46697953818596)}\nTree:  cos(((x32)**(2.46697953818596) cos sin(x35(/(x90, x21, cos((cos((x57)**(((2.46697953818596)**((x56)**(2.46697953818596)) / 2.46697953818596))) * cos(sin(sin((2.46697953818596 - sin(x98))))))))))))', 'Equation constants: {1: np.float64(-8.226281817151973)}\nTree:  cos(cos((x32)**(-8.226281817151973)))', 'Equation constants: {0: np.float64(0.4725450099205554), 2: np.float64(0.4725450099205554)}\nTree:  (((x78((x21)**(x9)))**(0.4725450099205554) * (sin(x77) / x21)) + 0.4725450099205554)', 'Equation constants: {0: np.float64(0.5403376614546088), 1: np.float64(0.5403376614546088), 2: np.float64(0.5403376614546088)}\nTree:  (((x78)**(0.5403376614546088) * (0.5403376614546088 / x21)) + 0.5403376614546088)', 'Equation constants: {1: np.float64(-5.170212629318316), 2: np.float64(-5.170212629318316)}\nTree:  cos(((x32)**(-5.170212629318316) cos sin(x35(/(x19, x21((x75 + x47)), cos(x40), sin(-5.170212629318316))))))', 'Equation constants: {0: np.float64(0.46976208766116767), 2: np.float64(0.46976208766116767)}\nTree:  (((x78((x21)**(x9)))**(0.46976208766116767) * (sin(x67) / x21)) + 0.46976208766116767)', 'Equation constants: {1: np.float64(5.161100847090781), 3: np.float64(5.161100847090781)}\nTree:  cos(((x32)**(5.161100847090781) cos 5.161100847090781))', 'Equation constants: {2: np.float64(-9.942132481147555), 4: np.float64(-9.942132481147555)}\nTree:  cos(pow(-9.942132481147555, x86, (-9.942132481147555 + -9.942132481147555)))', 'Equation constants: {1: np.float64(-4.613974584124825)}\nTree:  cos(((x32)**(-4.613974584124825) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(-2.6495102661640164)}\nTree:  cos((-2.6495102661640164)**(x86))', 'Equation constants: {0: np.float64(0.4697593767658667), 2: np.float64(0.4697593767658667)}\nTree:  +(((x78)**(0.4697593767658667) * (sin(x67) / x21)), 0.4697593767658667, cos(x86))', 'Equation constants: {1: np.float64(-4.613823561581804)}\nTree:  cos(cos((x32)**(-4.613823561581804)))', 'Equation constants: {1: np.float64(-4.764742152672188), 2: np.float64(-4.764742152672188), 3: np.float64(-4.764742152672188)}\nTree:  cos(((x32(sin(-4.764742152672188)))**(-4.764742152672188) cos sin(((x19 / -4.764742152672188) x35 cos(x64)))))', 'Equation constants: {1: np.float64(-7.478449059444456), 2: np.float64(-7.478449059444456), 3: np.float64(-7.478449059444456)}\nTree:  cos(((x32)**(-7.478449059444456) cos sin(((x19 / const(cos(-7.478449059444456))) x35 cos(x39)))))', 'Equation constants: {1: np.float64(-12.05778215864354)}\nTree:  cos(((x32)**(-12.05778215864354) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(-4.992241399459155e-07), 3: np.float64(-4.992241399459155e-07), 4: np.float64(-4.992241399459155e-07), 5: np.float64(-4.992241399459155e-07)}\nTree:  (((sin(((sin(((-4.992241399459155e-07 / x31) - cos(x65))))**(x91) / -4.992241399459155e-07)) - x1) * -4.992241399459155e-07) + -4.992241399459155e-07)', 'Equation constants: {1: np.float64(-4.6144612412752615)}\nTree:  cos(((x32)**(-4.6144612412752615) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {0: np.float64(0.5403377067397495), 1: np.float64(0.5403377067397495), 2: np.float64(0.5403377067397495)}\nTree:  (((x78)**(0.5403377067397495) * (0.5403377067397495 / x21)) + 0.5403377067397495)', 'Equation constants: {2: np.float64(1.004199721734495)}\nTree:  cos(pow(1.004199721734495, x86, sin((x9 / x82))))', 'Equation constants: {1: np.float64(-10.108020208956123)}\nTree:  cos(((x32)**(-10.108020208956123) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(-1.3485128022119168)}\nTree:  cos((-1.3485128022119168)**(x86))', 'Equation constants: {1: np.float64(-10.378981162820121)}\nTree:  cos(((x32)**(-10.378981162820121) cos sin(x35)))', 'Equation constants: {3: np.float64(0.5000000000000013)}\nTree:  0.5000000000000013', 'Equation constants: {1: np.float64(-0.0003517750429383427), 2: np.float64(-0.0003517750429383427), 3: np.float64(-0.0003517750429383427)}\nTree:  ((pow(x46, cos(-0.0003517750429383427), (x75 / x33)) * (-0.0003517750429383427 / x21)) + -0.0003517750429383427)', 'Equation constants: {3: np.float64(0.5000000000000011)}\nTree:  0.5000000000000011', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-4.61393179949445)}\nTree:  cos(((x32)**(-4.61393179949445) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {4: np.float64(0.5000000000000004)}\nTree:  0.5000000000000004', 'Equation constants: {1: np.float64(-8.799802324218904), 2: np.float64(-8.799802324218904), 3: np.float64(-8.799802324218904), 4: np.float64(-8.799802324218904)}\nTree:  cos(((x32(sin(-8.799802324218904)))**(-8.799802324218904) cos (((x19 / -8.799802324218904) x35 cos(x64)) sin (-8.799802324218904 + -8.799802324218904))))', 'Equation constants: {1: np.float64(-6.647707508760692), 2: np.float64(-6.647707508760692), 3: np.float64(-6.647707508760692)}\nTree:  cos(((x32)**(-6.647707508760692) cos sin(((x51 / const(cos(-6.647707508760692))) x35 cos(x64)))))', 'Equation constants: {3: np.float64(0.0)}\nTree:  cos(cos(0.0))', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-5.477567276370719), 3: np.float64(-5.477567276370719), 4: np.float64(-5.477567276370719)}\nTree:  (((x32)**(-5.477567276370719) cos sin(x35((-5.477567276370719 / x14)))) cos sin(-5.477567276370719))', 'Equation constants: {3: np.float64(-7.330382858545585)}\nTree:  cos(-7.330382858545585)', 'Equation constants: {0: np.float64(0.5403377008868518), 1: np.float64(0.5403377008868518), 2: np.float64(0.5403377008868518)}\nTree:  (((x78)**(0.5403377008868518) * (0.5403377008868518 / x21)) + 0.5403377008868518)', 'Equation constants: {1: np.float64(-0.6265486378334408), 2: np.float64(-0.6265486378334408), 3: np.float64(-0.6265486378334408)}\nTree:  (cos((x32)**(-0.6265486378334408)) cos (-0.6265486378334408)**(x86((-0.6265486378334408 + x90))))', 'Equation constants: {1: np.float64(-9.831366417634742), 2: np.float64(-9.831366417634742), 3: np.float64(-9.831366417634742)}\nTree:  cos(((x32(sin(-9.831366417634742)))**(-9.831366417634742) cos sin(((x19 / -9.831366417634742) x35 cos(x64)))))', 'Equation constants: {1: np.float64(-4.613913446502773)}\nTree:  cos(cos((x32)**(-4.613913446502773)))', 'Equation constants: {1: np.float64(-0.5108148716916041), 2: np.float64(-0.5108148716916041)}\nTree:  cos(((x32)**(-0.5108148716916041) cos sin(x35(/(x90, x21, cos(sin((x32((-0.5108148716916041)**(x70)) * x75))))))))', 'Equation constants: {1: np.float64(-0.038022958344612334), 2: np.float64(-0.038022958344612334)}\nTree:  cos(cos((-0.038022958344612334)**(-0.038022958344612334)))']
MSE: [np.float64(0.2553336533553319), np.float64(0.25), np.float64(0.29518561471917204), np.float64(0.25816272123994144), np.float64(0.2975029028377871), np.float64(0.317298750494792), np.float64(0.25258721853965815), np.float64(0.2555035396056524), np.float64(0.3141515560962704), np.float64(0.2585391932582522)]
Generators: ['Generator(mode=real, range=(-5.038345728286277, 4.961654271713723), n_g=548, sigma_y=0.038973076859113304, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.8932617969103741)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(0.03920000000000001, 0.9608000000000001), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.9825879766014115)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=774, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.024, 1.024), n_g=806, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.5446171056426845, 4.975382894357315), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.038973076859113304, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.9341494777148692)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9825879766014115)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=452, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.7308505611084879)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=1.0808467742615528)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=484, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.030476188866285954, unit=0.7090294872246506)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.018043091138478386, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.147460673727203, 6.852539326272797), n_g=548, sigma_y=0.027064636707717575, unit=0.9825879766014115)', 'Generator(mode=real, range=(-7.471083068694031, 4.0489169313059685), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-2, 2), n_g=742, sigma_y=0.009833757205682457, unit=0.7720243617478257)', 'Generator(mode=real, range=(-6.784617105642685, 5.215382894357315), n_g=548, sigma_y=0.018043091138478386, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)']
Gen 38: 7 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {2: np.float64(-9.942132481147555), 4: np.float64(-9.942132481147555)}\nTree:  cos(pow(-9.942132481147555, x86, (-9.942132481147555 + -9.942132481147555)))', 'Equation constants: {1: np.float64(-4.613974584124825)}\nTree:  cos(((x32)**(-4.613974584124825) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(-2.6495102661640164)}\nTree:  cos((-2.6495102661640164)**(x86))', 'Equation constants: {0: np.float64(0.4697593767658667), 2: np.float64(0.4697593767658667)}\nTree:  +(((x78)**(0.4697593767658667) * (sin(x67) / x21)), 0.4697593767658667, cos(x86))', 'Equation constants: {1: np.float64(-4.613823561581804)}\nTree:  cos(cos((x32)**(-4.613823561581804)))', 'Equation constants: {1: np.float64(-4.764742152672188), 2: np.float64(-4.764742152672188), 3: np.float64(-4.764742152672188)}\nTree:  cos(((x32(sin(-4.764742152672188)))**(-4.764742152672188) cos sin(((x19 / -4.764742152672188) x35 cos(x64)))))', 'Equation constants: {1: np.float64(-7.478449059444456), 2: np.float64(-7.478449059444456), 3: np.float64(-7.478449059444456)}\nTree:  cos(((x32)**(-7.478449059444456) cos sin(((x19 / const(cos(-7.478449059444456))) x35 cos(x39)))))', 'Equation constants: {1: np.float64(-12.05778215864354)}\nTree:  cos(((x32)**(-12.05778215864354) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(-4.992241399459155e-07), 3: np.float64(-4.992241399459155e-07), 4: np.float64(-4.992241399459155e-07), 5: np.float64(-4.992241399459155e-07)}\nTree:  (((sin(((sin(((-4.992241399459155e-07 / x31) - cos(x65))))**(x91) / -4.992241399459155e-07)) - x1) * -4.992241399459155e-07) + -4.992241399459155e-07)', 'Equation constants: {1: np.float64(-4.6144612412752615)}\nTree:  cos(((x32)**(-4.6144612412752615) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {0: np.float64(0.5403377067397495), 1: np.float64(0.5403377067397495), 2: np.float64(0.5403377067397495)}\nTree:  (((x78)**(0.5403377067397495) * (0.5403377067397495 / x21)) + 0.5403377067397495)', 'Equation constants: {2: np.float64(1.004199721734495)}\nTree:  cos(pow(1.004199721734495, x86, sin((x9 / x82))))', 'Equation constants: {1: np.float64(-10.108020208956123)}\nTree:  cos(((x32)**(-10.108020208956123) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(-1.3485128022119168)}\nTree:  cos((-1.3485128022119168)**(x86))', 'Equation constants: {1: np.float64(-10.378981162820121)}\nTree:  cos(((x32)**(-10.378981162820121) cos sin(x35)))', 'Equation constants: {3: np.float64(0.5000000000000013)}\nTree:  0.5000000000000013', 'Equation constants: {1: np.float64(-0.0003517750429383427), 2: np.float64(-0.0003517750429383427), 3: np.float64(-0.0003517750429383427)}\nTree:  ((pow(x46, cos(-0.0003517750429383427), (x75 / x33)) * (-0.0003517750429383427 / x21)) + -0.0003517750429383427)', 'Equation constants: {3: np.float64(0.5000000000000011)}\nTree:  0.5000000000000011', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-4.61393179949445)}\nTree:  cos(((x32)**(-4.61393179949445) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {4: np.float64(0.5000000000000004)}\nTree:  0.5000000000000004', 'Equation constants: {1: np.float64(-8.799802324218904), 2: np.float64(-8.799802324218904), 3: np.float64(-8.799802324218904), 4: np.float64(-8.799802324218904)}\nTree:  cos(((x32(sin(-8.799802324218904)))**(-8.799802324218904) cos (((x19 / -8.799802324218904) x35 cos(x64)) sin (-8.799802324218904 + -8.799802324218904))))', 'Equation constants: {1: np.float64(-6.647707508760692), 2: np.float64(-6.647707508760692), 3: np.float64(-6.647707508760692)}\nTree:  cos(((x32)**(-6.647707508760692) cos sin(((x51 / const(cos(-6.647707508760692))) x35 cos(x64)))))', 'Equation constants: {3: np.float64(0.0)}\nTree:  cos(cos(0.0))', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-5.477567276370719), 3: np.float64(-5.477567276370719), 4: np.float64(-5.477567276370719)}\nTree:  (((x32)**(-5.477567276370719) cos sin(x35((-5.477567276370719 / x14)))) cos sin(-5.477567276370719))', 'Equation constants: {3: np.float64(-7.330382858545585)}\nTree:  cos(-7.330382858545585)', 'Equation constants: {0: np.float64(0.5403377008868518), 1: np.float64(0.5403377008868518), 2: np.float64(0.5403377008868518)}\nTree:  (((x78)**(0.5403377008868518) * (0.5403377008868518 / x21)) + 0.5403377008868518)', 'Equation constants: {1: np.float64(-0.6265486378334408), 2: np.float64(-0.6265486378334408), 3: np.float64(-0.6265486378334408)}\nTree:  (cos((x32)**(-0.6265486378334408)) cos (-0.6265486378334408)**(x86((-0.6265486378334408 + x90))))', 'Equation constants: {1: np.float64(-9.831366417634742), 2: np.float64(-9.831366417634742), 3: np.float64(-9.831366417634742)}\nTree:  cos(((x32(sin(-9.831366417634742)))**(-9.831366417634742) cos sin(((x19 / -9.831366417634742) x35 cos(x64)))))', 'Equation constants: {1: np.float64(-4.613913446502773)}\nTree:  cos(cos((x32)**(-4.613913446502773)))', 'Equation constants: {1: np.float64(-0.5108148716916041), 2: np.float64(-0.5108148716916041)}\nTree:  cos(((x32)**(-0.5108148716916041) cos sin(x35(/(x90, x21, cos(sin((x32((-0.5108148716916041)**(x70)) * x75))))))))', 'Equation constants: {1: np.float64(-0.038022958344612334), 2: np.float64(-0.038022958344612334)}\nTree:  cos(cos((-0.038022958344612334)**(-0.038022958344612334)))', 'Equation constants: {0: np.float64(0.5403377362368729), 1: np.float64(0.5403377362368729), 2: np.float64(0.5403377362368729)}\nTree:  ((pow(x78, 0.5403377362368729, cos(x75)) * (0.5403377362368729 / x21)) + 0.5403377362368729)', 'Equation constants: {0: np.float64(0.5403377008887325), 1: np.float64(0.5403377008887325), 2: np.float64(0.5403377008887325)}\nTree:  (((x78)**(0.5403377008887325) * (0.5403377008887325 / x21)) + 0.5403377008887325)', 'Equation constants: {1: np.float64(9.320084853780742), 2: np.float64(9.320084853780742), 3: np.float64(9.320084853780742), 4: np.float64(9.320084853780742), 6: np.float64(9.320084853780742)}\nTree:  cos(((x32)**(9.320084853780742) cos sin(x35(/(x90, x21, cos((cos((x57)**(((9.320084853780742)**((x56)**(9.320084853780742)) / 9.320084853780742))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * 9.320084853780742)))))))))))', 'Equation constants: {1: np.float64(-8.22612566819765)}\nTree:  cos(cos((x32)**(-8.22612566819765)))', 'Equation constants: {1: np.float64(-4.613831696810255)}\nTree:  cos(cos((x32)**(-4.613831696810255)))', 'Equation constants: {1: np.float64(3.1827292126877005), 2: np.float64(3.1827292126877005), 3: np.float64(3.1827292126877005)}\nTree:  cos(((x32)**(3.1827292126877005) cos sin(x35((x51 / const(cos(3.1827292126877005)))))))', 'Equation constants: {1: np.float64(7.897696288316634), 2: np.float64(7.897696288316634), 3: np.float64(7.897696288316634)}\nTree:  cos(((x32)**(7.897696288316634) cos (((x19 / const(cos(7.897696288316634))) x35 cos(x39)) sin (x11 - x7))))']
MSE: [np.float64(0.29518561734856597), np.float64(0.29518566350019315), np.float64(0.3013781538422676), np.float64(0.2521612222031974), np.float64(1.0945632266613219), np.float64(0.2530531977609925), np.float64(0.252587218532887), np.float64(0.25350734555148835), np.float64(0.34001276923870505), np.float64(387906203.32255083)]
Generators: ['Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.038973076859113304, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.9341494777148692)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9825879766014115)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=452, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.7308505611084879)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=1.0808467742615528)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=484, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.030476188866285954, unit=0.7090294872246506)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.018043091138478386, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.147460673727203, 6.852539326272797), n_g=548, sigma_y=0.027064636707717575, unit=0.9825879766014115)', 'Generator(mode=real, range=(-7.471083068694031, 4.0489169313059685), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-2, 2), n_g=742, sigma_y=0.009833757205682457, unit=0.7720243617478257)', 'Generator(mode=real, range=(-6.784617105642685, 5.215382894357315), n_g=548, sigma_y=0.018043091138478386, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(0.13136000000000003, 0.8686400000000001), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-7.471083068694031, 4.0489169313059685), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-6.5446171056426845, 4.975382894357315), n_g=580, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.024, 1.024), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.812056179009431)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.7643041181303475)']
Gen 39: 8 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {2: np.float64(-4.992241399459155e-07), 3: np.float64(-4.992241399459155e-07), 4: np.float64(-4.992241399459155e-07), 5: np.float64(-4.992241399459155e-07)}\nTree:  (((sin(((sin(((-4.992241399459155e-07 / x31) - cos(x65))))**(x91) / -4.992241399459155e-07)) - x1) * -4.992241399459155e-07) + -4.992241399459155e-07)', 'Equation constants: {1: np.float64(-4.6144612412752615)}\nTree:  cos(((x32)**(-4.6144612412752615) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {0: np.float64(0.5403377067397495), 1: np.float64(0.5403377067397495), 2: np.float64(0.5403377067397495)}\nTree:  (((x78)**(0.5403377067397495) * (0.5403377067397495 / x21)) + 0.5403377067397495)', 'Equation constants: {2: np.float64(1.004199721734495)}\nTree:  cos(pow(1.004199721734495, x86, sin((x9 / x82))))', 'Equation constants: {1: np.float64(-10.108020208956123)}\nTree:  cos(((x32)**(-10.108020208956123) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(-1.3485128022119168)}\nTree:  cos((-1.3485128022119168)**(x86))', 'Equation constants: {1: np.float64(-10.378981162820121)}\nTree:  cos(((x32)**(-10.378981162820121) cos sin(x35)))', 'Equation constants: {3: np.float64(0.5000000000000013)}\nTree:  0.5000000000000013', 'Equation constants: {1: np.float64(-0.0003517750429383427), 2: np.float64(-0.0003517750429383427), 3: np.float64(-0.0003517750429383427)}\nTree:  ((pow(x46, cos(-0.0003517750429383427), (x75 / x33)) * (-0.0003517750429383427 / x21)) + -0.0003517750429383427)', 'Equation constants: {3: np.float64(0.5000000000000011)}\nTree:  0.5000000000000011', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-4.61393179949445)}\nTree:  cos(((x32)**(-4.61393179949445) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {4: np.float64(0.5000000000000004)}\nTree:  0.5000000000000004', 'Equation constants: {1: np.float64(-8.799802324218904), 2: np.float64(-8.799802324218904), 3: np.float64(-8.799802324218904), 4: np.float64(-8.799802324218904)}\nTree:  cos(((x32(sin(-8.799802324218904)))**(-8.799802324218904) cos (((x19 / -8.799802324218904) x35 cos(x64)) sin (-8.799802324218904 + -8.799802324218904))))', 'Equation constants: {1: np.float64(-6.647707508760692), 2: np.float64(-6.647707508760692), 3: np.float64(-6.647707508760692)}\nTree:  cos(((x32)**(-6.647707508760692) cos sin(((x51 / const(cos(-6.647707508760692))) x35 cos(x64)))))', 'Equation constants: {3: np.float64(0.0)}\nTree:  cos(cos(0.0))', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-5.477567276370719), 3: np.float64(-5.477567276370719), 4: np.float64(-5.477567276370719)}\nTree:  (((x32)**(-5.477567276370719) cos sin(x35((-5.477567276370719 / x14)))) cos sin(-5.477567276370719))', 'Equation constants: {3: np.float64(-7.330382858545585)}\nTree:  cos(-7.330382858545585)', 'Equation constants: {0: np.float64(0.5403377008868518), 1: np.float64(0.5403377008868518), 2: np.float64(0.5403377008868518)}\nTree:  (((x78)**(0.5403377008868518) * (0.5403377008868518 / x21)) + 0.5403377008868518)', 'Equation constants: {1: np.float64(-0.6265486378334408), 2: np.float64(-0.6265486378334408), 3: np.float64(-0.6265486378334408)}\nTree:  (cos((x32)**(-0.6265486378334408)) cos (-0.6265486378334408)**(x86((-0.6265486378334408 + x90))))', 'Equation constants: {1: np.float64(-9.831366417634742), 2: np.float64(-9.831366417634742), 3: np.float64(-9.831366417634742)}\nTree:  cos(((x32(sin(-9.831366417634742)))**(-9.831366417634742) cos sin(((x19 / -9.831366417634742) x35 cos(x64)))))', 'Equation constants: {1: np.float64(-4.613913446502773)}\nTree:  cos(cos((x32)**(-4.613913446502773)))', 'Equation constants: {1: np.float64(-0.5108148716916041), 2: np.float64(-0.5108148716916041)}\nTree:  cos(((x32)**(-0.5108148716916041) cos sin(x35(/(x90, x21, cos(sin((x32((-0.5108148716916041)**(x70)) * x75))))))))', 'Equation constants: {1: np.float64(-0.038022958344612334), 2: np.float64(-0.038022958344612334)}\nTree:  cos(cos((-0.038022958344612334)**(-0.038022958344612334)))', 'Equation constants: {0: np.float64(0.5403377362368729), 1: np.float64(0.5403377362368729), 2: np.float64(0.5403377362368729)}\nTree:  ((pow(x78, 0.5403377362368729, cos(x75)) * (0.5403377362368729 / x21)) + 0.5403377362368729)', 'Equation constants: {0: np.float64(0.5403377008887325), 1: np.float64(0.5403377008887325), 2: np.float64(0.5403377008887325)}\nTree:  (((x78)**(0.5403377008887325) * (0.5403377008887325 / x21)) + 0.5403377008887325)', 'Equation constants: {1: np.float64(9.320084853780742), 2: np.float64(9.320084853780742), 3: np.float64(9.320084853780742), 4: np.float64(9.320084853780742), 6: np.float64(9.320084853780742)}\nTree:  cos(((x32)**(9.320084853780742) cos sin(x35(/(x90, x21, cos((cos((x57)**(((9.320084853780742)**((x56)**(9.320084853780742)) / 9.320084853780742))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * 9.320084853780742)))))))))))', 'Equation constants: {1: np.float64(-8.22612566819765)}\nTree:  cos(cos((x32)**(-8.22612566819765)))', 'Equation constants: {1: np.float64(-4.613831696810255)}\nTree:  cos(cos((x32)**(-4.613831696810255)))', 'Equation constants: {1: np.float64(3.1827292126877005), 2: np.float64(3.1827292126877005), 3: np.float64(3.1827292126877005)}\nTree:  cos(((x32)**(3.1827292126877005) cos sin(x35((x51 / const(cos(3.1827292126877005)))))))', 'Equation constants: {1: np.float64(7.897696288316634), 2: np.float64(7.897696288316634), 3: np.float64(7.897696288316634)}\nTree:  cos(((x32)**(7.897696288316634) cos (((x19 / const(cos(7.897696288316634))) x35 cos(x39)) sin (x11 - x7))))', 'Equation constants: {1: np.float64(-8.092053975918025), 2: np.float64(-8.092053975918025), 3: np.float64(-8.092053975918025)}\nTree:  cos(((-8.092053975918025)**(-8.092053975918025) cos (x81 * -8.092053975918025)))', 'Equation constants: {2: np.float64(-4.992262336194222e-07), 3: np.float64(-4.992262336194222e-07), 4: np.float64(-4.992262336194222e-07), 5: np.float64(-4.992262336194222e-07)}\nTree:  (((sin(((sin(((-4.992262336194222e-07 / x31) - cos(x65))))**(x91) / -4.992262336194222e-07)) - x1) * -4.992262336194222e-07) + -4.992262336194222e-07)', 'Equation constants: {0: np.float64(0.5403377001294027), 1: np.float64(0.5403377001294027), 2: np.float64(0.5403377001294027)}\nTree:  ((pow(x78, 0.5403377001294027, cos(x75)) * (0.5403377001294027 / x21)) + 0.5403377001294027)', 'Equation constants: {1: np.float64(-4.613924575780599)}\nTree:  cos(cos((x32)**(-4.613924575780599)))', 'Equation constants: {1: np.float64(-1.7732992248801267), 2: np.float64(-1.7732992248801267)}\nTree:  cos(((x84)**(-1.7732992248801267) cos sin(x35(/(x90, x21, cos(sin((x32((-1.7732992248801267)**(x70)) * x75))))))))', 'Equation constants: {1: np.float64(-7.728577771287086), 2: np.float64(-7.728577771287086)}\nTree:  cos((pow(x32, -7.728577771287086, sin(-7.728577771287086)) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(-4.614576598330733)}\nTree:  cos(((x32)**(-4.614576598330733) cos sin(x35)))', 'Equation constants: {1: np.float64(4.3849575735492685), 2: np.float64(4.3849575735492685), 3: np.float64(4.3849575735492685)}\nTree:  cos(((x32(sin(4.3849575735492685)))**(4.3849575735492685) sin sin(((x19 / 4.3849575735492685) x35 cos(x64)))))']
MSE: [np.float64(0.2585391932582522), np.float64(0.4958714712730597), np.float64(0.2951856049012257), np.float64(0.25258721854588323), np.float64(0.25373455896391905), np.float64(0.31096655316681426), np.float64(0.3008939437328257), np.float64(0.2539541284774193), np.float64(0.2529082769529745), np.float64(0.4964158552297485)]
Generators: ['Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.008194797671402047, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=452, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.7308505611084879)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=1.0808467742615528)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=484, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(0.1, 0.9), n_g=341, sigma_y=0.030476188866285954, unit=0.7090294872246506)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.018043091138478386, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.147460673727203, 6.852539326272797), n_g=548, sigma_y=0.027064636707717575, unit=0.9825879766014115)', 'Generator(mode=real, range=(-7.471083068694031, 4.0489169313059685), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-2, 2), n_g=742, sigma_y=0.009833757205682457, unit=0.7720243617478257)', 'Generator(mode=real, range=(-6.784617105642685, 5.215382894357315), n_g=548, sigma_y=0.018043091138478386, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(0.13136000000000003, 0.8686400000000001), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-7.471083068694031, 4.0489169313059685), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-6.5446171056426845, 4.975382894357315), n_g=580, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.024, 1.024), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.812056179009431)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.7643041181303475)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9727620968353976)', 'Generator(mode=real, range=(-8.623083068694031, 5.200916931305969), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.9341494777148692)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=484, sigma_y=0.02165170936617406, unit=0.9925131076781933)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(0.13136000000000003, 0.8686400000000001), n_g=277, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)']
Gen 40: 10 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-4.61393179949445)}\nTree:  cos(((x32)**(-4.61393179949445) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {4: np.float64(0.5000000000000004)}\nTree:  0.5000000000000004', 'Equation constants: {1: np.float64(-8.799802324218904), 2: np.float64(-8.799802324218904), 3: np.float64(-8.799802324218904), 4: np.float64(-8.799802324218904)}\nTree:  cos(((x32(sin(-8.799802324218904)))**(-8.799802324218904) cos (((x19 / -8.799802324218904) x35 cos(x64)) sin (-8.799802324218904 + -8.799802324218904))))', 'Equation constants: {1: np.float64(-6.647707508760692), 2: np.float64(-6.647707508760692), 3: np.float64(-6.647707508760692)}\nTree:  cos(((x32)**(-6.647707508760692) cos sin(((x51 / const(cos(-6.647707508760692))) x35 cos(x64)))))', 'Equation constants: {3: np.float64(0.0)}\nTree:  cos(cos(0.0))', 'Equation constants: {3: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {1: np.float64(-5.477567276370719), 3: np.float64(-5.477567276370719), 4: np.float64(-5.477567276370719)}\nTree:  (((x32)**(-5.477567276370719) cos sin(x35((-5.477567276370719 / x14)))) cos sin(-5.477567276370719))', 'Equation constants: {3: np.float64(-7.330382858545585)}\nTree:  cos(-7.330382858545585)', 'Equation constants: {0: np.float64(0.5403377008868518), 1: np.float64(0.5403377008868518), 2: np.float64(0.5403377008868518)}\nTree:  (((x78)**(0.5403377008868518) * (0.5403377008868518 / x21)) + 0.5403377008868518)', 'Equation constants: {1: np.float64(-0.6265486378334408), 2: np.float64(-0.6265486378334408), 3: np.float64(-0.6265486378334408)}\nTree:  (cos((x32)**(-0.6265486378334408)) cos (-0.6265486378334408)**(x86((-0.6265486378334408 + x90))))', 'Equation constants: {1: np.float64(-9.831366417634742), 2: np.float64(-9.831366417634742), 3: np.float64(-9.831366417634742)}\nTree:  cos(((x32(sin(-9.831366417634742)))**(-9.831366417634742) cos sin(((x19 / -9.831366417634742) x35 cos(x64)))))', 'Equation constants: {1: np.float64(-4.613913446502773)}\nTree:  cos(cos((x32)**(-4.613913446502773)))', 'Equation constants: {1: np.float64(-0.5108148716916041), 2: np.float64(-0.5108148716916041)}\nTree:  cos(((x32)**(-0.5108148716916041) cos sin(x35(/(x90, x21, cos(sin((x32((-0.5108148716916041)**(x70)) * x75))))))))', 'Equation constants: {1: np.float64(-0.038022958344612334), 2: np.float64(-0.038022958344612334)}\nTree:  cos(cos((-0.038022958344612334)**(-0.038022958344612334)))', 'Equation constants: {0: np.float64(0.5403377362368729), 1: np.float64(0.5403377362368729), 2: np.float64(0.5403377362368729)}\nTree:  ((pow(x78, 0.5403377362368729, cos(x75)) * (0.5403377362368729 / x21)) + 0.5403377362368729)', 'Equation constants: {0: np.float64(0.5403377008887325), 1: np.float64(0.5403377008887325), 2: np.float64(0.5403377008887325)}\nTree:  (((x78)**(0.5403377008887325) * (0.5403377008887325 / x21)) + 0.5403377008887325)', 'Equation constants: {1: np.float64(9.320084853780742), 2: np.float64(9.320084853780742), 3: np.float64(9.320084853780742), 4: np.float64(9.320084853780742), 6: np.float64(9.320084853780742)}\nTree:  cos(((x32)**(9.320084853780742) cos sin(x35(/(x90, x21, cos((cos((x57)**(((9.320084853780742)**((x56)**(9.320084853780742)) / 9.320084853780742))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * 9.320084853780742)))))))))))', 'Equation constants: {1: np.float64(-8.22612566819765)}\nTree:  cos(cos((x32)**(-8.22612566819765)))', 'Equation constants: {1: np.float64(-4.613831696810255)}\nTree:  cos(cos((x32)**(-4.613831696810255)))', 'Equation constants: {1: np.float64(3.1827292126877005), 2: np.float64(3.1827292126877005), 3: np.float64(3.1827292126877005)}\nTree:  cos(((x32)**(3.1827292126877005) cos sin(x35((x51 / const(cos(3.1827292126877005)))))))', 'Equation constants: {1: np.float64(7.897696288316634), 2: np.float64(7.897696288316634), 3: np.float64(7.897696288316634)}\nTree:  cos(((x32)**(7.897696288316634) cos (((x19 / const(cos(7.897696288316634))) x35 cos(x39)) sin (x11 - x7))))', 'Equation constants: {1: np.float64(-8.092053975918025), 2: np.float64(-8.092053975918025), 3: np.float64(-8.092053975918025)}\nTree:  cos(((-8.092053975918025)**(-8.092053975918025) cos (x81 * -8.092053975918025)))', 'Equation constants: {2: np.float64(-4.992262336194222e-07), 3: np.float64(-4.992262336194222e-07), 4: np.float64(-4.992262336194222e-07), 5: np.float64(-4.992262336194222e-07)}\nTree:  (((sin(((sin(((-4.992262336194222e-07 / x31) - cos(x65))))**(x91) / -4.992262336194222e-07)) - x1) * -4.992262336194222e-07) + -4.992262336194222e-07)', 'Equation constants: {0: np.float64(0.5403377001294027), 1: np.float64(0.5403377001294027), 2: np.float64(0.5403377001294027)}\nTree:  ((pow(x78, 0.5403377001294027, cos(x75)) * (0.5403377001294027 / x21)) + 0.5403377001294027)', 'Equation constants: {1: np.float64(-4.613924575780599)}\nTree:  cos(cos((x32)**(-4.613924575780599)))', 'Equation constants: {1: np.float64(-1.7732992248801267), 2: np.float64(-1.7732992248801267)}\nTree:  cos(((x84)**(-1.7732992248801267) cos sin(x35(/(x90, x21, cos(sin((x32((-1.7732992248801267)**(x70)) * x75))))))))', 'Equation constants: {1: np.float64(-7.728577771287086), 2: np.float64(-7.728577771287086)}\nTree:  cos((pow(x32, -7.728577771287086, sin(-7.728577771287086)) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(-4.614576598330733)}\nTree:  cos(((x32)**(-4.614576598330733) cos sin(x35)))', 'Equation constants: {1: np.float64(4.3849575735492685), 2: np.float64(4.3849575735492685), 3: np.float64(4.3849575735492685)}\nTree:  cos(((x32(sin(4.3849575735492685)))**(4.3849575735492685) sin sin(((x19 / 4.3849575735492685) x35 cos(x64)))))', 'Equation constants: {1: np.float64(-4.6139292282873905)}\nTree:  cos(((x32)**(-4.6139292282873905) cos sin(x35(-(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(0.29049135962292816), 2: np.float64(0.29049135962292816), 3: np.float64(0.29049135962292816), 4: np.float64(0.29049135962292816), 6: np.float64(0.29049135962292816)}\nTree:  cos(((x32)**(0.29049135962292816) cos sin(x35((x21 / cos((cos((x57)**(((0.29049135962292816)**((x56)**(0.29049135962292816)) / 0.29049135962292816))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * 0.29049135962292816)))))))))))', 'Equation constants: {3: np.float64(0.4999999999999991)}\nTree:  0.4999999999999991', 'Equation constants: {1: np.float64(-0.3919255652251241), 2: np.float64(-0.3919255652251241), 3: np.float64(-0.3919255652251241)}\nTree:  cos(((x32)**(-0.3919255652251241) cos sin(x35(/(x90, x21, cos(((x32((-0.3919255652251241)**(x70)) * x75) sin (x28 / -0.3919255652251241))))))))', 'Equation constants: {4: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {4: np.float64(0.49999999999999956)}\nTree:  0.49999999999999956', 'Equation constants: {1: np.float64(2.724340824704452), 2: np.float64(2.724340824704452), 3: np.float64(2.724340824704452)}\nTree:  cos(((x37)**(2.724340824704452) cos sin(x35((x51 / const(cos(2.724340824704452)))))))', 'Equation constants: {1: np.float64(0.11575473499499221)}\nTree:  cos(sin((x32)**(0.11575473499499221)))', 'Equation constants: {1: np.float64(5.452229869459085), 2: np.float64(5.452229869459085)}\nTree:  cos(((x32)**(5.452229869459085) cos x32((5.452229869459085)**(x70))))', 'Equation constants: {1: np.float64(-9.265491179016552)}\nTree:  cos(((x32)**(-9.265491179016552) cos sin(x35(/(x90, x21, cos(sin((sin(x35) * x75))))))))']
MSE: [np.float64(0.2521612222031974), np.float64(0.25309545567386704), np.float64(0.3141515560962704), np.float64(0.25), np.float64(0.2535876751611271), np.float64(0.25), np.float64(0.25), np.float64(0.2519388833168589), np.float64(0.314485638294811), np.float64(0.2557349172286448), np.float64(0.2536568569565406), np.float64(0.2521612222031974)]
Generators: ['Generator(mode=real, range=(-5.147460673727203, 6.852539326272797), n_g=548, sigma_y=0.027064636707717575, unit=0.9825879766014115)', 'Generator(mode=real, range=(-7.471083068694031, 4.0489169313059685), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-2, 2), n_g=742, sigma_y=0.009833757205682457, unit=0.7720243617478257)', 'Generator(mode=real, range=(-6.784617105642685, 5.215382894357315), n_g=548, sigma_y=0.018043091138478386, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(0.13136000000000003, 0.8686400000000001), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-7.471083068694031, 4.0489169313059685), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-6.5446171056426845, 4.975382894357315), n_g=580, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.024, 1.024), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.812056179009431)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.7643041181303475)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9727620968353976)', 'Generator(mode=real, range=(-8.623083068694031, 5.200916931305969), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.9341494777148692)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=484, sigma_y=0.02165170936617406, unit=0.9925131076781933)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(0.13136000000000003, 0.8686400000000001), n_g=277, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.011800508646818947, unit=0.8492267979226084)', 'Generator(mode=real, range=(-2, 2), n_g=710, sigma_y=0.009833757205682457, unit=0.7720243617478257)', 'Generator(mode=real, range=(-0.8192, 0.8192), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=484, sigma_y=0.02165170936617406, unit=0.9925131076781933)', 'Generator(mode=real, range=(-1.2167980266383818, 1.2408019733616185), n_g=806, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.7308505611084879)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=548, sigma_y=0.03247756404926109, unit=0.893261796910374)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.8492267979226084)']
Gen 41: 7 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {1: np.float64(-5.477567276370719), 3: np.float64(-5.477567276370719), 4: np.float64(-5.477567276370719)}\nTree:  (((x32)**(-5.477567276370719) cos sin(x35((-5.477567276370719 / x14)))) cos sin(-5.477567276370719))', 'Equation constants: {3: np.float64(-7.330382858545585)}\nTree:  cos(-7.330382858545585)', 'Equation constants: {0: np.float64(0.5403377008868518), 1: np.float64(0.5403377008868518), 2: np.float64(0.5403377008868518)}\nTree:  (((x78)**(0.5403377008868518) * (0.5403377008868518 / x21)) + 0.5403377008868518)', 'Equation constants: {1: np.float64(-0.6265486378334408), 2: np.float64(-0.6265486378334408), 3: np.float64(-0.6265486378334408)}\nTree:  (cos((x32)**(-0.6265486378334408)) cos (-0.6265486378334408)**(x86((-0.6265486378334408 + x90))))', 'Equation constants: {1: np.float64(-9.831366417634742), 2: np.float64(-9.831366417634742), 3: np.float64(-9.831366417634742)}\nTree:  cos(((x32(sin(-9.831366417634742)))**(-9.831366417634742) cos sin(((x19 / -9.831366417634742) x35 cos(x64)))))', 'Equation constants: {1: np.float64(-4.613913446502773)}\nTree:  cos(cos((x32)**(-4.613913446502773)))', 'Equation constants: {1: np.float64(-0.5108148716916041), 2: np.float64(-0.5108148716916041)}\nTree:  cos(((x32)**(-0.5108148716916041) cos sin(x35(/(x90, x21, cos(sin((x32((-0.5108148716916041)**(x70)) * x75))))))))', 'Equation constants: {1: np.float64(-0.038022958344612334), 2: np.float64(-0.038022958344612334)}\nTree:  cos(cos((-0.038022958344612334)**(-0.038022958344612334)))', 'Equation constants: {0: np.float64(0.5403377362368729), 1: np.float64(0.5403377362368729), 2: np.float64(0.5403377362368729)}\nTree:  ((pow(x78, 0.5403377362368729, cos(x75)) * (0.5403377362368729 / x21)) + 0.5403377362368729)', 'Equation constants: {0: np.float64(0.5403377008887325), 1: np.float64(0.5403377008887325), 2: np.float64(0.5403377008887325)}\nTree:  (((x78)**(0.5403377008887325) * (0.5403377008887325 / x21)) + 0.5403377008887325)', 'Equation constants: {1: np.float64(9.320084853780742), 2: np.float64(9.320084853780742), 3: np.float64(9.320084853780742), 4: np.float64(9.320084853780742), 6: np.float64(9.320084853780742)}\nTree:  cos(((x32)**(9.320084853780742) cos sin(x35(/(x90, x21, cos((cos((x57)**(((9.320084853780742)**((x56)**(9.320084853780742)) / 9.320084853780742))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * 9.320084853780742)))))))))))', 'Equation constants: {1: np.float64(-8.22612566819765)}\nTree:  cos(cos((x32)**(-8.22612566819765)))', 'Equation constants: {1: np.float64(-4.613831696810255)}\nTree:  cos(cos((x32)**(-4.613831696810255)))', 'Equation constants: {1: np.float64(3.1827292126877005), 2: np.float64(3.1827292126877005), 3: np.float64(3.1827292126877005)}\nTree:  cos(((x32)**(3.1827292126877005) cos sin(x35((x51 / const(cos(3.1827292126877005)))))))', 'Equation constants: {1: np.float64(7.897696288316634), 2: np.float64(7.897696288316634), 3: np.float64(7.897696288316634)}\nTree:  cos(((x32)**(7.897696288316634) cos (((x19 / const(cos(7.897696288316634))) x35 cos(x39)) sin (x11 - x7))))', 'Equation constants: {1: np.float64(-8.092053975918025), 2: np.float64(-8.092053975918025), 3: np.float64(-8.092053975918025)}\nTree:  cos(((-8.092053975918025)**(-8.092053975918025) cos (x81 * -8.092053975918025)))', 'Equation constants: {2: np.float64(-4.992262336194222e-07), 3: np.float64(-4.992262336194222e-07), 4: np.float64(-4.992262336194222e-07), 5: np.float64(-4.992262336194222e-07)}\nTree:  (((sin(((sin(((-4.992262336194222e-07 / x31) - cos(x65))))**(x91) / -4.992262336194222e-07)) - x1) * -4.992262336194222e-07) + -4.992262336194222e-07)', 'Equation constants: {0: np.float64(0.5403377001294027), 1: np.float64(0.5403377001294027), 2: np.float64(0.5403377001294027)}\nTree:  ((pow(x78, 0.5403377001294027, cos(x75)) * (0.5403377001294027 / x21)) + 0.5403377001294027)', 'Equation constants: {1: np.float64(-4.613924575780599)}\nTree:  cos(cos((x32)**(-4.613924575780599)))', 'Equation constants: {1: np.float64(-1.7732992248801267), 2: np.float64(-1.7732992248801267)}\nTree:  cos(((x84)**(-1.7732992248801267) cos sin(x35(/(x90, x21, cos(sin((x32((-1.7732992248801267)**(x70)) * x75))))))))', 'Equation constants: {1: np.float64(-7.728577771287086), 2: np.float64(-7.728577771287086)}\nTree:  cos((pow(x32, -7.728577771287086, sin(-7.728577771287086)) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(-4.614576598330733)}\nTree:  cos(((x32)**(-4.614576598330733) cos sin(x35)))', 'Equation constants: {1: np.float64(4.3849575735492685), 2: np.float64(4.3849575735492685), 3: np.float64(4.3849575735492685)}\nTree:  cos(((x32(sin(4.3849575735492685)))**(4.3849575735492685) sin sin(((x19 / 4.3849575735492685) x35 cos(x64)))))', 'Equation constants: {1: np.float64(-4.6139292282873905)}\nTree:  cos(((x32)**(-4.6139292282873905) cos sin(x35(-(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(0.29049135962292816), 2: np.float64(0.29049135962292816), 3: np.float64(0.29049135962292816), 4: np.float64(0.29049135962292816), 6: np.float64(0.29049135962292816)}\nTree:  cos(((x32)**(0.29049135962292816) cos sin(x35((x21 / cos((cos((x57)**(((0.29049135962292816)**((x56)**(0.29049135962292816)) / 0.29049135962292816))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * 0.29049135962292816)))))))))))', 'Equation constants: {3: np.float64(0.4999999999999991)}\nTree:  0.4999999999999991', 'Equation constants: {1: np.float64(-0.3919255652251241), 2: np.float64(-0.3919255652251241), 3: np.float64(-0.3919255652251241)}\nTree:  cos(((x32)**(-0.3919255652251241) cos sin(x35(/(x90, x21, cos(((x32((-0.3919255652251241)**(x70)) * x75) sin (x28 / -0.3919255652251241))))))))', 'Equation constants: {4: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {4: np.float64(0.49999999999999956)}\nTree:  0.49999999999999956', 'Equation constants: {1: np.float64(2.724340824704452), 2: np.float64(2.724340824704452), 3: np.float64(2.724340824704452)}\nTree:  cos(((x37)**(2.724340824704452) cos sin(x35((x51 / const(cos(2.724340824704452)))))))', 'Equation constants: {1: np.float64(0.11575473499499221)}\nTree:  cos(sin((x32)**(0.11575473499499221)))', 'Equation constants: {1: np.float64(5.452229869459085), 2: np.float64(5.452229869459085)}\nTree:  cos(((x32)**(5.452229869459085) cos x32((5.452229869459085)**(x70))))', 'Equation constants: {1: np.float64(-9.265491179016552)}\nTree:  cos(((x32)**(-9.265491179016552) cos sin(x35(/(x90, x21, cos(sin((sin(x35) * x75))))))))', 'Equation constants: {1: np.float64(-3.187625132792977), 2: np.float64(-3.187625132792977), 3: np.float64(-3.187625132792977), 4: np.float64(-3.187625132792977), 5: np.float64(-3.187625132792977)}\nTree:  cos((((x39 * cos(((-3.187625132792977 * sin((sin((-3.187625132792977 - -3.187625132792977)) * cos(x19)))) + -3.187625132792977))))**(-3.187625132792977) cos sin(x35)))', 'Equation constants: {1: np.float64(-8.226359457461326)}\nTree:  cos(cos((x32)**(-8.226359457461326)))', 'Equation constants: {1: np.float64(1.6515584664144338), 2: np.float64(1.6515584664144338), 3: np.float64(1.6515584664144338)}\nTree:  cos(((1.6515584664144338)**(1.6515584664144338) cos (x81 * 1.6515584664144338)))', 'Equation constants: {1: np.float64(-6.5402679454206725)}\nTree:  cos(cos((x32)**(-6.5402679454206725)))', 'Equation constants: {1: np.float64(4.598629635934617)}\nTree:  cos(cos(pow(x32, 4.598629635934617, cos(x31))))', 'Equation constants: {1: np.float64(4.787450734366052), 2: np.float64(4.787450734366052)}\nTree:  cos(cos((4.787450734366052)**(4.787450734366052)))', 'Equation constants: {1: np.float64(-8.226122369235403)}\nTree:  cos(((x32)**(-8.226122369235403) cos sin(x35(-(x90, x21, cos(sin((x32 * x4))))))))']
MSE: [np.float64(0.2585391932582522), np.float64(0.4625429131092372), np.float64(0.322176464896183), np.float64(0.2525872188802254), np.float64(0.2585391932582522), np.float64(0.2533559633874161), np.float64(0.2521612222031974), np.float64(0.3222362585267934), np.float64(383175403.86899984), np.float64(0.2529082770996466)]
Generators: ['Generator(mode=real, range=(0.13136000000000003, 0.8686400000000001), n_g=309, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-7.471083068694031, 4.0489169313059685), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-6.5446171056426845, 4.975382894357315), n_g=580, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.01443447291078271, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.024, 1.024), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.027064636707717575, unit=0.812056179009431)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.7643041181303475)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9727620968353976)', 'Generator(mode=real, range=(-8.623083068694031, 5.200916931305969), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.9341494777148692)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=484, sigma_y=0.02165170936617406, unit=0.9925131076781933)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(0.13136000000000003, 0.8686400000000001), n_g=277, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.011800508646818947, unit=0.8492267979226084)', 'Generator(mode=real, range=(-2, 2), n_g=710, sigma_y=0.009833757205682457, unit=0.7720243617478257)', 'Generator(mode=real, range=(-0.8192, 0.8192), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=484, sigma_y=0.02165170936617406, unit=0.9925131076781933)', 'Generator(mode=real, range=(-1.2167980266383818, 1.2408019733616185), n_g=806, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.7308505611084879)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=548, sigma_y=0.03247756404926109, unit=0.893261796910374)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-0.8192, 0.8192), n_g=806, sigma_y=0.005244670509697311, unit=0.7643041181303475)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.02165170936617406, unit=0.9022846433438121)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-6.5446171056426845, 4.975382894357315), n_g=580, sigma_y=0.01443447291078271, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.01443447291078271, unit=0.8932617969103741)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)']
Gen 42: 8 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {0: np.float64(0.5403377362368729), 1: np.float64(0.5403377362368729), 2: np.float64(0.5403377362368729)}\nTree:  ((pow(x78, 0.5403377362368729, cos(x75)) * (0.5403377362368729 / x21)) + 0.5403377362368729)', 'Equation constants: {0: np.float64(0.5403377008887325), 1: np.float64(0.5403377008887325), 2: np.float64(0.5403377008887325)}\nTree:  (((x78)**(0.5403377008887325) * (0.5403377008887325 / x21)) + 0.5403377008887325)', 'Equation constants: {1: np.float64(9.320084853780742), 2: np.float64(9.320084853780742), 3: np.float64(9.320084853780742), 4: np.float64(9.320084853780742), 6: np.float64(9.320084853780742)}\nTree:  cos(((x32)**(9.320084853780742) cos sin(x35(/(x90, x21, cos((cos((x57)**(((9.320084853780742)**((x56)**(9.320084853780742)) / 9.320084853780742))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * 9.320084853780742)))))))))))', 'Equation constants: {1: np.float64(-8.22612566819765)}\nTree:  cos(cos((x32)**(-8.22612566819765)))', 'Equation constants: {1: np.float64(-4.613831696810255)}\nTree:  cos(cos((x32)**(-4.613831696810255)))', 'Equation constants: {1: np.float64(3.1827292126877005), 2: np.float64(3.1827292126877005), 3: np.float64(3.1827292126877005)}\nTree:  cos(((x32)**(3.1827292126877005) cos sin(x35((x51 / const(cos(3.1827292126877005)))))))', 'Equation constants: {1: np.float64(7.897696288316634), 2: np.float64(7.897696288316634), 3: np.float64(7.897696288316634)}\nTree:  cos(((x32)**(7.897696288316634) cos (((x19 / const(cos(7.897696288316634))) x35 cos(x39)) sin (x11 - x7))))', 'Equation constants: {1: np.float64(-8.092053975918025), 2: np.float64(-8.092053975918025), 3: np.float64(-8.092053975918025)}\nTree:  cos(((-8.092053975918025)**(-8.092053975918025) cos (x81 * -8.092053975918025)))', 'Equation constants: {2: np.float64(-4.992262336194222e-07), 3: np.float64(-4.992262336194222e-07), 4: np.float64(-4.992262336194222e-07), 5: np.float64(-4.992262336194222e-07)}\nTree:  (((sin(((sin(((-4.992262336194222e-07 / x31) - cos(x65))))**(x91) / -4.992262336194222e-07)) - x1) * -4.992262336194222e-07) + -4.992262336194222e-07)', 'Equation constants: {0: np.float64(0.5403377001294027), 1: np.float64(0.5403377001294027), 2: np.float64(0.5403377001294027)}\nTree:  ((pow(x78, 0.5403377001294027, cos(x75)) * (0.5403377001294027 / x21)) + 0.5403377001294027)', 'Equation constants: {1: np.float64(-4.613924575780599)}\nTree:  cos(cos((x32)**(-4.613924575780599)))', 'Equation constants: {1: np.float64(-1.7732992248801267), 2: np.float64(-1.7732992248801267)}\nTree:  cos(((x84)**(-1.7732992248801267) cos sin(x35(/(x90, x21, cos(sin((x32((-1.7732992248801267)**(x70)) * x75))))))))', 'Equation constants: {1: np.float64(-7.728577771287086), 2: np.float64(-7.728577771287086)}\nTree:  cos((pow(x32, -7.728577771287086, sin(-7.728577771287086)) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(-4.614576598330733)}\nTree:  cos(((x32)**(-4.614576598330733) cos sin(x35)))', 'Equation constants: {1: np.float64(4.3849575735492685), 2: np.float64(4.3849575735492685), 3: np.float64(4.3849575735492685)}\nTree:  cos(((x32(sin(4.3849575735492685)))**(4.3849575735492685) sin sin(((x19 / 4.3849575735492685) x35 cos(x64)))))', 'Equation constants: {1: np.float64(-4.6139292282873905)}\nTree:  cos(((x32)**(-4.6139292282873905) cos sin(x35(-(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(0.29049135962292816), 2: np.float64(0.29049135962292816), 3: np.float64(0.29049135962292816), 4: np.float64(0.29049135962292816), 6: np.float64(0.29049135962292816)}\nTree:  cos(((x32)**(0.29049135962292816) cos sin(x35((x21 / cos((cos((x57)**(((0.29049135962292816)**((x56)**(0.29049135962292816)) / 0.29049135962292816))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * 0.29049135962292816)))))))))))', 'Equation constants: {3: np.float64(0.4999999999999991)}\nTree:  0.4999999999999991', 'Equation constants: {1: np.float64(-0.3919255652251241), 2: np.float64(-0.3919255652251241), 3: np.float64(-0.3919255652251241)}\nTree:  cos(((x32)**(-0.3919255652251241) cos sin(x35(/(x90, x21, cos(((x32((-0.3919255652251241)**(x70)) * x75) sin (x28 / -0.3919255652251241))))))))', 'Equation constants: {4: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {4: np.float64(0.49999999999999956)}\nTree:  0.49999999999999956', 'Equation constants: {1: np.float64(2.724340824704452), 2: np.float64(2.724340824704452), 3: np.float64(2.724340824704452)}\nTree:  cos(((x37)**(2.724340824704452) cos sin(x35((x51 / const(cos(2.724340824704452)))))))', 'Equation constants: {1: np.float64(0.11575473499499221)}\nTree:  cos(sin((x32)**(0.11575473499499221)))', 'Equation constants: {1: np.float64(5.452229869459085), 2: np.float64(5.452229869459085)}\nTree:  cos(((x32)**(5.452229869459085) cos x32((5.452229869459085)**(x70))))', 'Equation constants: {1: np.float64(-9.265491179016552)}\nTree:  cos(((x32)**(-9.265491179016552) cos sin(x35(/(x90, x21, cos(sin((sin(x35) * x75))))))))', 'Equation constants: {1: np.float64(-3.187625132792977), 2: np.float64(-3.187625132792977), 3: np.float64(-3.187625132792977), 4: np.float64(-3.187625132792977), 5: np.float64(-3.187625132792977)}\nTree:  cos((((x39 * cos(((-3.187625132792977 * sin((sin((-3.187625132792977 - -3.187625132792977)) * cos(x19)))) + -3.187625132792977))))**(-3.187625132792977) cos sin(x35)))', 'Equation constants: {1: np.float64(-8.226359457461326)}\nTree:  cos(cos((x32)**(-8.226359457461326)))', 'Equation constants: {1: np.float64(1.6515584664144338), 2: np.float64(1.6515584664144338), 3: np.float64(1.6515584664144338)}\nTree:  cos(((1.6515584664144338)**(1.6515584664144338) cos (x81 * 1.6515584664144338)))', 'Equation constants: {1: np.float64(-6.5402679454206725)}\nTree:  cos(cos((x32)**(-6.5402679454206725)))', 'Equation constants: {1: np.float64(4.598629635934617)}\nTree:  cos(cos(pow(x32, 4.598629635934617, cos(x31))))', 'Equation constants: {1: np.float64(4.787450734366052), 2: np.float64(4.787450734366052)}\nTree:  cos(cos((4.787450734366052)**(4.787450734366052)))', 'Equation constants: {1: np.float64(-8.226122369235403)}\nTree:  cos(((x32)**(-8.226122369235403) cos sin(x35(-(x90, x21, cos(sin((x32 * x4))))))))', 'Equation constants: {1: np.float64(0.11575473499499221)}\nTree:  cos(sin(pow(x32, 0.11575473499499221, (x66 + x1))))', 'Equation constants: {1: np.float64(-4.6143624024918495)}\nTree:  cos(cos((x32)**(-4.6143624024918495)))', 'Equation constants: {3: np.float64(-7.330382858376212)}\nTree:  cos(-7.330382858376212)', 'Equation constants: {1: np.float64(-4.8884523002650475), 2: np.float64(-4.8884523002650475), 3: np.float64(-4.8884523002650475), 4: np.float64(-4.8884523002650475)}\nTree:  cos(((x32)**(-4.8884523002650475) cos sin(x35(/(x90, x21, cos(((((-4.8884523002650475)**(x70) x32 (-4.8884523002650475 - -4.8884523002650475)) * x75) sin (x28 / -4.8884523002650475))))))))', 'Equation constants: {1: np.float64(5.094942870932265), 4: np.float64(5.094942870932265)}\nTree:  (((x32)**(5.094942870932265) cos sin(x35((5.094942870932265 / x14)))) cos sin(x44))', 'Equation constants: {1: np.float64(6.561650252701764), 2: np.float64(6.561650252701764)}\nTree:  cos(((x32)**(6.561650252701764) cos sin(x35(/(x90, x21, cos(sin((cos(6.561650252701764) * x75))))))))', 'Equation constants: {2: np.float64(5.551115123125783e-17)}\nTree:  cos(cos((5.551115123125783e-17)**(x83)))', 'Equation constants: {1: np.float64(1.0047484241485125), 2: np.float64(1.0047484241485125)}\nTree:  sin(cos((1.0047484241485125)**(1.0047484241485125)))']
MSE: [np.float64(0.2557349172286448), np.float64(0.3406828631456886), np.float64(0.3732321802797232), np.float64(0.25335596345204914), np.float64(0.25), np.float64(0.36667380104002684), np.float64(0.2546574201900697), np.float64(0.34653677723896675), np.float64(0.2542163982035818), np.float64(0.3381004314601985)]
Generators: ['Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9727620968353976)', 'Generator(mode=real, range=(-8.623083068694031, 5.200916931305969), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5, 5), n_g=516, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.008194797671402047, unit=0.9341494777148692)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=484, sigma_y=0.02165170936617406, unit=0.9925131076781933)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.027064636707717575, unit=0.9925131076781933)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(0.13136000000000003, 0.8686400000000001), n_g=277, sigma_y=0.030476188866285954, unit=0.5273773045472607)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.011800508646818947, unit=0.8492267979226084)', 'Generator(mode=real, range=(-2, 2), n_g=710, sigma_y=0.009833757205682457, unit=0.7720243617478257)', 'Generator(mode=real, range=(-0.8192, 0.8192), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=484, sigma_y=0.02165170936617406, unit=0.9925131076781933)', 'Generator(mode=real, range=(-1.2167980266383818, 1.2408019733616185), n_g=806, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.7308505611084879)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=548, sigma_y=0.03247756404926109, unit=0.893261796910374)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-0.8192, 0.8192), n_g=806, sigma_y=0.005244670509697311, unit=0.7643041181303475)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.02165170936617406, unit=0.9022846433438121)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-6.5446171056426845, 4.975382894357315), n_g=580, sigma_y=0.01443447291078271, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.01443447291078271, unit=0.8932617969103741)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.8843291789412703)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.2167980266383818, 1.2408019733616185), n_g=806, sigma_y=0.009833757205682456, unit=0.7643041181303475)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.7308505611084879)']
Gen 43: 6 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {1: np.float64(7.897696288316634), 2: np.float64(7.897696288316634), 3: np.float64(7.897696288316634)}\nTree:  cos(((x32)**(7.897696288316634) cos (((x19 / const(cos(7.897696288316634))) x35 cos(x39)) sin (x11 - x7))))', 'Equation constants: {1: np.float64(-8.092053975918025), 2: np.float64(-8.092053975918025), 3: np.float64(-8.092053975918025)}\nTree:  cos(((-8.092053975918025)**(-8.092053975918025) cos (x81 * -8.092053975918025)))', 'Equation constants: {2: np.float64(-4.992262336194222e-07), 3: np.float64(-4.992262336194222e-07), 4: np.float64(-4.992262336194222e-07), 5: np.float64(-4.992262336194222e-07)}\nTree:  (((sin(((sin(((-4.992262336194222e-07 / x31) - cos(x65))))**(x91) / -4.992262336194222e-07)) - x1) * -4.992262336194222e-07) + -4.992262336194222e-07)', 'Equation constants: {0: np.float64(0.5403377001294027), 1: np.float64(0.5403377001294027), 2: np.float64(0.5403377001294027)}\nTree:  ((pow(x78, 0.5403377001294027, cos(x75)) * (0.5403377001294027 / x21)) + 0.5403377001294027)', 'Equation constants: {1: np.float64(-4.613924575780599)}\nTree:  cos(cos((x32)**(-4.613924575780599)))', 'Equation constants: {1: np.float64(-1.7732992248801267), 2: np.float64(-1.7732992248801267)}\nTree:  cos(((x84)**(-1.7732992248801267) cos sin(x35(/(x90, x21, cos(sin((x32((-1.7732992248801267)**(x70)) * x75))))))))', 'Equation constants: {1: np.float64(-7.728577771287086), 2: np.float64(-7.728577771287086)}\nTree:  cos((pow(x32, -7.728577771287086, sin(-7.728577771287086)) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(-4.614576598330733)}\nTree:  cos(((x32)**(-4.614576598330733) cos sin(x35)))', 'Equation constants: {1: np.float64(4.3849575735492685), 2: np.float64(4.3849575735492685), 3: np.float64(4.3849575735492685)}\nTree:  cos(((x32(sin(4.3849575735492685)))**(4.3849575735492685) sin sin(((x19 / 4.3849575735492685) x35 cos(x64)))))', 'Equation constants: {1: np.float64(-4.6139292282873905)}\nTree:  cos(((x32)**(-4.6139292282873905) cos sin(x35(-(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(0.29049135962292816), 2: np.float64(0.29049135962292816), 3: np.float64(0.29049135962292816), 4: np.float64(0.29049135962292816), 6: np.float64(0.29049135962292816)}\nTree:  cos(((x32)**(0.29049135962292816) cos sin(x35((x21 / cos((cos((x57)**(((0.29049135962292816)**((x56)**(0.29049135962292816)) / 0.29049135962292816))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * 0.29049135962292816)))))))))))', 'Equation constants: {3: np.float64(0.4999999999999991)}\nTree:  0.4999999999999991', 'Equation constants: {1: np.float64(-0.3919255652251241), 2: np.float64(-0.3919255652251241), 3: np.float64(-0.3919255652251241)}\nTree:  cos(((x32)**(-0.3919255652251241) cos sin(x35(/(x90, x21, cos(((x32((-0.3919255652251241)**(x70)) * x75) sin (x28 / -0.3919255652251241))))))))', 'Equation constants: {4: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {4: np.float64(0.49999999999999956)}\nTree:  0.49999999999999956', 'Equation constants: {1: np.float64(2.724340824704452), 2: np.float64(2.724340824704452), 3: np.float64(2.724340824704452)}\nTree:  cos(((x37)**(2.724340824704452) cos sin(x35((x51 / const(cos(2.724340824704452)))))))', 'Equation constants: {1: np.float64(0.11575473499499221)}\nTree:  cos(sin((x32)**(0.11575473499499221)))', 'Equation constants: {1: np.float64(5.452229869459085), 2: np.float64(5.452229869459085)}\nTree:  cos(((x32)**(5.452229869459085) cos x32((5.452229869459085)**(x70))))', 'Equation constants: {1: np.float64(-9.265491179016552)}\nTree:  cos(((x32)**(-9.265491179016552) cos sin(x35(/(x90, x21, cos(sin((sin(x35) * x75))))))))', 'Equation constants: {1: np.float64(-3.187625132792977), 2: np.float64(-3.187625132792977), 3: np.float64(-3.187625132792977), 4: np.float64(-3.187625132792977), 5: np.float64(-3.187625132792977)}\nTree:  cos((((x39 * cos(((-3.187625132792977 * sin((sin((-3.187625132792977 - -3.187625132792977)) * cos(x19)))) + -3.187625132792977))))**(-3.187625132792977) cos sin(x35)))', 'Equation constants: {1: np.float64(-8.226359457461326)}\nTree:  cos(cos((x32)**(-8.226359457461326)))', 'Equation constants: {1: np.float64(1.6515584664144338), 2: np.float64(1.6515584664144338), 3: np.float64(1.6515584664144338)}\nTree:  cos(((1.6515584664144338)**(1.6515584664144338) cos (x81 * 1.6515584664144338)))', 'Equation constants: {1: np.float64(-6.5402679454206725)}\nTree:  cos(cos((x32)**(-6.5402679454206725)))', 'Equation constants: {1: np.float64(4.598629635934617)}\nTree:  cos(cos(pow(x32, 4.598629635934617, cos(x31))))', 'Equation constants: {1: np.float64(4.787450734366052), 2: np.float64(4.787450734366052)}\nTree:  cos(cos((4.787450734366052)**(4.787450734366052)))', 'Equation constants: {1: np.float64(-8.226122369235403)}\nTree:  cos(((x32)**(-8.226122369235403) cos sin(x35(-(x90, x21, cos(sin((x32 * x4))))))))', 'Equation constants: {1: np.float64(0.11575473499499221)}\nTree:  cos(sin(pow(x32, 0.11575473499499221, (x66 + x1))))', 'Equation constants: {1: np.float64(-4.6143624024918495)}\nTree:  cos(cos((x32)**(-4.6143624024918495)))', 'Equation constants: {3: np.float64(-7.330382858376212)}\nTree:  cos(-7.330382858376212)', 'Equation constants: {1: np.float64(-4.8884523002650475), 2: np.float64(-4.8884523002650475), 3: np.float64(-4.8884523002650475), 4: np.float64(-4.8884523002650475)}\nTree:  cos(((x32)**(-4.8884523002650475) cos sin(x35(/(x90, x21, cos(((((-4.8884523002650475)**(x70) x32 (-4.8884523002650475 - -4.8884523002650475)) * x75) sin (x28 / -4.8884523002650475))))))))', 'Equation constants: {1: np.float64(5.094942870932265), 4: np.float64(5.094942870932265)}\nTree:  (((x32)**(5.094942870932265) cos sin(x35((5.094942870932265 / x14)))) cos sin(x44))', 'Equation constants: {1: np.float64(6.561650252701764), 2: np.float64(6.561650252701764)}\nTree:  cos(((x32)**(6.561650252701764) cos sin(x35(/(x90, x21, cos(sin((cos(6.561650252701764) * x75))))))))', 'Equation constants: {2: np.float64(5.551115123125783e-17)}\nTree:  cos(cos((5.551115123125783e-17)**(x83)))', 'Equation constants: {1: np.float64(1.0047484241485125), 2: np.float64(1.0047484241485125)}\nTree:  sin(cos((1.0047484241485125)**(1.0047484241485125)))', 'Equation constants: {1: np.float64(-10.202091920369972)}\nTree:  cos(cos(pow(x32, -10.202091920369972, cos(x31))))', 'Equation constants: {1: np.float64(5.792530473136285), 2: np.float64(5.792530473136285)}\nTree:  cos(((x32)**(5.792530473136285) cos sin(x35(/(x90, x21, cos(sin((cos(5.792530473136285) * x75))))))))', 'Equation constants: {1: np.float64(-4.61391743418782)}\nTree:  cos(((x32)**(-4.61391743418782) cos sin(x35(-(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(6.683239394682616), 2: np.float64(6.683239394682616)}\nTree:  cos((pow(x32, 6.683239394682616, sin(6.683239394682616)) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(-0.013485526729461607)}\nTree:  cos(cos((-0.013485526729461607)**(x83)))', 'Equation constants: {1: np.float64(-6.797954325279023), 4: np.float64(-6.797954325279023)}\nTree:  (((x32)**(-6.797954325279023) cos sin(x35((-6.797954325279023 / x14)))) cos sin(x44))']
MSE: [np.float64(0.2852101378476835), np.float64(0.2521612222031974), np.float64(0.25411782084651036), np.float64(0.35025285875284823), np.float64(0.251882132604672), np.float64(4853123975.075777), np.float64(0.25290827695758755), np.float64(0.4236335402163186), np.float64(0.2541645985058648), np.float64(0.33939754835444774)]
Generators: ['Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.011800508646818947, unit=0.8492267979226084)', 'Generator(mode=real, range=(-2, 2), n_g=710, sigma_y=0.009833757205682457, unit=0.7720243617478257)', 'Generator(mode=real, range=(-0.8192, 0.8192), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-5, 5), n_g=580, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=484, sigma_y=0.02165170936617406, unit=0.9925131076781933)', 'Generator(mode=real, range=(-1.2167980266383818, 1.2408019733616185), n_g=806, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5.784617105642685, 4.215382894357315), n_g=548, sigma_y=0.02255386392309798, unit=0.7308505611084879)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=548, sigma_y=0.03247756404926109, unit=0.893261796910374)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-0.8192, 0.8192), n_g=806, sigma_y=0.005244670509697311, unit=0.7643041181303475)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.02165170936617406, unit=0.9022846433438121)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-6.5446171056426845, 4.975382894357315), n_g=580, sigma_y=0.01443447291078271, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.01443447291078271, unit=0.8932617969103741)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.8843291789412703)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.2167980266383818, 1.2408019733616185), n_g=806, sigma_y=0.009833757205682456, unit=0.7643041181303475)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.7308505611084879)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.9341494777148692)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-0.8192, 0.8192), n_g=806, sigma_y=0.005244670509697311, unit=0.7643041181303475)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.027064636707717575, unit=0.7308505611084879)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9727620968353976)', 'Generator(mode=real, range=(-5.76, 5.76), n_g=548, sigma_y=0.03247756404926109, unit=0.893261796910374)', 'Generator(mode=real, range=(-5.586596710798098, 6.413403289201902), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.007867005764545966, unit=0.8492267979226084)']
Gen 44: 5 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {1: np.float64(-1.7732992248801267), 2: np.float64(-1.7732992248801267)}\nTree:  cos(((x84)**(-1.7732992248801267) cos sin(x35(/(x90, x21, cos(sin((x32((-1.7732992248801267)**(x70)) * x75))))))))', 'Equation constants: {1: np.float64(-7.728577771287086), 2: np.float64(-7.728577771287086)}\nTree:  cos((pow(x32, -7.728577771287086, sin(-7.728577771287086)) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(-4.614576598330733)}\nTree:  cos(((x32)**(-4.614576598330733) cos sin(x35)))', 'Equation constants: {1: np.float64(4.3849575735492685), 2: np.float64(4.3849575735492685), 3: np.float64(4.3849575735492685)}\nTree:  cos(((x32(sin(4.3849575735492685)))**(4.3849575735492685) sin sin(((x19 / 4.3849575735492685) x35 cos(x64)))))', 'Equation constants: {1: np.float64(-4.6139292282873905)}\nTree:  cos(((x32)**(-4.6139292282873905) cos sin(x35(-(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(0.29049135962292816), 2: np.float64(0.29049135962292816), 3: np.float64(0.29049135962292816), 4: np.float64(0.29049135962292816), 6: np.float64(0.29049135962292816)}\nTree:  cos(((x32)**(0.29049135962292816) cos sin(x35((x21 / cos((cos((x57)**(((0.29049135962292816)**((x56)**(0.29049135962292816)) / 0.29049135962292816))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * 0.29049135962292816)))))))))))', 'Equation constants: {3: np.float64(0.4999999999999991)}\nTree:  0.4999999999999991', 'Equation constants: {1: np.float64(-0.3919255652251241), 2: np.float64(-0.3919255652251241), 3: np.float64(-0.3919255652251241)}\nTree:  cos(((x32)**(-0.3919255652251241) cos sin(x35(/(x90, x21, cos(((x32((-0.3919255652251241)**(x70)) * x75) sin (x28 / -0.3919255652251241))))))))', 'Equation constants: {4: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {4: np.float64(0.49999999999999956)}\nTree:  0.49999999999999956', 'Equation constants: {1: np.float64(2.724340824704452), 2: np.float64(2.724340824704452), 3: np.float64(2.724340824704452)}\nTree:  cos(((x37)**(2.724340824704452) cos sin(x35((x51 / const(cos(2.724340824704452)))))))', 'Equation constants: {1: np.float64(0.11575473499499221)}\nTree:  cos(sin((x32)**(0.11575473499499221)))', 'Equation constants: {1: np.float64(5.452229869459085), 2: np.float64(5.452229869459085)}\nTree:  cos(((x32)**(5.452229869459085) cos x32((5.452229869459085)**(x70))))', 'Equation constants: {1: np.float64(-9.265491179016552)}\nTree:  cos(((x32)**(-9.265491179016552) cos sin(x35(/(x90, x21, cos(sin((sin(x35) * x75))))))))', 'Equation constants: {1: np.float64(-3.187625132792977), 2: np.float64(-3.187625132792977), 3: np.float64(-3.187625132792977), 4: np.float64(-3.187625132792977), 5: np.float64(-3.187625132792977)}\nTree:  cos((((x39 * cos(((-3.187625132792977 * sin((sin((-3.187625132792977 - -3.187625132792977)) * cos(x19)))) + -3.187625132792977))))**(-3.187625132792977) cos sin(x35)))', 'Equation constants: {1: np.float64(-8.226359457461326)}\nTree:  cos(cos((x32)**(-8.226359457461326)))', 'Equation constants: {1: np.float64(1.6515584664144338), 2: np.float64(1.6515584664144338), 3: np.float64(1.6515584664144338)}\nTree:  cos(((1.6515584664144338)**(1.6515584664144338) cos (x81 * 1.6515584664144338)))', 'Equation constants: {1: np.float64(-6.5402679454206725)}\nTree:  cos(cos((x32)**(-6.5402679454206725)))', 'Equation constants: {1: np.float64(4.598629635934617)}\nTree:  cos(cos(pow(x32, 4.598629635934617, cos(x31))))', 'Equation constants: {1: np.float64(4.787450734366052), 2: np.float64(4.787450734366052)}\nTree:  cos(cos((4.787450734366052)**(4.787450734366052)))', 'Equation constants: {1: np.float64(-8.226122369235403)}\nTree:  cos(((x32)**(-8.226122369235403) cos sin(x35(-(x90, x21, cos(sin((x32 * x4))))))))', 'Equation constants: {1: np.float64(0.11575473499499221)}\nTree:  cos(sin(pow(x32, 0.11575473499499221, (x66 + x1))))', 'Equation constants: {1: np.float64(-4.6143624024918495)}\nTree:  cos(cos((x32)**(-4.6143624024918495)))', 'Equation constants: {3: np.float64(-7.330382858376212)}\nTree:  cos(-7.330382858376212)', 'Equation constants: {1: np.float64(-4.8884523002650475), 2: np.float64(-4.8884523002650475), 3: np.float64(-4.8884523002650475), 4: np.float64(-4.8884523002650475)}\nTree:  cos(((x32)**(-4.8884523002650475) cos sin(x35(/(x90, x21, cos(((((-4.8884523002650475)**(x70) x32 (-4.8884523002650475 - -4.8884523002650475)) * x75) sin (x28 / -4.8884523002650475))))))))', 'Equation constants: {1: np.float64(5.094942870932265), 4: np.float64(5.094942870932265)}\nTree:  (((x32)**(5.094942870932265) cos sin(x35((5.094942870932265 / x14)))) cos sin(x44))', 'Equation constants: {1: np.float64(6.561650252701764), 2: np.float64(6.561650252701764)}\nTree:  cos(((x32)**(6.561650252701764) cos sin(x35(/(x90, x21, cos(sin((cos(6.561650252701764) * x75))))))))', 'Equation constants: {2: np.float64(5.551115123125783e-17)}\nTree:  cos(cos((5.551115123125783e-17)**(x83)))', 'Equation constants: {1: np.float64(1.0047484241485125), 2: np.float64(1.0047484241485125)}\nTree:  sin(cos((1.0047484241485125)**(1.0047484241485125)))', 'Equation constants: {1: np.float64(-10.202091920369972)}\nTree:  cos(cos(pow(x32, -10.202091920369972, cos(x31))))', 'Equation constants: {1: np.float64(5.792530473136285), 2: np.float64(5.792530473136285)}\nTree:  cos(((x32)**(5.792530473136285) cos sin(x35(/(x90, x21, cos(sin((cos(5.792530473136285) * x75))))))))', 'Equation constants: {1: np.float64(-4.61391743418782)}\nTree:  cos(((x32)**(-4.61391743418782) cos sin(x35(-(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(6.683239394682616), 2: np.float64(6.683239394682616)}\nTree:  cos((pow(x32, 6.683239394682616, sin(6.683239394682616)) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(-0.013485526729461607)}\nTree:  cos(cos((-0.013485526729461607)**(x83)))', 'Equation constants: {1: np.float64(-6.797954325279023), 4: np.float64(-6.797954325279023)}\nTree:  (((x32)**(-6.797954325279023) cos sin(x35((-6.797954325279023 / x14)))) cos sin(x44))', 'Equation constants: {1: np.float64(2.7775298196937754), 2: np.float64(2.7775298196937754)}\nTree:  cos(cos(pow(x32, 2.7775298196937754, sin(2.7775298196937754))))', 'Equation constants: {1: np.float64(0.11573770079755505)}\nTree:  cos(sin(pow(x32, 0.11573770079755505, (x66 + x1))))', 'Equation constants: {1: np.float64(1.243960094338469), 3: np.float64(1.243960094338469), 4: np.float64(1.243960094338469)}\nTree:  cos(((x84)**(1.243960094338469) cos sin(x35(/(x90, x21, cos(sin(((1.243960094338469 / (1.243960094338469 + x83)) + cos((x96 - x11))))))))))', 'Equation constants: {1: np.float64(-4.694246371123885), 2: np.float64(-4.694246371123885), 3: np.float64(-4.694246371123885), 4: np.float64(-4.694246371123885), 6: np.float64(-4.694246371123885)}\nTree:  cos(((x32)**(-4.694246371123885) cos sin(x35((x21 / cos((cos((x57)**(((-4.694246371123885)**((x56)**(-4.694246371123885)) / const((x15)**(x28))))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * -4.694246371123885)))))))))))', 'Equation constants: {3: np.float64(-1.047197553979741)}\nTree:  cos(-1.047197553979741)']
MSE: [np.float64(0.2556833926090113), np.float64(0.25602944701966324), np.float64(0.25573491695094086), np.float64(394014681.48313123), np.float64(0.4404302993564041), np.float64(0.30096495294733233), np.float64(0.2534621068149967), np.float64(0.3528247352766788), np.float64(0.25), np.float64(0.949792935299629)]
Generators: ['Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-0.8192, 0.8192), n_g=806, sigma_y=0.005244670509697311, unit=0.7643041181303475)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.02165170936617406, unit=0.9022846433438121)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.893261796910374)', 'Generator(mode=real, range=(-6.5446171056426845, 4.975382894357315), n_g=580, sigma_y=0.01443447291078271, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5, 5), n_g=484, sigma_y=0.01443447291078271, unit=0.8932617969103741)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.8843291789412703)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.2167980266383818, 1.2408019733616185), n_g=806, sigma_y=0.009833757205682456, unit=0.7643041181303475)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.7308505611084879)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.9341494777148692)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-0.8192, 0.8192), n_g=806, sigma_y=0.005244670509697311, unit=0.7643041181303475)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.027064636707717575, unit=0.7308505611084879)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9727620968353976)', 'Generator(mode=real, range=(-5.76, 5.76), n_g=548, sigma_y=0.03247756404926109, unit=0.893261796910374)', 'Generator(mode=real, range=(-5.586596710798098, 6.413403289201902), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.007867005764545966, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.007867005764545966, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=516, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.254296163250517, 4.745703836749483), n_g=548, sigma_y=0.027064636707717575, unit=0.9727620968353976)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.007867005764545966, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9925131076781933)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)']
Gen 45: 7 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {1: np.float64(-0.3919255652251241), 2: np.float64(-0.3919255652251241), 3: np.float64(-0.3919255652251241)}\nTree:  cos(((x32)**(-0.3919255652251241) cos sin(x35(/(x90, x21, cos(((x32((-0.3919255652251241)**(x70)) * x75) sin (x28 / -0.3919255652251241))))))))', 'Equation constants: {4: np.float64(0.5000000000000007)}\nTree:  0.5000000000000007', 'Equation constants: {4: np.float64(0.49999999999999956)}\nTree:  0.49999999999999956', 'Equation constants: {1: np.float64(2.724340824704452), 2: np.float64(2.724340824704452), 3: np.float64(2.724340824704452)}\nTree:  cos(((x37)**(2.724340824704452) cos sin(x35((x51 / const(cos(2.724340824704452)))))))', 'Equation constants: {1: np.float64(0.11575473499499221)}\nTree:  cos(sin((x32)**(0.11575473499499221)))', 'Equation constants: {1: np.float64(5.452229869459085), 2: np.float64(5.452229869459085)}\nTree:  cos(((x32)**(5.452229869459085) cos x32((5.452229869459085)**(x70))))', 'Equation constants: {1: np.float64(-9.265491179016552)}\nTree:  cos(((x32)**(-9.265491179016552) cos sin(x35(/(x90, x21, cos(sin((sin(x35) * x75))))))))', 'Equation constants: {1: np.float64(-3.187625132792977), 2: np.float64(-3.187625132792977), 3: np.float64(-3.187625132792977), 4: np.float64(-3.187625132792977), 5: np.float64(-3.187625132792977)}\nTree:  cos((((x39 * cos(((-3.187625132792977 * sin((sin((-3.187625132792977 - -3.187625132792977)) * cos(x19)))) + -3.187625132792977))))**(-3.187625132792977) cos sin(x35)))', 'Equation constants: {1: np.float64(-8.226359457461326)}\nTree:  cos(cos((x32)**(-8.226359457461326)))', 'Equation constants: {1: np.float64(1.6515584664144338), 2: np.float64(1.6515584664144338), 3: np.float64(1.6515584664144338)}\nTree:  cos(((1.6515584664144338)**(1.6515584664144338) cos (x81 * 1.6515584664144338)))', 'Equation constants: {1: np.float64(-6.5402679454206725)}\nTree:  cos(cos((x32)**(-6.5402679454206725)))', 'Equation constants: {1: np.float64(4.598629635934617)}\nTree:  cos(cos(pow(x32, 4.598629635934617, cos(x31))))', 'Equation constants: {1: np.float64(4.787450734366052), 2: np.float64(4.787450734366052)}\nTree:  cos(cos((4.787450734366052)**(4.787450734366052)))', 'Equation constants: {1: np.float64(-8.226122369235403)}\nTree:  cos(((x32)**(-8.226122369235403) cos sin(x35(-(x90, x21, cos(sin((x32 * x4))))))))', 'Equation constants: {1: np.float64(0.11575473499499221)}\nTree:  cos(sin(pow(x32, 0.11575473499499221, (x66 + x1))))', 'Equation constants: {1: np.float64(-4.6143624024918495)}\nTree:  cos(cos((x32)**(-4.6143624024918495)))', 'Equation constants: {3: np.float64(-7.330382858376212)}\nTree:  cos(-7.330382858376212)', 'Equation constants: {1: np.float64(-4.8884523002650475), 2: np.float64(-4.8884523002650475), 3: np.float64(-4.8884523002650475), 4: np.float64(-4.8884523002650475)}\nTree:  cos(((x32)**(-4.8884523002650475) cos sin(x35(/(x90, x21, cos(((((-4.8884523002650475)**(x70) x32 (-4.8884523002650475 - -4.8884523002650475)) * x75) sin (x28 / -4.8884523002650475))))))))', 'Equation constants: {1: np.float64(5.094942870932265), 4: np.float64(5.094942870932265)}\nTree:  (((x32)**(5.094942870932265) cos sin(x35((5.094942870932265 / x14)))) cos sin(x44))', 'Equation constants: {1: np.float64(6.561650252701764), 2: np.float64(6.561650252701764)}\nTree:  cos(((x32)**(6.561650252701764) cos sin(x35(/(x90, x21, cos(sin((cos(6.561650252701764) * x75))))))))', 'Equation constants: {2: np.float64(5.551115123125783e-17)}\nTree:  cos(cos((5.551115123125783e-17)**(x83)))', 'Equation constants: {1: np.float64(1.0047484241485125), 2: np.float64(1.0047484241485125)}\nTree:  sin(cos((1.0047484241485125)**(1.0047484241485125)))', 'Equation constants: {1: np.float64(-10.202091920369972)}\nTree:  cos(cos(pow(x32, -10.202091920369972, cos(x31))))', 'Equation constants: {1: np.float64(5.792530473136285), 2: np.float64(5.792530473136285)}\nTree:  cos(((x32)**(5.792530473136285) cos sin(x35(/(x90, x21, cos(sin((cos(5.792530473136285) * x75))))))))', 'Equation constants: {1: np.float64(-4.61391743418782)}\nTree:  cos(((x32)**(-4.61391743418782) cos sin(x35(-(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(6.683239394682616), 2: np.float64(6.683239394682616)}\nTree:  cos((pow(x32, 6.683239394682616, sin(6.683239394682616)) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(-0.013485526729461607)}\nTree:  cos(cos((-0.013485526729461607)**(x83)))', 'Equation constants: {1: np.float64(-6.797954325279023), 4: np.float64(-6.797954325279023)}\nTree:  (((x32)**(-6.797954325279023) cos sin(x35((-6.797954325279023 / x14)))) cos sin(x44))', 'Equation constants: {1: np.float64(2.7775298196937754), 2: np.float64(2.7775298196937754)}\nTree:  cos(cos(pow(x32, 2.7775298196937754, sin(2.7775298196937754))))', 'Equation constants: {1: np.float64(0.11573770079755505)}\nTree:  cos(sin(pow(x32, 0.11573770079755505, (x66 + x1))))', 'Equation constants: {1: np.float64(1.243960094338469), 3: np.float64(1.243960094338469), 4: np.float64(1.243960094338469)}\nTree:  cos(((x84)**(1.243960094338469) cos sin(x35(/(x90, x21, cos(sin(((1.243960094338469 / (1.243960094338469 + x83)) + cos((x96 - x11))))))))))', 'Equation constants: {1: np.float64(-4.694246371123885), 2: np.float64(-4.694246371123885), 3: np.float64(-4.694246371123885), 4: np.float64(-4.694246371123885), 6: np.float64(-4.694246371123885)}\nTree:  cos(((x32)**(-4.694246371123885) cos sin(x35((x21 / cos((cos((x57)**(((-4.694246371123885)**((x56)**(-4.694246371123885)) / const((x15)**(x28))))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * -4.694246371123885)))))))))))', 'Equation constants: {3: np.float64(-1.047197553979741)}\nTree:  cos(-1.047197553979741)', 'Equation constants: {1: np.float64(-8.225920075815122)}\nTree:  cos(((x32)**(-8.225920075815122) cos sin(x35((x90 / x21)))))', 'Equation constants: {2: np.float64(-7.139948495728545)}\nTree:  cos(cos((-7.139948495728545)**(x83)))', 'Equation constants: {1: np.float64(-9.266442391799398)}\nTree:  cos(((x32)**(-9.266442391799398) cos sin(x35((x90 - x21)))))', 'Equation constants: {1: np.float64(8.449924606336662), 4: np.float64(8.449924606336662)}\nTree:  (((x32)**(8.449924606336662) cos sin(x35((8.449924606336662 / x14)))) cos sin(x44))', 'Equation constants: {1: np.float64(-0.6180564115232592), 3: np.float64(-0.6180564115232592), 4: np.float64(-0.6180564115232592)}\nTree:  cos(((x84)**(-0.6180564115232592) cos sin(x35(/(x90, x21, cos(sin(((-0.6180564115232592 / (-0.6180564115232592 + x83)) + cos((x96 - x11))))))))))', 'Equation constants: {1: np.float64(0.772097872514534), 5: np.float64(0.772097872514534)}\nTree:  (((x32)**(0.772097872514534) cos sin(x35((0.772097872514534 / x14)))) cos sin(x44))', 'Equation constants: {2: np.float64(-11.715541194298199), 3: np.float64(-11.715541194298199)}\nTree:  cos(((x32)**(-11.715541194298199) cos sin(x35(/(x90, x21, cos(sin((cos(-11.715541194298199) * x75))))))))']
MSE: [np.float64(0.4508364411718593), np.float64(0.25335596342373784), np.float64(389557898.6972094), np.float64(0.31908217582998244), np.float64(0.30380851807493126), np.float64(0.2516242761891751), np.float64(0.2944387720598955), np.float64(0.2524293351330892), np.float64(0.2989949794295217), np.float64(0.3189733175017118), np.float64(0.2945006801634064), np.float64(0.2521612222031974)]
Generators: ['Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.8843291789412703)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.2167980266383818, 1.2408019733616185), n_g=806, sigma_y=0.009833757205682456, unit=0.7643041181303475)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.02255386392309798, unit=0.7308505611084879)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.9341494777148692)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-0.8192, 0.8192), n_g=806, sigma_y=0.005244670509697311, unit=0.7643041181303475)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.027064636707717575, unit=0.7308505611084879)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9727620968353976)', 'Generator(mode=real, range=(-5.76, 5.76), n_g=548, sigma_y=0.03247756404926109, unit=0.893261796910374)', 'Generator(mode=real, range=(-5.586596710798098, 6.413403289201902), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.007867005764545966, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.007867005764545966, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=516, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.254296163250517, 4.745703836749483), n_g=548, sigma_y=0.027064636707717575, unit=0.9727620968353976)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.007867005764545966, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9925131076781933)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.6878737063173127)', 'Generator(mode=real, range=(-6.372291037290265, 5.147708962709735), n_g=548, sigma_y=0.03247756404926109, unit=0.893261796910374)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.02165170936617406, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=870, sigma_y=0.006555838137121638, unit=0.8492267979226084)']
Gen 46: 7 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {1: np.float64(-3.187625132792977), 2: np.float64(-3.187625132792977), 3: np.float64(-3.187625132792977), 4: np.float64(-3.187625132792977), 5: np.float64(-3.187625132792977)}\nTree:  cos((((x39 * cos(((-3.187625132792977 * sin((sin((-3.187625132792977 - -3.187625132792977)) * cos(x19)))) + -3.187625132792977))))**(-3.187625132792977) cos sin(x35)))', 'Equation constants: {1: np.float64(-8.226359457461326)}\nTree:  cos(cos((x32)**(-8.226359457461326)))', 'Equation constants: {1: np.float64(1.6515584664144338), 2: np.float64(1.6515584664144338), 3: np.float64(1.6515584664144338)}\nTree:  cos(((1.6515584664144338)**(1.6515584664144338) cos (x81 * 1.6515584664144338)))', 'Equation constants: {1: np.float64(-6.5402679454206725)}\nTree:  cos(cos((x32)**(-6.5402679454206725)))', 'Equation constants: {1: np.float64(4.598629635934617)}\nTree:  cos(cos(pow(x32, 4.598629635934617, cos(x31))))', 'Equation constants: {1: np.float64(4.787450734366052), 2: np.float64(4.787450734366052)}\nTree:  cos(cos((4.787450734366052)**(4.787450734366052)))', 'Equation constants: {1: np.float64(-8.226122369235403)}\nTree:  cos(((x32)**(-8.226122369235403) cos sin(x35(-(x90, x21, cos(sin((x32 * x4))))))))', 'Equation constants: {1: np.float64(0.11575473499499221)}\nTree:  cos(sin(pow(x32, 0.11575473499499221, (x66 + x1))))', 'Equation constants: {1: np.float64(-4.6143624024918495)}\nTree:  cos(cos((x32)**(-4.6143624024918495)))', 'Equation constants: {3: np.float64(-7.330382858376212)}\nTree:  cos(-7.330382858376212)', 'Equation constants: {1: np.float64(-4.8884523002650475), 2: np.float64(-4.8884523002650475), 3: np.float64(-4.8884523002650475), 4: np.float64(-4.8884523002650475)}\nTree:  cos(((x32)**(-4.8884523002650475) cos sin(x35(/(x90, x21, cos(((((-4.8884523002650475)**(x70) x32 (-4.8884523002650475 - -4.8884523002650475)) * x75) sin (x28 / -4.8884523002650475))))))))', 'Equation constants: {1: np.float64(5.094942870932265), 4: np.float64(5.094942870932265)}\nTree:  (((x32)**(5.094942870932265) cos sin(x35((5.094942870932265 / x14)))) cos sin(x44))', 'Equation constants: {1: np.float64(6.561650252701764), 2: np.float64(6.561650252701764)}\nTree:  cos(((x32)**(6.561650252701764) cos sin(x35(/(x90, x21, cos(sin((cos(6.561650252701764) * x75))))))))', 'Equation constants: {2: np.float64(5.551115123125783e-17)}\nTree:  cos(cos((5.551115123125783e-17)**(x83)))', 'Equation constants: {1: np.float64(1.0047484241485125), 2: np.float64(1.0047484241485125)}\nTree:  sin(cos((1.0047484241485125)**(1.0047484241485125)))', 'Equation constants: {1: np.float64(-10.202091920369972)}\nTree:  cos(cos(pow(x32, -10.202091920369972, cos(x31))))', 'Equation constants: {1: np.float64(5.792530473136285), 2: np.float64(5.792530473136285)}\nTree:  cos(((x32)**(5.792530473136285) cos sin(x35(/(x90, x21, cos(sin((cos(5.792530473136285) * x75))))))))', 'Equation constants: {1: np.float64(-4.61391743418782)}\nTree:  cos(((x32)**(-4.61391743418782) cos sin(x35(-(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(6.683239394682616), 2: np.float64(6.683239394682616)}\nTree:  cos((pow(x32, 6.683239394682616, sin(6.683239394682616)) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(-0.013485526729461607)}\nTree:  cos(cos((-0.013485526729461607)**(x83)))', 'Equation constants: {1: np.float64(-6.797954325279023), 4: np.float64(-6.797954325279023)}\nTree:  (((x32)**(-6.797954325279023) cos sin(x35((-6.797954325279023 / x14)))) cos sin(x44))', 'Equation constants: {1: np.float64(2.7775298196937754), 2: np.float64(2.7775298196937754)}\nTree:  cos(cos(pow(x32, 2.7775298196937754, sin(2.7775298196937754))))', 'Equation constants: {1: np.float64(0.11573770079755505)}\nTree:  cos(sin(pow(x32, 0.11573770079755505, (x66 + x1))))', 'Equation constants: {1: np.float64(1.243960094338469), 3: np.float64(1.243960094338469), 4: np.float64(1.243960094338469)}\nTree:  cos(((x84)**(1.243960094338469) cos sin(x35(/(x90, x21, cos(sin(((1.243960094338469 / (1.243960094338469 + x83)) + cos((x96 - x11))))))))))', 'Equation constants: {1: np.float64(-4.694246371123885), 2: np.float64(-4.694246371123885), 3: np.float64(-4.694246371123885), 4: np.float64(-4.694246371123885), 6: np.float64(-4.694246371123885)}\nTree:  cos(((x32)**(-4.694246371123885) cos sin(x35((x21 / cos((cos((x57)**(((-4.694246371123885)**((x56)**(-4.694246371123885)) / const((x15)**(x28))))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * -4.694246371123885)))))))))))', 'Equation constants: {3: np.float64(-1.047197553979741)}\nTree:  cos(-1.047197553979741)', 'Equation constants: {1: np.float64(-8.225920075815122)}\nTree:  cos(((x32)**(-8.225920075815122) cos sin(x35((x90 / x21)))))', 'Equation constants: {2: np.float64(-7.139948495728545)}\nTree:  cos(cos((-7.139948495728545)**(x83)))', 'Equation constants: {1: np.float64(-9.266442391799398)}\nTree:  cos(((x32)**(-9.266442391799398) cos sin(x35((x90 - x21)))))', 'Equation constants: {1: np.float64(8.449924606336662), 4: np.float64(8.449924606336662)}\nTree:  (((x32)**(8.449924606336662) cos sin(x35((8.449924606336662 / x14)))) cos sin(x44))', 'Equation constants: {1: np.float64(-0.6180564115232592), 3: np.float64(-0.6180564115232592), 4: np.float64(-0.6180564115232592)}\nTree:  cos(((x84)**(-0.6180564115232592) cos sin(x35(/(x90, x21, cos(sin(((-0.6180564115232592 / (-0.6180564115232592 + x83)) + cos((x96 - x11))))))))))', 'Equation constants: {1: np.float64(0.772097872514534), 5: np.float64(0.772097872514534)}\nTree:  (((x32)**(0.772097872514534) cos sin(x35((0.772097872514534 / x14)))) cos sin(x44))', 'Equation constants: {2: np.float64(-11.715541194298199), 3: np.float64(-11.715541194298199)}\nTree:  cos(((x32)**(-11.715541194298199) cos sin(x35(/(x90, x21, cos(sin((cos(-11.715541194298199) * x75))))))))', 'Equation constants: {1: np.float64(-7.5207231578653655), 2: np.float64(-7.5207231578653655)}\nTree:  cos(((x37)**(-7.5207231578653655) cos sin(x35((x51 / const(cos(x36)))))))', 'Equation constants: {1: np.float64(9.392828196021831), 4: np.float64(9.392828196021831)}\nTree:  cos(((x32)**(9.392828196021831) cos sin(x35((9.392828196021831 / x14)))))', 'Equation constants: {1: np.float64(-4.6142022627519355)}\nTree:  cos(cos((x32)**(-4.6142022627519355)))', 'Equation constants: {1: np.float64(9.855586006660108), 2: np.float64(9.855586006660108), 3: np.float64(9.855586006660108), 4: np.float64(9.855586006660108), 6: np.float64(9.855586006660108)}\nTree:  cos(((x32)**(9.855586006660108) cos sin(x35((x21 / cos((cos((x57)**(((9.855586006660108)**((x56)**(9.855586006660108)) / const((x15)**(x28))))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * 9.855586006660108)))))))))))', 'Equation constants: {1: np.float64(0.11575473499499221)}\nTree:  cos(sin((x32)**(0.11575473499499221)))', 'Equation constants: {1: np.float64(-4.614528799381598)}\nTree:  cos(((x32)**(-4.614528799381598) cos sin(x35(/(x90, x21, sin(sin((sin(x35) * x75))))))))', 'Equation constants: {1: np.float64(7.4778319296209546), 2: np.float64(7.4778319296209546)}\nTree:  cos((pow(x32, 7.4778319296209546, sin(7.4778319296209546)) cos sin(x35((x21 / cos(sin((x32 * x75))))))))']
MSE: [np.float64(0.3141515560962704), np.float64(0.253357229580784), np.float64(0.9798594937566213), np.float64(0.30604809956034423), np.float64(0.42998401488162474), np.float64(0.29768333212216563), np.float64(0.40846074186933967), np.float64(0.2557349172286448), np.float64(0.25335596339148353), np.float64(0.3444884928145036)]
Generators: ['Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.9341494777148692)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-0.8192, 0.8192), n_g=806, sigma_y=0.005244670509697311, unit=0.7643041181303475)', 'Generator(mode=real, range=(-4.784617105642685, 3.2153828943573153), n_g=548, sigma_y=0.027064636707717575, unit=0.7308505611084879)', 'Generator(mode=real, range=(-5, 5), n_g=548, sigma_y=0.027064636707717575, unit=0.9727620968353976)', 'Generator(mode=real, range=(-5.76, 5.76), n_g=548, sigma_y=0.03247756404926109, unit=0.893261796910374)', 'Generator(mode=real, range=(-5.586596710798098, 6.413403289201902), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.007867005764545966, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.007867005764545966, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=516, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.254296163250517, 4.745703836749483), n_g=548, sigma_y=0.027064636707717575, unit=0.9727620968353976)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.007867005764545966, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9925131076781933)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.6878737063173127)', 'Generator(mode=real, range=(-6.372291037290265, 5.147708962709735), n_g=548, sigma_y=0.03247756404926109, unit=0.893261796910374)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.02165170936617406, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=870, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=516, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.007867005764545966, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.2167980266383818, 1.2408019733616185), n_g=806, sigma_y=0.009833757205682456, unit=0.6878737063173127)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=516, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=548, sigma_y=0.01443447291078271, unit=0.9022846433438121)', 'Generator(mode=real, range=(-0.8071980266383817, 0.8312019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-0.98304, 0.98304), n_g=806, sigma_y=0.005244670509697311, unit=0.7643041181303475)']
Gen 47: 7 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {1: np.float64(0.11575473499499221)}\nTree:  cos(sin(pow(x32, 0.11575473499499221, (x66 + x1))))', 'Equation constants: {1: np.float64(-4.6143624024918495)}\nTree:  cos(cos((x32)**(-4.6143624024918495)))', 'Equation constants: {3: np.float64(-7.330382858376212)}\nTree:  cos(-7.330382858376212)', 'Equation constants: {1: np.float64(-4.8884523002650475), 2: np.float64(-4.8884523002650475), 3: np.float64(-4.8884523002650475), 4: np.float64(-4.8884523002650475)}\nTree:  cos(((x32)**(-4.8884523002650475) cos sin(x35(/(x90, x21, cos(((((-4.8884523002650475)**(x70) x32 (-4.8884523002650475 - -4.8884523002650475)) * x75) sin (x28 / -4.8884523002650475))))))))', 'Equation constants: {1: np.float64(5.094942870932265), 4: np.float64(5.094942870932265)}\nTree:  (((x32)**(5.094942870932265) cos sin(x35((5.094942870932265 / x14)))) cos sin(x44))', 'Equation constants: {1: np.float64(6.561650252701764), 2: np.float64(6.561650252701764)}\nTree:  cos(((x32)**(6.561650252701764) cos sin(x35(/(x90, x21, cos(sin((cos(6.561650252701764) * x75))))))))', 'Equation constants: {2: np.float64(5.551115123125783e-17)}\nTree:  cos(cos((5.551115123125783e-17)**(x83)))', 'Equation constants: {1: np.float64(1.0047484241485125), 2: np.float64(1.0047484241485125)}\nTree:  sin(cos((1.0047484241485125)**(1.0047484241485125)))', 'Equation constants: {1: np.float64(-10.202091920369972)}\nTree:  cos(cos(pow(x32, -10.202091920369972, cos(x31))))', 'Equation constants: {1: np.float64(5.792530473136285), 2: np.float64(5.792530473136285)}\nTree:  cos(((x32)**(5.792530473136285) cos sin(x35(/(x90, x21, cos(sin((cos(5.792530473136285) * x75))))))))', 'Equation constants: {1: np.float64(-4.61391743418782)}\nTree:  cos(((x32)**(-4.61391743418782) cos sin(x35(-(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(6.683239394682616), 2: np.float64(6.683239394682616)}\nTree:  cos((pow(x32, 6.683239394682616, sin(6.683239394682616)) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(-0.013485526729461607)}\nTree:  cos(cos((-0.013485526729461607)**(x83)))', 'Equation constants: {1: np.float64(-6.797954325279023), 4: np.float64(-6.797954325279023)}\nTree:  (((x32)**(-6.797954325279023) cos sin(x35((-6.797954325279023 / x14)))) cos sin(x44))', 'Equation constants: {1: np.float64(2.7775298196937754), 2: np.float64(2.7775298196937754)}\nTree:  cos(cos(pow(x32, 2.7775298196937754, sin(2.7775298196937754))))', 'Equation constants: {1: np.float64(0.11573770079755505)}\nTree:  cos(sin(pow(x32, 0.11573770079755505, (x66 + x1))))', 'Equation constants: {1: np.float64(1.243960094338469), 3: np.float64(1.243960094338469), 4: np.float64(1.243960094338469)}\nTree:  cos(((x84)**(1.243960094338469) cos sin(x35(/(x90, x21, cos(sin(((1.243960094338469 / (1.243960094338469 + x83)) + cos((x96 - x11))))))))))', 'Equation constants: {1: np.float64(-4.694246371123885), 2: np.float64(-4.694246371123885), 3: np.float64(-4.694246371123885), 4: np.float64(-4.694246371123885), 6: np.float64(-4.694246371123885)}\nTree:  cos(((x32)**(-4.694246371123885) cos sin(x35((x21 / cos((cos((x57)**(((-4.694246371123885)**((x56)**(-4.694246371123885)) / const((x15)**(x28))))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * -4.694246371123885)))))))))))', 'Equation constants: {3: np.float64(-1.047197553979741)}\nTree:  cos(-1.047197553979741)', 'Equation constants: {1: np.float64(-8.225920075815122)}\nTree:  cos(((x32)**(-8.225920075815122) cos sin(x35((x90 / x21)))))', 'Equation constants: {2: np.float64(-7.139948495728545)}\nTree:  cos(cos((-7.139948495728545)**(x83)))', 'Equation constants: {1: np.float64(-9.266442391799398)}\nTree:  cos(((x32)**(-9.266442391799398) cos sin(x35((x90 - x21)))))', 'Equation constants: {1: np.float64(8.449924606336662), 4: np.float64(8.449924606336662)}\nTree:  (((x32)**(8.449924606336662) cos sin(x35((8.449924606336662 / x14)))) cos sin(x44))', 'Equation constants: {1: np.float64(-0.6180564115232592), 3: np.float64(-0.6180564115232592), 4: np.float64(-0.6180564115232592)}\nTree:  cos(((x84)**(-0.6180564115232592) cos sin(x35(/(x90, x21, cos(sin(((-0.6180564115232592 / (-0.6180564115232592 + x83)) + cos((x96 - x11))))))))))', 'Equation constants: {1: np.float64(0.772097872514534), 5: np.float64(0.772097872514534)}\nTree:  (((x32)**(0.772097872514534) cos sin(x35((0.772097872514534 / x14)))) cos sin(x44))', 'Equation constants: {2: np.float64(-11.715541194298199), 3: np.float64(-11.715541194298199)}\nTree:  cos(((x32)**(-11.715541194298199) cos sin(x35(/(x90, x21, cos(sin((cos(-11.715541194298199) * x75))))))))', 'Equation constants: {1: np.float64(-7.5207231578653655), 2: np.float64(-7.5207231578653655)}\nTree:  cos(((x37)**(-7.5207231578653655) cos sin(x35((x51 / const(cos(x36)))))))', 'Equation constants: {1: np.float64(9.392828196021831), 4: np.float64(9.392828196021831)}\nTree:  cos(((x32)**(9.392828196021831) cos sin(x35((9.392828196021831 / x14)))))', 'Equation constants: {1: np.float64(-4.6142022627519355)}\nTree:  cos(cos((x32)**(-4.6142022627519355)))', 'Equation constants: {1: np.float64(9.855586006660108), 2: np.float64(9.855586006660108), 3: np.float64(9.855586006660108), 4: np.float64(9.855586006660108), 6: np.float64(9.855586006660108)}\nTree:  cos(((x32)**(9.855586006660108) cos sin(x35((x21 / cos((cos((x57)**(((9.855586006660108)**((x56)**(9.855586006660108)) / const((x15)**(x28))))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * 9.855586006660108)))))))))))', 'Equation constants: {1: np.float64(0.11575473499499221)}\nTree:  cos(sin((x32)**(0.11575473499499221)))', 'Equation constants: {1: np.float64(-4.614528799381598)}\nTree:  cos(((x32)**(-4.614528799381598) cos sin(x35(/(x90, x21, sin(sin((sin(x35) * x75))))))))', 'Equation constants: {1: np.float64(7.4778319296209546), 2: np.float64(7.4778319296209546)}\nTree:  cos((pow(x32, 7.4778319296209546, sin(7.4778319296209546)) cos sin(x35((x21 / cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(-6.800459417846836), 2: np.float64(-6.800459417846836)}\nTree:  cos(((x32)**(-6.800459417846836) cos sin(x35(/(x48, x21, cos(sin((cos(-6.800459417846836) * x75))))))))', 'Equation constants: {1: np.float64(-1.5958051085710032), 2: np.float64(-1.5958051085710032)}\nTree:  cos(((x32)**(-1.5958051085710032) cos sin(x35(/(x90, x21, cos(sin((cos(-1.5958051085710032) * x75))))))))', 'Equation constants: {1: np.float64(-7.970238509251908), 2: np.float64(-7.970238509251908)}\nTree:  cos(cos((x32)**(-7.970238509251908), sin(x35(/(x90, x21, sin(sin((sin(x35) * x75)))))), (-7.970238509251908 + x59)))', 'Equation constants: {1: np.float64(-4.614028408236898)}\nTree:  cos(((x32)**(-4.614028408236898) cos sin(x35)))', 'Equation constants: {1: np.float64(-8.226146259441261)}\nTree:  cos(cos((x32)**(-8.226146259441261)))', 'Equation constants: {1: np.float64(-4.614580031434762)}\nTree:  cos(cos((x32)**(-4.614580031434762)))', 'Equation constants: {1: np.float64(0.11575473499499221)}\nTree:  cos(sin((x32)**(0.11575473499499221)))']
MSE: [np.float64(0.2990249812910738), np.float64(0.37220501474026463), np.float64(0.29594329630275346), np.float64(0.25335596341702205), np.float64(0.2533559633926206), np.float64(0.3141515560962704), np.float64(0.2521612222031974), np.float64(0.3411147937157238), np.float64(0.4115987891606841), np.float64(0.2557349172286448)]
Generators: ['Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.007867005764545966, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=516, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.254296163250517, 4.745703836749483), n_g=548, sigma_y=0.027064636707717575, unit=0.9727620968353976)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.007867005764545966, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9925131076781933)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.6878737063173127)', 'Generator(mode=real, range=(-6.372291037290265, 5.147708962709735), n_g=548, sigma_y=0.03247756404926109, unit=0.893261796910374)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.02165170936617406, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=870, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=516, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.007867005764545966, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.2167980266383818, 1.2408019733616185), n_g=806, sigma_y=0.009833757205682456, unit=0.6878737063173127)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=516, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=548, sigma_y=0.01443447291078271, unit=0.9022846433438121)', 'Generator(mode=real, range=(-0.8071980266383817, 0.8312019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-0.98304, 0.98304), n_g=806, sigma_y=0.005244670509697311, unit=0.7643041181303475)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-0.9723451526563744, 1.0756548473436256), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=516, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.379439788735795, 1.0781602112642052), n_g=806, sigma_y=0.009833757205682456, unit=0.6878737063173127)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.007867005764545966, unit=0.9341494777148692)', 'Generator(mode=real, range=(-4.9403748402386665, 7.0596251597613335), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5.76, 5.76), n_g=548, sigma_y=0.03247756404926109, unit=0.9825879766014115)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)']
Gen 48: 5 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {1: np.float64(6.561650252701764), 2: np.float64(6.561650252701764)}\nTree:  cos(((x32)**(6.561650252701764) cos sin(x35(/(x90, x21, cos(sin((cos(6.561650252701764) * x75))))))))', 'Equation constants: {2: np.float64(5.551115123125783e-17)}\nTree:  cos(cos((5.551115123125783e-17)**(x83)))', 'Equation constants: {1: np.float64(1.0047484241485125), 2: np.float64(1.0047484241485125)}\nTree:  sin(cos((1.0047484241485125)**(1.0047484241485125)))', 'Equation constants: {1: np.float64(-10.202091920369972)}\nTree:  cos(cos(pow(x32, -10.202091920369972, cos(x31))))', 'Equation constants: {1: np.float64(5.792530473136285), 2: np.float64(5.792530473136285)}\nTree:  cos(((x32)**(5.792530473136285) cos sin(x35(/(x90, x21, cos(sin((cos(5.792530473136285) * x75))))))))', 'Equation constants: {1: np.float64(-4.61391743418782)}\nTree:  cos(((x32)**(-4.61391743418782) cos sin(x35(-(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(6.683239394682616), 2: np.float64(6.683239394682616)}\nTree:  cos((pow(x32, 6.683239394682616, sin(6.683239394682616)) cos sin(x35(/(x90, x21, cos(sin((x32 * x75))))))))', 'Equation constants: {2: np.float64(-0.013485526729461607)}\nTree:  cos(cos((-0.013485526729461607)**(x83)))', 'Equation constants: {1: np.float64(-6.797954325279023), 4: np.float64(-6.797954325279023)}\nTree:  (((x32)**(-6.797954325279023) cos sin(x35((-6.797954325279023 / x14)))) cos sin(x44))', 'Equation constants: {1: np.float64(2.7775298196937754), 2: np.float64(2.7775298196937754)}\nTree:  cos(cos(pow(x32, 2.7775298196937754, sin(2.7775298196937754))))', 'Equation constants: {1: np.float64(0.11573770079755505)}\nTree:  cos(sin(pow(x32, 0.11573770079755505, (x66 + x1))))', 'Equation constants: {1: np.float64(1.243960094338469), 3: np.float64(1.243960094338469), 4: np.float64(1.243960094338469)}\nTree:  cos(((x84)**(1.243960094338469) cos sin(x35(/(x90, x21, cos(sin(((1.243960094338469 / (1.243960094338469 + x83)) + cos((x96 - x11))))))))))', 'Equation constants: {1: np.float64(-4.694246371123885), 2: np.float64(-4.694246371123885), 3: np.float64(-4.694246371123885), 4: np.float64(-4.694246371123885), 6: np.float64(-4.694246371123885)}\nTree:  cos(((x32)**(-4.694246371123885) cos sin(x35((x21 / cos((cos((x57)**(((-4.694246371123885)**((x56)**(-4.694246371123885)) / const((x15)**(x28))))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * -4.694246371123885)))))))))))', 'Equation constants: {3: np.float64(-1.047197553979741)}\nTree:  cos(-1.047197553979741)', 'Equation constants: {1: np.float64(-8.225920075815122)}\nTree:  cos(((x32)**(-8.225920075815122) cos sin(x35((x90 / x21)))))', 'Equation constants: {2: np.float64(-7.139948495728545)}\nTree:  cos(cos((-7.139948495728545)**(x83)))', 'Equation constants: {1: np.float64(-9.266442391799398)}\nTree:  cos(((x32)**(-9.266442391799398) cos sin(x35((x90 - x21)))))', 'Equation constants: {1: np.float64(8.449924606336662), 4: np.float64(8.449924606336662)}\nTree:  (((x32)**(8.449924606336662) cos sin(x35((8.449924606336662 / x14)))) cos sin(x44))', 'Equation constants: {1: np.float64(-0.6180564115232592), 3: np.float64(-0.6180564115232592), 4: np.float64(-0.6180564115232592)}\nTree:  cos(((x84)**(-0.6180564115232592) cos sin(x35(/(x90, x21, cos(sin(((-0.6180564115232592 / (-0.6180564115232592 + x83)) + cos((x96 - x11))))))))))', 'Equation constants: {1: np.float64(0.772097872514534), 5: np.float64(0.772097872514534)}\nTree:  (((x32)**(0.772097872514534) cos sin(x35((0.772097872514534 / x14)))) cos sin(x44))', 'Equation constants: {2: np.float64(-11.715541194298199), 3: np.float64(-11.715541194298199)}\nTree:  cos(((x32)**(-11.715541194298199) cos sin(x35(/(x90, x21, cos(sin((cos(-11.715541194298199) * x75))))))))', 'Equation constants: {1: np.float64(-7.5207231578653655), 2: np.float64(-7.5207231578653655)}\nTree:  cos(((x37)**(-7.5207231578653655) cos sin(x35((x51 / const(cos(x36)))))))', 'Equation constants: {1: np.float64(9.392828196021831), 4: np.float64(9.392828196021831)}\nTree:  cos(((x32)**(9.392828196021831) cos sin(x35((9.392828196021831 / x14)))))', 'Equation constants: {1: np.float64(-4.6142022627519355)}\nTree:  cos(cos((x32)**(-4.6142022627519355)))', 'Equation constants: {1: np.float64(9.855586006660108), 2: np.float64(9.855586006660108), 3: np.float64(9.855586006660108), 4: np.float64(9.855586006660108), 6: np.float64(9.855586006660108)}\nTree:  cos(((x32)**(9.855586006660108) cos sin(x35((x21 / cos((cos((x57)**(((9.855586006660108)**((x56)**(9.855586006660108)) / const((x15)**(x28))))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * 9.855586006660108)))))))))))', 'Equation constants: {1: np.float64(0.11575473499499221)}\nTree:  cos(sin((x32)**(0.11575473499499221)))', 'Equation constants: {1: np.float64(-4.614528799381598)}\nTree:  cos(((x32)**(-4.614528799381598) cos sin(x35(/(x90, x21, sin(sin((sin(x35) * x75))))))))', 'Equation constants: {1: np.float64(7.4778319296209546), 2: np.float64(7.4778319296209546)}\nTree:  cos((pow(x32, 7.4778319296209546, sin(7.4778319296209546)) cos sin(x35((x21 / cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(-6.800459417846836), 2: np.float64(-6.800459417846836)}\nTree:  cos(((x32)**(-6.800459417846836) cos sin(x35(/(x48, x21, cos(sin((cos(-6.800459417846836) * x75))))))))', 'Equation constants: {1: np.float64(-1.5958051085710032), 2: np.float64(-1.5958051085710032)}\nTree:  cos(((x32)**(-1.5958051085710032) cos sin(x35(/(x90, x21, cos(sin((cos(-1.5958051085710032) * x75))))))))', 'Equation constants: {1: np.float64(-7.970238509251908), 2: np.float64(-7.970238509251908)}\nTree:  cos(cos((x32)**(-7.970238509251908), sin(x35(/(x90, x21, sin(sin((sin(x35) * x75)))))), (-7.970238509251908 + x59)))', 'Equation constants: {1: np.float64(-4.614028408236898)}\nTree:  cos(((x32)**(-4.614028408236898) cos sin(x35)))', 'Equation constants: {1: np.float64(-8.226146259441261)}\nTree:  cos(cos((x32)**(-8.226146259441261)))', 'Equation constants: {1: np.float64(-4.614580031434762)}\nTree:  cos(cos((x32)**(-4.614580031434762)))', 'Equation constants: {1: np.float64(0.11575473499499221)}\nTree:  cos(sin((x32)**(0.11575473499499221)))', 'Equation constants: {1: np.float64(-9.44219369817035), 3: np.float64(-9.44219369817035)}\nTree:  cos(((x32)**(-9.44219369817035) cos sin(x35(/(x90, x21, cos((-9.44219369817035 * x16)))))))', 'Equation constants: {2: np.float64(0.00045305918134948405)}\nTree:  cos(cos((const((x70 / x47)))**(x83)))', 'Equation constants: {1: np.float64(-10.71889402907033)}\nTree:  cos(((x32)**(-10.71889402907033) cos sin(x35)))', 'Equation constants: {1: np.float64(1.3009081002888507), 2: np.float64(1.3009081002888507)}\nTree:  cos(((x32)**(1.3009081002888507) cos sin(x35(/(x90, x21, cos(sin((cos(1.3009081002888507) * x75))))))))', 'Equation constants: {3: np.float64(-1.0471975564615708)}\nTree:  cos(-1.0471975564615708)']
MSE: [np.float64(0.25864663700776347), np.float64(0.2538590384070592), np.float64(0.3141515560962704), np.float64(0.32888917568894704), np.float64(0.2533559633856629), np.float64(0.3140424433207607), np.float64(0.34338655297120296), np.float64(0.25), np.float64(0.2616986071741601), np.float64(0.4098683731572499)]
Generators: ['Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.6878737063173127)', 'Generator(mode=real, range=(-6.372291037290265, 5.147708962709735), n_g=548, sigma_y=0.03247756404926109, unit=0.893261796910374)', 'Generator(mode=real, range=(-5.528502044115648, 6.471497955884352), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.02165170936617406, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=870, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-4.8, 4.8), n_g=516, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.007867005764545966, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.2167980266383818, 1.2408019733616185), n_g=806, sigma_y=0.009833757205682456, unit=0.6878737063173127)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=516, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=548, sigma_y=0.01443447291078271, unit=0.9022846433438121)', 'Generator(mode=real, range=(-0.8071980266383817, 0.8312019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-0.98304, 0.98304), n_g=806, sigma_y=0.005244670509697311, unit=0.7643041181303475)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-0.9723451526563744, 1.0756548473436256), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=516, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.379439788735795, 1.0781602112642052), n_g=806, sigma_y=0.009833757205682456, unit=0.6878737063173127)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.007867005764545966, unit=0.9341494777148692)', 'Generator(mode=real, range=(-4.9403748402386665, 7.0596251597613335), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5.76, 5.76), n_g=548, sigma_y=0.03247756404926109, unit=0.9825879766014115)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-1.2167980266383818, 1.2408019733616185), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.007867005764545965, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.2167980266383818, 1.2408019733616185), n_g=870, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.006293604611636774, unit=0.9341494777148692)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.01443447291078271, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.011800508646818947, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.76, 5.76), n_g=548, sigma_y=0.025982051239408874, unit=0.9825879766014115)', 'Generator(mode=real, range=(-4.9403748402386665, 7.0596251597613335), n_g=516, sigma_y=0.027064636707717575, unit=0.8039356172193366)']
Gen 49: 8 equations and 10 generators passed MC.
  Queue sizes - Equations: 40, Generators: 40
Equations: ['Equation constants: {1: np.float64(-6.797954325279023), 4: np.float64(-6.797954325279023)}\nTree:  (((x32)**(-6.797954325279023) cos sin(x35((-6.797954325279023 / x14)))) cos sin(x44))', 'Equation constants: {1: np.float64(2.7775298196937754), 2: np.float64(2.7775298196937754)}\nTree:  cos(cos(pow(x32, 2.7775298196937754, sin(2.7775298196937754))))', 'Equation constants: {1: np.float64(0.11573770079755505)}\nTree:  cos(sin(pow(x32, 0.11573770079755505, (x66 + x1))))', 'Equation constants: {1: np.float64(1.243960094338469), 3: np.float64(1.243960094338469), 4: np.float64(1.243960094338469)}\nTree:  cos(((x84)**(1.243960094338469) cos sin(x35(/(x90, x21, cos(sin(((1.243960094338469 / (1.243960094338469 + x83)) + cos((x96 - x11))))))))))', 'Equation constants: {1: np.float64(-4.694246371123885), 2: np.float64(-4.694246371123885), 3: np.float64(-4.694246371123885), 4: np.float64(-4.694246371123885), 6: np.float64(-4.694246371123885)}\nTree:  cos(((x32)**(-4.694246371123885) cos sin(x35((x21 / cos((cos((x57)**(((-4.694246371123885)**((x56)**(-4.694246371123885)) / const((x15)**(x28))))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * -4.694246371123885)))))))))))', 'Equation constants: {3: np.float64(-1.047197553979741)}\nTree:  cos(-1.047197553979741)', 'Equation constants: {1: np.float64(-8.225920075815122)}\nTree:  cos(((x32)**(-8.225920075815122) cos sin(x35((x90 / x21)))))', 'Equation constants: {2: np.float64(-7.139948495728545)}\nTree:  cos(cos((-7.139948495728545)**(x83)))', 'Equation constants: {1: np.float64(-9.266442391799398)}\nTree:  cos(((x32)**(-9.266442391799398) cos sin(x35((x90 - x21)))))', 'Equation constants: {1: np.float64(8.449924606336662), 4: np.float64(8.449924606336662)}\nTree:  (((x32)**(8.449924606336662) cos sin(x35((8.449924606336662 / x14)))) cos sin(x44))', 'Equation constants: {1: np.float64(-0.6180564115232592), 3: np.float64(-0.6180564115232592), 4: np.float64(-0.6180564115232592)}\nTree:  cos(((x84)**(-0.6180564115232592) cos sin(x35(/(x90, x21, cos(sin(((-0.6180564115232592 / (-0.6180564115232592 + x83)) + cos((x96 - x11))))))))))', 'Equation constants: {1: np.float64(0.772097872514534), 5: np.float64(0.772097872514534)}\nTree:  (((x32)**(0.772097872514534) cos sin(x35((0.772097872514534 / x14)))) cos sin(x44))', 'Equation constants: {2: np.float64(-11.715541194298199), 3: np.float64(-11.715541194298199)}\nTree:  cos(((x32)**(-11.715541194298199) cos sin(x35(/(x90, x21, cos(sin((cos(-11.715541194298199) * x75))))))))', 'Equation constants: {1: np.float64(-7.5207231578653655), 2: np.float64(-7.5207231578653655)}\nTree:  cos(((x37)**(-7.5207231578653655) cos sin(x35((x51 / const(cos(x36)))))))', 'Equation constants: {1: np.float64(9.392828196021831), 4: np.float64(9.392828196021831)}\nTree:  cos(((x32)**(9.392828196021831) cos sin(x35((9.392828196021831 / x14)))))', 'Equation constants: {1: np.float64(-4.6142022627519355)}\nTree:  cos(cos((x32)**(-4.6142022627519355)))', 'Equation constants: {1: np.float64(9.855586006660108), 2: np.float64(9.855586006660108), 3: np.float64(9.855586006660108), 4: np.float64(9.855586006660108), 6: np.float64(9.855586006660108)}\nTree:  cos(((x32)**(9.855586006660108) cos sin(x35((x21 / cos((cos((x57)**(((9.855586006660108)**((x56)**(9.855586006660108)) / const((x15)**(x28))))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * 9.855586006660108)))))))))))', 'Equation constants: {1: np.float64(0.11575473499499221)}\nTree:  cos(sin((x32)**(0.11575473499499221)))', 'Equation constants: {1: np.float64(-4.614528799381598)}\nTree:  cos(((x32)**(-4.614528799381598) cos sin(x35(/(x90, x21, sin(sin((sin(x35) * x75))))))))', 'Equation constants: {1: np.float64(7.4778319296209546), 2: np.float64(7.4778319296209546)}\nTree:  cos((pow(x32, 7.4778319296209546, sin(7.4778319296209546)) cos sin(x35((x21 / cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(-6.800459417846836), 2: np.float64(-6.800459417846836)}\nTree:  cos(((x32)**(-6.800459417846836) cos sin(x35(/(x48, x21, cos(sin((cos(-6.800459417846836) * x75))))))))', 'Equation constants: {1: np.float64(-1.5958051085710032), 2: np.float64(-1.5958051085710032)}\nTree:  cos(((x32)**(-1.5958051085710032) cos sin(x35(/(x90, x21, cos(sin((cos(-1.5958051085710032) * x75))))))))', 'Equation constants: {1: np.float64(-7.970238509251908), 2: np.float64(-7.970238509251908)}\nTree:  cos(cos((x32)**(-7.970238509251908), sin(x35(/(x90, x21, sin(sin((sin(x35) * x75)))))), (-7.970238509251908 + x59)))', 'Equation constants: {1: np.float64(-4.614028408236898)}\nTree:  cos(((x32)**(-4.614028408236898) cos sin(x35)))', 'Equation constants: {1: np.float64(-8.226146259441261)}\nTree:  cos(cos((x32)**(-8.226146259441261)))', 'Equation constants: {1: np.float64(-4.614580031434762)}\nTree:  cos(cos((x32)**(-4.614580031434762)))', 'Equation constants: {1: np.float64(0.11575473499499221)}\nTree:  cos(sin((x32)**(0.11575473499499221)))', 'Equation constants: {1: np.float64(-9.44219369817035), 3: np.float64(-9.44219369817035)}\nTree:  cos(((x32)**(-9.44219369817035) cos sin(x35(/(x90, x21, cos((-9.44219369817035 * x16)))))))', 'Equation constants: {2: np.float64(0.00045305918134948405)}\nTree:  cos(cos((const((x70 / x47)))**(x83)))', 'Equation constants: {1: np.float64(-10.71889402907033)}\nTree:  cos(((x32)**(-10.71889402907033) cos sin(x35)))', 'Equation constants: {1: np.float64(1.3009081002888507), 2: np.float64(1.3009081002888507)}\nTree:  cos(((x32)**(1.3009081002888507) cos sin(x35(/(x90, x21, cos(sin((cos(1.3009081002888507) * x75))))))))', 'Equation constants: {3: np.float64(-1.0471975564615708)}\nTree:  cos(-1.0471975564615708)', 'Equation constants: {1: np.float64(0.4506838477273923)}\nTree:  cos(sin((x32)**(0.4506838477273923)))', 'Equation constants: {1: np.float64(1.001955987233017), 2: np.float64(1.001955987233017)}\nTree:  sin(cos((1.001955987233017)**(1.001955987233017)))', 'Equation constants: {3: np.float64(13.613568165464674)}\nTree:  cos(13.613568165464674)', 'Equation constants: {2: np.float64(5.699637309467327), 3: np.float64(5.699637309467327), 4: np.float64(5.699637309467327), 5: np.float64(5.699637309467327), 6: np.float64(5.699637309467327)}\nTree:  cos(((sin(((cos((5.699637309467327 - 5.699637309467327)))**((cos(x25) + 5.699637309467327)) * x48)))**(5.699637309467327) cos sin(x35(/(x90, x21, cos(sin((cos(5.699637309467327) * x75))))))))', 'Equation constants: {1: np.float64(9.978876682698473), 4: np.float64(9.978876682698473)}\nTree:  cos(((x32)**(9.978876682698473) cos sin(x35(sin(9.978876682698473)))))', 'Equation constants: {1: np.float64(6.0290746665036), 2: np.float64(6.0290746665036), 3: np.float64(6.0290746665036)}\nTree:  cos((pow(x32, const((x68 * 6.0290746665036)), sin(6.0290746665036)) cos sin(x35((x21 / cos(sin((x32 * x75))))))))', 'Equation constants: {1: np.float64(-8.973233263446627), 2: np.float64(-8.973233263446627), 3: np.float64(-8.973233263446627), 4: np.float64(-8.973233263446627), 6: np.float64(-8.973233263446627)}\nTree:  cos(((x32)**(-8.973233263446627) cos sin(x35((x21 / cos((cos((x57)**(((-8.973233263446627)**((x56)**(-8.973233263446627)) / const((x15)**(x28))))) * cos(sin(sin(((x85 + cos(sin((x35 * (x67 * x0))))) * -8.973233263446627)))))))))))', 'Equation constants: {1: np.float64(-4.613815082473224)}\nTree:  cos(cos((x32)**(-4.613815082473224)))']
MSE: [np.float64(0.25573491722863917), np.float64(0.6621957372730978), np.float64(0.25), np.float64(0.25502321507227094), np.float64(0.25260930985711477), np.float64(0.283718627666417), np.float64(0.25472405683959676), np.float64(0.42819189112626066), np.float64(0.25355740568527546), np.float64(0.2533559633868592)]
Generators: ['Generator(mode=real, range=(-4.8, 4.8), n_g=516, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.007867005764545966, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.2167980266383818, 1.2408019733616185), n_g=806, sigma_y=0.009833757205682456, unit=0.6878737063173127)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=548, sigma_y=0.018043091138478386, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=516, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=548, sigma_y=0.01443447291078271, unit=0.9022846433438121)', 'Generator(mode=real, range=(-0.8071980266383817, 0.8312019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-0.98304, 0.98304), n_g=806, sigma_y=0.005244670509697311, unit=0.7643041181303475)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=516, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-0.9723451526563744, 1.0756548473436256), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=516, sigma_y=0.018043091138478386, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.017321367492939253, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.379439788735795, 1.0781602112642052), n_g=806, sigma_y=0.009833757205682456, unit=0.6878737063173127)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.007867005764545966, unit=0.9341494777148692)', 'Generator(mode=real, range=(-4.9403748402386665, 7.0596251597613335), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-5.76, 5.76), n_g=548, sigma_y=0.03247756404926109, unit=0.9825879766014115)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=806, sigma_y=0.006555838137121638, unit=0.7643041181303475)', 'Generator(mode=real, range=(-1.2167980266383818, 1.2408019733616185), n_g=838, sigma_y=0.009833757205682456, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.007867005764545965, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-1.2167980266383818, 1.2408019733616185), n_g=870, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.006293604611636774, unit=0.9341494777148692)', 'Generator(mode=real, range=(-6.0, 6.0), n_g=548, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-6.964000589192255, 4.555999410807744), n_g=548, sigma_y=0.01443447291078271, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.011800508646818947, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5.76, 5.76), n_g=548, sigma_y=0.025982051239408874, unit=0.9825879766014115)', 'Generator(mode=real, range=(-4.9403748402386665, 7.0596251597613335), n_g=516, sigma_y=0.027064636707717575, unit=0.8039356172193366)', 'Generator(mode=real, range=(-0.9723451526563744, 1.0756548473436256), n_g=838, sigma_y=0.007867005764545965, unit=0.8492267979226084)', 'Generator(mode=real, range=(-5, 5), n_g=644, sigma_y=0.02255386392309798, unit=0.812056179009431)', 'Generator(mode=real, range=(-5, 5), n_g=612, sigma_y=0.027064636707717575, unit=0.812056179009431)', 'Generator(mode=real, range=(-5.812000589192255, 3.403999410807744), n_g=548, sigma_y=0.02165170936617406, unit=0.9022846433438121)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.009833757205682456, unit=0.7643041181303475)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.006293604611636774, unit=0.8407345299433823)', 'Generator(mode=real, range=(-1.2167980266383818, 1.2408019733616185), n_g=870, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=870, sigma_y=0.006555838137121638, unit=0.8492267979226084)', 'Generator(mode=real, range=(-1.0119980266383817, 1.0360019733616184), n_g=838, sigma_y=0.006293604611636774, unit=0.9341494777148692)', 'Generator(mode=real, range=(-4.9403748402386665, 7.0596251597613335), n_g=548, sigma_y=0.02165170936617406, unit=0.8039356172193366)']
